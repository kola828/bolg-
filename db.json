{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/main.507b3a.css","path":"main.507b3a.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/main.507b3a.js","path":"main.507b3a.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/mobile.fdc4b7.js","path":"mobile.fdc4b7.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/artImg/09-20_one.png","path":"img/artImg/09-20_one.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/artImg/09202.png","path":"img/artImg/09202.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/artImg/09203.png","path":"img/artImg/09203.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/artImg/09024.png","path":"img/artImg/09024.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/artImg/09204.png","path":"img/artImg/09204.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/artImg/09271.jpg","path":"img/artImg/09271.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/artImg/2017-09-20.png","path":"img/artImg/2017-09-20.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1522323342439},{"_id":"source/.DS_Store","hash":"a115d8f89a64f781d2d980d460f144c6db210023","modified":1522382788936},{"_id":"themes/landscape/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1522323342439},{"_id":"themes/landscape/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1522323342439},{"_id":"themes/landscape/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1522323342439},{"_id":"themes/landscape/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1522323342440},{"_id":"themes/landscape/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1522323342440},{"_id":"themes/landscape/README.md","hash":"99985dc9f0f3473a26341245e436751bc42fd322","modified":1522323342440},{"_id":"themes/landscape/_config.yml","hash":"cccacc8c5260028c092270445026db42cff0cbf9","modified":1522381024007},{"_id":"themes/landscape/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1522323342448},{"_id":"themes/landscape/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1522323342465},{"_id":"source/_posts/20170701.md","hash":"b11fa2565832212fc19e7e569c9572bbf093cbe7","modified":1522323342437},{"_id":"source/_posts/20170705.md","hash":"2b1412dcb8c6e5cb5b5bce6350b560beffa70098","modified":1522323342437},{"_id":"source/_posts/20170820.md","hash":"4f47c3f9ab4b17ce6a3beb8a50fd7b88974d9cae","modified":1522323342437},{"_id":"source/_posts/20170927.md","hash":"54d7f948d3b2373d515cb867947ca19246b330b0","modified":1522323342437},{"_id":"source/_posts/20170930.md","hash":"252407f74f877ee6ffe50e77d883c4688deca2af","modified":1522323342438},{"_id":"source/_posts/20171015.md","hash":"9d84f13242f1c527aa9f4ffe2a274be2cfc2d3ca","modified":1522323342438},{"_id":"source/_posts/20171228.md","hash":"1111d5b96f2cafd043968c067b631c3b4fc3a61e","modified":1522323342438},{"_id":"source/_posts/20180330.md","hash":"9c8e50cd7cd27e32bf559d781e3c3384ce5b8951","modified":1522380184163},{"_id":"source/_posts/20180330_p.md","hash":"ee769a9ca65e5436983687d31804a076c5b0140f","modified":1522381265836},{"_id":"source/_posts/20180415.md","hash":"d667ef4ac8f98b21f9ea7a0bc5714a0171efac3f","modified":1524711258171},{"_id":"source/_posts/925.md","hash":"b541636f790c1a7ea094e907b68ed5de1f410305","modified":1522323342438},{"_id":"source/_posts/sss.md","hash":"74a26b857751816110bbe2e00fd9a9f572a6b55a","modified":1522323342438},{"_id":"source/tags/index.css","hash":"6abcbfbf46dcabaab6a22d9b5808d7f8e08d10a2","modified":1522323342439},{"_id":"source/tags/index.ejs","hash":"7e51b4038b889346da792b60a4d7cea5299a5630","modified":1522323342439},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1522323342440},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1522323342441},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1522323342441},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1522323342441},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1522323342441},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1522323342441},{"_id":"themes/landscape/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1522323342441},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1522323342446},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1522323342447},{"_id":"themes/landscape/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1522323342447},{"_id":"themes/landscape/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1522323342447},{"_id":"themes/landscape/layout/other.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1522380605737},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1522323342448},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1522323342448},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1522323342448},{"_id":"themes/landscape/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1522323342465},{"_id":"themes/landscape/source/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1522323342464},{"_id":"themes/landscape/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1522323342448},{"_id":"themes/landscape/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1522323342459},{"_id":"themes/landscape/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522323342446},{"_id":"themes/landscape/source/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1522323342464},{"_id":"themes/landscape/source/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1522323342465},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1522323342442},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1522323342442},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1522323342442},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"f416fc0d11e77f62b8b138a8c7e83577202f4692","modified":1522323342442},{"_id":"themes/landscape/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1522323342442},{"_id":"themes/landscape/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1522323342442},{"_id":"themes/landscape/layout/_partial/css.ejs","hash":"b011d92be321ebe09fa2b3179c08aa435b9d051c","modified":1522323342443},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1522323342443},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1522323342443},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1522323342443},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1522323342443},{"_id":"themes/landscape/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1522323342443},{"_id":"themes/landscape/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1522323342443},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1522323342444},{"_id":"themes/landscape/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1522323342446},{"_id":"themes/landscape/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1522323342446},{"_id":"themes/landscape/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1522323342459},{"_id":"themes/landscape/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1522323342460},{"_id":"themes/landscape/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1522323342460},{"_id":"themes/landscape/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1522323342460},{"_id":"themes/landscape/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1522323342459},{"_id":"themes/landscape/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1522323342460},{"_id":"themes/landscape/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1522323342463},{"_id":"themes/landscape/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1522323342463},{"_id":"themes/landscape/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1522323342449},{"_id":"themes/landscape/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1522323342449},{"_id":"themes/landscape/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1522323342449},{"_id":"themes/landscape/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1522323342450},{"_id":"themes/landscape/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1522323342450},{"_id":"themes/landscape/source-src/css/article.scss","hash":"72fa71469b1d485b2268f3759476729b61abffcc","modified":1522323342450},{"_id":"themes/landscape/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1522323342450},{"_id":"themes/landscape/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1522323342450},{"_id":"themes/landscape/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1522323342464},{"_id":"themes/landscape/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1522323342452},{"_id":"themes/landscape/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1522323342449},{"_id":"themes/landscape/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1522323342453},{"_id":"themes/landscape/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1522323342453},{"_id":"themes/landscape/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1522323342453},{"_id":"themes/landscape/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1522323342454},{"_id":"themes/landscape/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1522323342454},{"_id":"themes/landscape/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1522323342455},{"_id":"themes/landscape/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1522323342455},{"_id":"themes/landscape/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1522323342455},{"_id":"themes/landscape/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1522323342455},{"_id":"themes/landscape/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1522323342455},{"_id":"themes/landscape/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1522323342455},{"_id":"themes/landscape/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1522323342456},{"_id":"themes/landscape/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1522323342456},{"_id":"themes/landscape/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1522323342456},{"_id":"themes/landscape/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1522323342456},{"_id":"themes/landscape/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1522323342456},{"_id":"themes/landscape/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1522323342456},{"_id":"themes/landscape/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1522323342457},{"_id":"themes/landscape/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1522323342457},{"_id":"themes/landscape/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1522323342457},{"_id":"themes/landscape/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1522323342457},{"_id":"themes/landscape/source-src/js/fix.js","hash":"7f9599ffd5c5551538e90b97023e7d6c599d1ee6","modified":1522323342457},{"_id":"themes/landscape/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1522323342458},{"_id":"themes/landscape/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1522323342458},{"_id":"themes/landscape/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1522323342458},{"_id":"themes/landscape/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1522323342458},{"_id":"themes/landscape/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1522323342458},{"_id":"themes/landscape/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1522323342458},{"_id":"themes/landscape/source-src/js/viewer.js","hash":"e8a35d4497fe1e0f119662ae08bd8404e5dab2a4","modified":1522323342459},{"_id":"themes/landscape/layout/_partial/script.ejs","hash":"439f2afa6c3515a7edd67d512aae6eba5b1b0d0b","modified":1522323342446},{"_id":"themes/landscape/source/img/head.jpg","hash":"eb3dfb3926f2288807e43cee17401ae3e0b88216","modified":1522323342463},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1522323342444},{"_id":"themes/landscape/layout/_partial/post/changyan.ejs","hash":"ec71ffc2023cebd933c96bd35a7a23d44a30a422","modified":1522323342444},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1522323342444},{"_id":"themes/landscape/layout/_partial/post/duoshuo.ejs","hash":"de7851fb6dbf01c77e824186074a7359a4c6587e","modified":1522323342444},{"_id":"themes/landscape/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1522323342444},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1522323342445},{"_id":"themes/landscape/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1522323342445},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1522323342445},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1522323342445},{"_id":"themes/landscape/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1522323342445},{"_id":"themes/landscape/source/img/artImg/09-20_one.png","hash":"382ec7b473578e238d1f88341888b49a08d52961","modified":1522323342461},{"_id":"themes/landscape/source/img/artImg/09202.png","hash":"84bc65989b12a8eb3e00a5d77fa8faaa1586b2cd","modified":1522323342461},{"_id":"themes/landscape/source/img/artImg/09203.png","hash":"fe5185cb600dc2aa6889831e5204b2c9f5cc691a","modified":1522323342462},{"_id":"themes/landscape/source/img/artImg/09024.png","hash":"52d76efb1aa17d5657f63f0f0f1bdecd15a7ac2e","modified":1522323342461},{"_id":"themes/landscape/source/img/artImg/09204.png","hash":"9cbbf2bbd1627a9bc2eb2868c91b4154b25eef15","modified":1522323342462},{"_id":"themes/landscape/source/img/artImg/09271.jpg","hash":"3b36c2f8740ac6284b9394804071486039d0a032","modified":1522323342462},{"_id":"themes/landscape/source/img/artImg/2017-09-20.png","hash":"4ccadb40f7e60588b4063baa42f0a7fdbe4f573d","modified":1522323342462},{"_id":"themes/landscape/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1522323342451},{"_id":"themes/landscape/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1522323342451},{"_id":"themes/landscape/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1522323342451},{"_id":"themes/landscape/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1522323342451},{"_id":"themes/landscape/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1522323342452},{"_id":"themes/landscape/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1522323342452},{"_id":"themes/landscape/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1522323342453},{"_id":"themes/landscape/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1522323342452},{"_id":"themes/landscape/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1522323342453},{"_id":"themes/landscape/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1522323342454},{"_id":"themes/landscape/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1522323342454},{"_id":"themes/landscape/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1522323342454}],"Category":[],"Data":[],"Page":[{"_content":"/*.vue-img{*/\n  /*height: 200px;*/\n/*}*/","source":"tags/index.css","raw":"/*.vue-img{*/\n  /*height: 200px;*/\n/*}*/","date":"2018-03-29T11:35:42.439Z","updated":"2018-03-29T11:35:42.439Z","path":"tags/index.css","layout":"false","title":"","comments":1,"_id":"cjgfxpze40001tm1f8sxg5szv","content":"/*.vue-img{*/\n  /*height: 200px;*/\n/*}*/","site":{"data":{}},"excerpt":"","more":"/*.vue-img{*/\n  /*height: 200px;*/\n/*}*/"},{"layout":"post","slug":"tags","title":"我的项目","noDate":"true","comments":0,"_content":"<link rel=\"stylesheet\" href=\"./index.css\">\n\n<div class=\"photos-btn-wrap\">\n    <p>此处是我写来练手的项目</p>\n    <p>1,使用vue重构的vue社区手机端，github地址：<a href=\"https://github.com/kola828/vue.js-web\">https://github.com/kola828/vue.js-web</a></p>\n    <img class=\"vue-img\" src=\"/img/vue-index.png\">\n    <p>2,使用vue-cli脚手架搭建的后台模板，github地址：<a href=\"https://github.com/kola828/personal-backstage\">https://github.com/kola828/personal-backstage</a></p>\n    <img class=\"vue-img\" src=\"/img/pre-notelist.png\">\n</div>\n\n\n<!--<div class=\"instagram itemscope\">-->\n<!--<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>-->\n<!--</div>-->\n\n\n\n\n","source":"tags/index.ejs","raw":"---\nlayout: post\nslug: \"tags\"\ntitle: \"我的项目\"\nnoDate: \"true\"\ncomments: \"false\"\n---\n<link rel=\"stylesheet\" href=\"./index.css\">\n\n<div class=\"photos-btn-wrap\">\n    <p>此处是我写来练手的项目</p>\n    <p>1,使用vue重构的vue社区手机端，github地址：<a href=\"https://github.com/kola828/vue.js-web\">https://github.com/kola828/vue.js-web</a></p>\n    <img class=\"vue-img\" src=\"/img/vue-index.png\">\n    <p>2,使用vue-cli脚手架搭建的后台模板，github地址：<a href=\"https://github.com/kola828/personal-backstage\">https://github.com/kola828/personal-backstage</a></p>\n    <img class=\"vue-img\" src=\"/img/pre-notelist.png\">\n</div>\n\n\n<!--<div class=\"instagram itemscope\">-->\n<!--<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>-->\n<!--</div>-->\n\n\n\n\n","date":"2018-03-29T11:35:42.439Z","updated":"2018-03-29T11:35:42.439Z","path":"tags/index.html","_id":"cjgfxpze70003tm1f854jmfd4","content":"<link rel=\"stylesheet\" href=\"./index.css\">\n\n<div class=\"photos-btn-wrap\">\n    <p>此处是我写来练手的项目</p>\n    <p>1,使用vue重构的vue社区手机端，github地址：<a href=\"https://github.com/kola828/vue.js-web\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/vue.js-web</a></p>\n    <img class=\"vue-img\" src=\"/img/vue-index.png\">\n    <p>2,使用vue-cli脚手架搭建的后台模板，github地址：<a href=\"https://github.com/kola828/personal-backstage\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/personal-backstage</a></p>\n    <img class=\"vue-img\" src=\"/img/pre-notelist.png\">\n</div>\n\n\n<!--<div class=\"instagram itemscope\">-->\n<!--<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>-->\n<!--</div>-->\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<link rel=\"stylesheet\" href=\"./index.css\">\n\n<div class=\"photos-btn-wrap\">\n    <p>此处是我写来练手的项目</p>\n    <p>1,使用vue重构的vue社区手机端，github地址：<a href=\"https://github.com/kola828/vue.js-web\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/vue.js-web</a></p>\n    <img class=\"vue-img\" src=\"/img/vue-index.png\">\n    <p>2,使用vue-cli脚手架搭建的后台模板，github地址：<a href=\"https://github.com/kola828/personal-backstage\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/personal-backstage</a></p>\n    <img class=\"vue-img\" src=\"/img/pre-notelist.png\">\n</div>\n\n\n<!--<div class=\"instagram itemscope\">-->\n<!--<a href=\"https://www.instagram.com/litten225/\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>-->\n<!--</div>-->\n\n\n\n\n"}],"Post":[{"title":"原生js练习系列——轮播","date":"2017-07-01T11:09:46.000Z","_content":"\n在论坛上看到一句话——框架可以让你走的更快，原生可以让你走的更远。\n对这句话十分赞同。\n在工作中为了高效的完成项目，一直在使用框架，以至于自己对原生的一些东西都有点生疏，\n所以决定在空闲时，写点东西练练手。\n轮播是项目中使用率很高的，所以就从轮播开始好了。\n<!--more-->\n\n## 思路\n轮播一般是几个大小相同的块儿在一个div内循环,一般是使用图片。\n1. 应该准备一个div,让你需要轮播的内容在里面循环\n2. 将需要轮播的div放在一行\n3. 加入动画，使其可以自动播放或者点击切换\n![image](/img/artImg/2107070101.png)\n\n\n## HTML\n```\n<div class=\"content\">\n   //滚动区域\n  <div class=\"swiper_group\" id=\"group\" style=\"left: 0\">\n    <div class=\"swiper\" style=\"background-color: red\">第一个</div>\n    <div class=\"swiper\" style=\"background-color: green\">第二个</div>\n    <div class=\"swiper\" style=\"background-color: blue\">第三个</div>\n  </div>\n  //左右箭头\n  <div class=\"nav_left\" onclick=\"goOther('left')\"> <</div>\n  <div class=\"nav_right\" onclick=\"goOther('right')\"> ></div>\n  //底部list\n  <div class=\"nav_bottom\">\n    <ul>\n      <li onclick=\"jump(0)\">1</li>\n      <li onclick=\"jump(1)\">2</li>\n      <li onclick=\"jump(2)\">3</li>\n    </ul>\n  </div>\n</div>\n```\n样式尽量不要写行内样式，此处是我偷懒....\n虽然很多轮播里面就是图片但是我依然使用的是div，这样可以根据自己的需求在里面放不同的内容,不仅仅限于图片\n\n## CSS\n样式写的比较简陋,可根据自己需求调整\n```\n.content {\n      position: relative;\n      width: 300px;\n      height: 150px;\n      overflow: hidden;\n    }\n    .swiper_group {\n      width: 900px;\n      position: absolute;\n      transition: all 1s; /*过度效果*/\n      -moz-transition: all 1s;;\n      -webkit-transition: all 1s;;\n      -o-transition: all 1s;;\n    }\n    .swiper {\n      color: white;\n      width: 300px;\n      height: 150px;\n      box-sizing: border-box;\n      border: 1px solid black;\n      float: left;\n    }\n    .nav_bottom {\n      position: absolute;\n      bottom: 0;\n      left: 75px;\n    }\n    .nav_left {\n      cursor: pointer;\n      color: white;\n      font-size: 25px;\n      position: absolute;\n      left: 0px;\n      top: 60px;\n    }\n    .nav_right {\n      cursor: pointer;\n      color: white;\n      font-size: 25px;\n      position: absolute;\n      right: 0px;\n      top: 60px;\n    }\n    .nav_bottom ul li {\n      list-style-type: none;\n      cursor: pointer;\n      display: inline-block;\n      width: 15px;\n      height: 15px;\n      line-height: 15px;\n      text-align: center;\n      background-color: #9d9d9d;\n    }\n    .active {\n      color: #9acfea;\n    }\n```\n\n## JavaScript\n\n```\n(function () {\n    let index = 0;\n    const _group = document.getElementById('group');\n    const _item = document.getElementsByClassName('swiper');\n    const _li = document.getElementsByTagName('li');\n    const _l = _li.length;\n\n    //底下的按钮 当前高亮\n    botNav = (index) => {\n      for (let i = 0; i < _li.length; i++) {\n        _li[i].className = ' ';\n      }\n      _li[index].className = 'active';\n    };\n    botNav(index);\n    //底下的按钮点击跳转\n    jump = (i) => {\n      botNav(i);\n      index = i;\n      _group.style.left = '-' + (_item[0].offsetWidth * i) + 'px'\n    };\n    //切换图片\n    changeDiv = () => {\n      let left = parseInt(_group.style.left);\n      let w_width = _group.offsetWidth;\n      let i_width = _item[0].offsetWidth;\n      if (Math.abs(left) >= (w_width - i_width)) {\n        index = 0;\n        _group.style.left = 0;\n      } else {\n        index++;\n        _group.style.left = (left - _item[0].offsetWidth) + 'px';\n      }\n      botNav(index)\n    };\n    //左右按钮\n    goOther = (dir) => {\n      let left = parseInt(_group.style.left);\n      let i_width = _item[0].offsetWidth;\n      let w = -(_group.offsetWidth - _item[0].offsetWidth);\n\n      if (dir == 'left') {\n        if (left >= 0) {\n          index = _l;\n          _group.style.left = w + 'px';\n        } else {\n          index--;\n          _group.style.left = (left + i_width) + 'px';\n        }\n      } else {\n        if (left <= w) {\n          index = 0;\n          _group.style.left = 0;\n        } else {\n          index++;\n          _group.style.left = (left - i_width) + 'px';\n\n        }\n      }\n      botNav(index)\n    };\n    setInterval(function () {\n      changeDiv();\n    }, 5000);\n  })()\n```\n最后的实际效果如图\n![image](/img/artImg/2017070102.png)\n![image](/img/artImg/2017010103.png)\n![image](/img/artImg/2017070104.png)\n\n\n## 总结\n\n- div.style.lefe 只能获取行内样式，可读写\n- offsetTop/Left 相对于父元素向下/向左的偏移值，只读属性，获取到的是数字\n- offsetHeight/Width只读属性，返回元素结构宽高，包括元素宽高，border，padding，滚动条。\n- scrollHeight/Width是一个只读的属性，滚动区域宽高\n- scrollTop/Left 属性能够得到或者设置元素滚动到下边/左边的像素值,可读写。\n- clientWidth/Height，只读属性包括元素宽高，padding。不包括滚动条，boder，margin。\n- clientTop/Left元素到浏览器视口的顶部/左部的距离。","source":"_posts/20170701.md","raw":"---\ntitle: 原生js练习系列——轮播\ndate: 2017-07-01 19:09:46\ntags:\n- JavaScript\n---\n\n在论坛上看到一句话——框架可以让你走的更快，原生可以让你走的更远。\n对这句话十分赞同。\n在工作中为了高效的完成项目，一直在使用框架，以至于自己对原生的一些东西都有点生疏，\n所以决定在空闲时，写点东西练练手。\n轮播是项目中使用率很高的，所以就从轮播开始好了。\n<!--more-->\n\n## 思路\n轮播一般是几个大小相同的块儿在一个div内循环,一般是使用图片。\n1. 应该准备一个div,让你需要轮播的内容在里面循环\n2. 将需要轮播的div放在一行\n3. 加入动画，使其可以自动播放或者点击切换\n![image](/img/artImg/2107070101.png)\n\n\n## HTML\n```\n<div class=\"content\">\n   //滚动区域\n  <div class=\"swiper_group\" id=\"group\" style=\"left: 0\">\n    <div class=\"swiper\" style=\"background-color: red\">第一个</div>\n    <div class=\"swiper\" style=\"background-color: green\">第二个</div>\n    <div class=\"swiper\" style=\"background-color: blue\">第三个</div>\n  </div>\n  //左右箭头\n  <div class=\"nav_left\" onclick=\"goOther('left')\"> <</div>\n  <div class=\"nav_right\" onclick=\"goOther('right')\"> ></div>\n  //底部list\n  <div class=\"nav_bottom\">\n    <ul>\n      <li onclick=\"jump(0)\">1</li>\n      <li onclick=\"jump(1)\">2</li>\n      <li onclick=\"jump(2)\">3</li>\n    </ul>\n  </div>\n</div>\n```\n样式尽量不要写行内样式，此处是我偷懒....\n虽然很多轮播里面就是图片但是我依然使用的是div，这样可以根据自己的需求在里面放不同的内容,不仅仅限于图片\n\n## CSS\n样式写的比较简陋,可根据自己需求调整\n```\n.content {\n      position: relative;\n      width: 300px;\n      height: 150px;\n      overflow: hidden;\n    }\n    .swiper_group {\n      width: 900px;\n      position: absolute;\n      transition: all 1s; /*过度效果*/\n      -moz-transition: all 1s;;\n      -webkit-transition: all 1s;;\n      -o-transition: all 1s;;\n    }\n    .swiper {\n      color: white;\n      width: 300px;\n      height: 150px;\n      box-sizing: border-box;\n      border: 1px solid black;\n      float: left;\n    }\n    .nav_bottom {\n      position: absolute;\n      bottom: 0;\n      left: 75px;\n    }\n    .nav_left {\n      cursor: pointer;\n      color: white;\n      font-size: 25px;\n      position: absolute;\n      left: 0px;\n      top: 60px;\n    }\n    .nav_right {\n      cursor: pointer;\n      color: white;\n      font-size: 25px;\n      position: absolute;\n      right: 0px;\n      top: 60px;\n    }\n    .nav_bottom ul li {\n      list-style-type: none;\n      cursor: pointer;\n      display: inline-block;\n      width: 15px;\n      height: 15px;\n      line-height: 15px;\n      text-align: center;\n      background-color: #9d9d9d;\n    }\n    .active {\n      color: #9acfea;\n    }\n```\n\n## JavaScript\n\n```\n(function () {\n    let index = 0;\n    const _group = document.getElementById('group');\n    const _item = document.getElementsByClassName('swiper');\n    const _li = document.getElementsByTagName('li');\n    const _l = _li.length;\n\n    //底下的按钮 当前高亮\n    botNav = (index) => {\n      for (let i = 0; i < _li.length; i++) {\n        _li[i].className = ' ';\n      }\n      _li[index].className = 'active';\n    };\n    botNav(index);\n    //底下的按钮点击跳转\n    jump = (i) => {\n      botNav(i);\n      index = i;\n      _group.style.left = '-' + (_item[0].offsetWidth * i) + 'px'\n    };\n    //切换图片\n    changeDiv = () => {\n      let left = parseInt(_group.style.left);\n      let w_width = _group.offsetWidth;\n      let i_width = _item[0].offsetWidth;\n      if (Math.abs(left) >= (w_width - i_width)) {\n        index = 0;\n        _group.style.left = 0;\n      } else {\n        index++;\n        _group.style.left = (left - _item[0].offsetWidth) + 'px';\n      }\n      botNav(index)\n    };\n    //左右按钮\n    goOther = (dir) => {\n      let left = parseInt(_group.style.left);\n      let i_width = _item[0].offsetWidth;\n      let w = -(_group.offsetWidth - _item[0].offsetWidth);\n\n      if (dir == 'left') {\n        if (left >= 0) {\n          index = _l;\n          _group.style.left = w + 'px';\n        } else {\n          index--;\n          _group.style.left = (left + i_width) + 'px';\n        }\n      } else {\n        if (left <= w) {\n          index = 0;\n          _group.style.left = 0;\n        } else {\n          index++;\n          _group.style.left = (left - i_width) + 'px';\n\n        }\n      }\n      botNav(index)\n    };\n    setInterval(function () {\n      changeDiv();\n    }, 5000);\n  })()\n```\n最后的实际效果如图\n![image](/img/artImg/2017070102.png)\n![image](/img/artImg/2017010103.png)\n![image](/img/artImg/2017070104.png)\n\n\n## 总结\n\n- div.style.lefe 只能获取行内样式，可读写\n- offsetTop/Left 相对于父元素向下/向左的偏移值，只读属性，获取到的是数字\n- offsetHeight/Width只读属性，返回元素结构宽高，包括元素宽高，border，padding，滚动条。\n- scrollHeight/Width是一个只读的属性，滚动区域宽高\n- scrollTop/Left 属性能够得到或者设置元素滚动到下边/左边的像素值,可读写。\n- clientWidth/Height，只读属性包括元素宽高，padding。不包括滚动条，boder，margin。\n- clientTop/Left元素到浏览器视口的顶部/左部的距离。","slug":"20170701","published":1,"updated":"2018-03-29T11:35:42.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzdz0000tm1fppuddqfq","content":"<p>在论坛上看到一句话——框架可以让你走的更快，原生可以让你走的更远。<br>对这句话十分赞同。<br>在工作中为了高效的完成项目，一直在使用框架，以至于自己对原生的一些东西都有点生疏，<br>所以决定在空闲时，写点东西练练手。<br>轮播是项目中使用率很高的，所以就从轮播开始好了。<br><a id=\"more\"></a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>轮播一般是几个大小相同的块儿在一个div内循环,一般是使用图片。</p>\n<ol>\n<li>应该准备一个div,让你需要轮播的内容在里面循环</li>\n<li>将需要轮播的div放在一行</li>\n<li>加入动画，使其可以自动播放或者点击切换<br><img src=\"/img/artImg/2107070101.png\" alt=\"image\"></li>\n</ol>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">   //滚动区域</span><br><span class=\"line\">  &lt;div class=&quot;swiper_group&quot; id=&quot;group&quot; style=&quot;left: 0&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper&quot; style=&quot;background-color: red&quot;&gt;第一个&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper&quot; style=&quot;background-color: green&quot;&gt;第二个&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper&quot; style=&quot;background-color: blue&quot;&gt;第三个&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  //左右箭头</span><br><span class=\"line\">  &lt;div class=&quot;nav_left&quot; onclick=&quot;goOther(&apos;left&apos;)&quot;&gt; &lt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;nav_right&quot; onclick=&quot;goOther(&apos;right&apos;)&quot;&gt; &gt;&lt;/div&gt;</span><br><span class=\"line\">  //底部list</span><br><span class=\"line\">  &lt;div class=&quot;nav_bottom&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;jump(0)&quot;&gt;1&lt;/li&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;jump(1)&quot;&gt;2&lt;/li&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;jump(2)&quot;&gt;3&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>样式尽量不要写行内样式，此处是我偷懒….<br>虽然很多轮播里面就是图片但是我依然使用的是div，这样可以根据自己的需求在里面放不同的内容,不仅仅限于图片</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>样式写的比较简陋,可根据自己需求调整<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      width: 300px;</span><br><span class=\"line\">      height: 150px;</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .swiper_group &#123;</span><br><span class=\"line\">      width: 900px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      transition: all 1s; /*过度效果*/</span><br><span class=\"line\">      -moz-transition: all 1s;;</span><br><span class=\"line\">      -webkit-transition: all 1s;;</span><br><span class=\"line\">      -o-transition: all 1s;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .swiper &#123;</span><br><span class=\"line\">      color: white;</span><br><span class=\"line\">      width: 300px;</span><br><span class=\"line\">      height: 150px;</span><br><span class=\"line\">      box-sizing: border-box;</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_bottom &#123;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">      left: 75px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_left &#123;</span><br><span class=\"line\">      cursor: pointer;</span><br><span class=\"line\">      color: white;</span><br><span class=\"line\">      font-size: 25px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      left: 0px;</span><br><span class=\"line\">      top: 60px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_right &#123;</span><br><span class=\"line\">      cursor: pointer;</span><br><span class=\"line\">      color: white;</span><br><span class=\"line\">      font-size: 25px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      right: 0px;</span><br><span class=\"line\">      top: 60px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_bottom ul li &#123;</span><br><span class=\"line\">      list-style-type: none;</span><br><span class=\"line\">      cursor: pointer;</span><br><span class=\"line\">      display: inline-block;</span><br><span class=\"line\">      width: 15px;</span><br><span class=\"line\">      height: 15px;</span><br><span class=\"line\">      line-height: 15px;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      background-color: #9d9d9d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .active &#123;</span><br><span class=\"line\">      color: #9acfea;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function () &#123;</span><br><span class=\"line\">    let index = 0;</span><br><span class=\"line\">    const _group = document.getElementById(&apos;group&apos;);</span><br><span class=\"line\">    const _item = document.getElementsByClassName(&apos;swiper&apos;);</span><br><span class=\"line\">    const _li = document.getElementsByTagName(&apos;li&apos;);</span><br><span class=\"line\">    const _l = _li.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    //底下的按钮 当前高亮</span><br><span class=\"line\">    botNav = (index) =&gt; &#123;</span><br><span class=\"line\">      for (let i = 0; i &lt; _li.length; i++) &#123;</span><br><span class=\"line\">        _li[i].className = &apos; &apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _li[index].className = &apos;active&apos;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    botNav(index);</span><br><span class=\"line\">    //底下的按钮点击跳转</span><br><span class=\"line\">    jump = (i) =&gt; &#123;</span><br><span class=\"line\">      botNav(i);</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">      _group.style.left = &apos;-&apos; + (_item[0].offsetWidth * i) + &apos;px&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //切换图片</span><br><span class=\"line\">    changeDiv = () =&gt; &#123;</span><br><span class=\"line\">      let left = parseInt(_group.style.left);</span><br><span class=\"line\">      let w_width = _group.offsetWidth;</span><br><span class=\"line\">      let i_width = _item[0].offsetWidth;</span><br><span class=\"line\">      if (Math.abs(left) &gt;= (w_width - i_width)) &#123;</span><br><span class=\"line\">        index = 0;</span><br><span class=\"line\">        _group.style.left = 0;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        _group.style.left = (left - _item[0].offsetWidth) + &apos;px&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      botNav(index)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //左右按钮</span><br><span class=\"line\">    goOther = (dir) =&gt; &#123;</span><br><span class=\"line\">      let left = parseInt(_group.style.left);</span><br><span class=\"line\">      let i_width = _item[0].offsetWidth;</span><br><span class=\"line\">      let w = -(_group.offsetWidth - _item[0].offsetWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">      if (dir == &apos;left&apos;) &#123;</span><br><span class=\"line\">        if (left &gt;= 0) &#123;</span><br><span class=\"line\">          index = _l;</span><br><span class=\"line\">          _group.style.left = w + &apos;px&apos;;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          index--;</span><br><span class=\"line\">          _group.style.left = (left + i_width) + &apos;px&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        if (left &lt;= w) &#123;</span><br><span class=\"line\">          index = 0;</span><br><span class=\"line\">          _group.style.left = 0;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          index++;</span><br><span class=\"line\">          _group.style.left = (left - i_width) + &apos;px&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      botNav(index)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    setInterval(function () &#123;</span><br><span class=\"line\">      changeDiv();</span><br><span class=\"line\">    &#125;, 5000);</span><br><span class=\"line\">  &#125;)()</span><br></pre></td></tr></table></figure>\n<p>最后的实际效果如图<br><img src=\"/img/artImg/2017070102.png\" alt=\"image\"><br><img src=\"/img/artImg/2017010103.png\" alt=\"image\"><br><img src=\"/img/artImg/2017070104.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>div.style.lefe 只能获取行内样式，可读写</li>\n<li>offsetTop/Left 相对于父元素向下/向左的偏移值，只读属性，获取到的是数字</li>\n<li>offsetHeight/Width只读属性，返回元素结构宽高，包括元素宽高，border，padding，滚动条。</li>\n<li>scrollHeight/Width是一个只读的属性，滚动区域宽高</li>\n<li>scrollTop/Left 属性能够得到或者设置元素滚动到下边/左边的像素值,可读写。</li>\n<li>clientWidth/Height，只读属性包括元素宽高，padding。不包括滚动条，boder，margin。</li>\n<li>clientTop/Left元素到浏览器视口的顶部/左部的距离。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在论坛上看到一句话——框架可以让你走的更快，原生可以让你走的更远。<br>对这句话十分赞同。<br>在工作中为了高效的完成项目，一直在使用框架，以至于自己对原生的一些东西都有点生疏，<br>所以决定在空闲时，写点东西练练手。<br>轮播是项目中使用率很高的，所以就从轮播开始好了。<br>","more":"</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>轮播一般是几个大小相同的块儿在一个div内循环,一般是使用图片。</p>\n<ol>\n<li>应该准备一个div,让你需要轮播的内容在里面循环</li>\n<li>将需要轮播的div放在一行</li>\n<li>加入动画，使其可以自动播放或者点击切换<br><img src=\"/img/artImg/2107070101.png\" alt=\"image\"></li>\n</ol>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">   //滚动区域</span><br><span class=\"line\">  &lt;div class=&quot;swiper_group&quot; id=&quot;group&quot; style=&quot;left: 0&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper&quot; style=&quot;background-color: red&quot;&gt;第一个&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper&quot; style=&quot;background-color: green&quot;&gt;第二个&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper&quot; style=&quot;background-color: blue&quot;&gt;第三个&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  //左右箭头</span><br><span class=\"line\">  &lt;div class=&quot;nav_left&quot; onclick=&quot;goOther(&apos;left&apos;)&quot;&gt; &lt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;nav_right&quot; onclick=&quot;goOther(&apos;right&apos;)&quot;&gt; &gt;&lt;/div&gt;</span><br><span class=\"line\">  //底部list</span><br><span class=\"line\">  &lt;div class=&quot;nav_bottom&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;jump(0)&quot;&gt;1&lt;/li&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;jump(1)&quot;&gt;2&lt;/li&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;jump(2)&quot;&gt;3&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>样式尽量不要写行内样式，此处是我偷懒….<br>虽然很多轮播里面就是图片但是我依然使用的是div，这样可以根据自己的需求在里面放不同的内容,不仅仅限于图片</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>样式写的比较简陋,可根据自己需求调整<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      width: 300px;</span><br><span class=\"line\">      height: 150px;</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .swiper_group &#123;</span><br><span class=\"line\">      width: 900px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      transition: all 1s; /*过度效果*/</span><br><span class=\"line\">      -moz-transition: all 1s;;</span><br><span class=\"line\">      -webkit-transition: all 1s;;</span><br><span class=\"line\">      -o-transition: all 1s;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .swiper &#123;</span><br><span class=\"line\">      color: white;</span><br><span class=\"line\">      width: 300px;</span><br><span class=\"line\">      height: 150px;</span><br><span class=\"line\">      box-sizing: border-box;</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_bottom &#123;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">      left: 75px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_left &#123;</span><br><span class=\"line\">      cursor: pointer;</span><br><span class=\"line\">      color: white;</span><br><span class=\"line\">      font-size: 25px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      left: 0px;</span><br><span class=\"line\">      top: 60px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_right &#123;</span><br><span class=\"line\">      cursor: pointer;</span><br><span class=\"line\">      color: white;</span><br><span class=\"line\">      font-size: 25px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      right: 0px;</span><br><span class=\"line\">      top: 60px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .nav_bottom ul li &#123;</span><br><span class=\"line\">      list-style-type: none;</span><br><span class=\"line\">      cursor: pointer;</span><br><span class=\"line\">      display: inline-block;</span><br><span class=\"line\">      width: 15px;</span><br><span class=\"line\">      height: 15px;</span><br><span class=\"line\">      line-height: 15px;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      background-color: #9d9d9d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .active &#123;</span><br><span class=\"line\">      color: #9acfea;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function () &#123;</span><br><span class=\"line\">    let index = 0;</span><br><span class=\"line\">    const _group = document.getElementById(&apos;group&apos;);</span><br><span class=\"line\">    const _item = document.getElementsByClassName(&apos;swiper&apos;);</span><br><span class=\"line\">    const _li = document.getElementsByTagName(&apos;li&apos;);</span><br><span class=\"line\">    const _l = _li.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    //底下的按钮 当前高亮</span><br><span class=\"line\">    botNav = (index) =&gt; &#123;</span><br><span class=\"line\">      for (let i = 0; i &lt; _li.length; i++) &#123;</span><br><span class=\"line\">        _li[i].className = &apos; &apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _li[index].className = &apos;active&apos;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    botNav(index);</span><br><span class=\"line\">    //底下的按钮点击跳转</span><br><span class=\"line\">    jump = (i) =&gt; &#123;</span><br><span class=\"line\">      botNav(i);</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">      _group.style.left = &apos;-&apos; + (_item[0].offsetWidth * i) + &apos;px&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //切换图片</span><br><span class=\"line\">    changeDiv = () =&gt; &#123;</span><br><span class=\"line\">      let left = parseInt(_group.style.left);</span><br><span class=\"line\">      let w_width = _group.offsetWidth;</span><br><span class=\"line\">      let i_width = _item[0].offsetWidth;</span><br><span class=\"line\">      if (Math.abs(left) &gt;= (w_width - i_width)) &#123;</span><br><span class=\"line\">        index = 0;</span><br><span class=\"line\">        _group.style.left = 0;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        _group.style.left = (left - _item[0].offsetWidth) + &apos;px&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      botNav(index)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //左右按钮</span><br><span class=\"line\">    goOther = (dir) =&gt; &#123;</span><br><span class=\"line\">      let left = parseInt(_group.style.left);</span><br><span class=\"line\">      let i_width = _item[0].offsetWidth;</span><br><span class=\"line\">      let w = -(_group.offsetWidth - _item[0].offsetWidth);</span><br><span class=\"line\"></span><br><span class=\"line\">      if (dir == &apos;left&apos;) &#123;</span><br><span class=\"line\">        if (left &gt;= 0) &#123;</span><br><span class=\"line\">          index = _l;</span><br><span class=\"line\">          _group.style.left = w + &apos;px&apos;;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          index--;</span><br><span class=\"line\">          _group.style.left = (left + i_width) + &apos;px&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        if (left &lt;= w) &#123;</span><br><span class=\"line\">          index = 0;</span><br><span class=\"line\">          _group.style.left = 0;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          index++;</span><br><span class=\"line\">          _group.style.left = (left - i_width) + &apos;px&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      botNav(index)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    setInterval(function () &#123;</span><br><span class=\"line\">      changeDiv();</span><br><span class=\"line\">    &#125;, 5000);</span><br><span class=\"line\">  &#125;)()</span><br></pre></td></tr></table></figure>\n<p>最后的实际效果如图<br><img src=\"/img/artImg/2017070102.png\" alt=\"image\"><br><img src=\"/img/artImg/2017010103.png\" alt=\"image\"><br><img src=\"/img/artImg/2017070104.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>div.style.lefe 只能获取行内样式，可读写</li>\n<li>offsetTop/Left 相对于父元素向下/向左的偏移值，只读属性，获取到的是数字</li>\n<li>offsetHeight/Width只读属性，返回元素结构宽高，包括元素宽高，border，padding，滚动条。</li>\n<li>scrollHeight/Width是一个只读的属性，滚动区域宽高</li>\n<li>scrollTop/Left 属性能够得到或者设置元素滚动到下边/左边的像素值,可读写。</li>\n<li>clientWidth/Height，只读属性包括元素宽高，padding。不包括滚动条，boder，margin。</li>\n<li>clientTop/Left元素到浏览器视口的顶部/左部的距离。</li>\n</ul>"},{"title":"原生js练习系列——tab切换","date":"2017-07-05T05:56:51.000Z","_content":"\ntab切换也是项目中使用较多的一种效果，很多UI框架中也会有这种组件\n今天使用原生的js写了一下，发现使用原生实现起来也很简单\n\n### 原理\ntab切换可以简单的理解为切换显示/隐藏的div，点击相应的tab的时候显示其内容\n\n<!--more-->\n### HTML\n```\n<div class=\"container\">\n  <!--切换导航-->\n  <div class=\"header\">\n    <ul>\n      <li onclick=\"changeBox(0)\">tabOne</li><li onclick=\"changeBox(1)\">tabTwo</li><li onclick=\"changeBox(2)\">tabThree</li>\n    </ul>\n  </div>\n  <!--内容-->\n  <div class=\"box\">\n    内容一\n  </div>\n  <div class=\"box\">\n    内容二\n  </div>\n  <div class=\"box\">\n    内容三\n  </div>\n</div>\n```\n### JavaScript\n\n```\n//获取所有的内容\n const box=document.getElementsByClassName('box');\n\n    changeBox=(i)=>{\n    //通过循环将他们的设置为隐藏\n      for(let j=0;j<box.length;j++){\n        box[j].style.display='none'\n      }\n      box[i].style.display='block'\n    };\n    //显示当前tab,默认显示第一个\n    changeBox(0);\n```\n\n### CSS\n\n```\n .header ul {\n      margin: 0;\n      padding: 0;\n    }\n    .header ul li {\n      list-style-type: none;\n      cursor: pointer;\n      margin: 0;\n      padding: 0;\n      width: 110px;\n      background: #9E9E9E;\n      color: white;\n      display: inline-block;\n      height: 35px;\n      text-align: center;\n      line-height: 35px;\n      box-sizing: border-box;\n    }\n    li + li {\n      border-left: 1px solid white;\n    }\n    .box {\n      width: 330px;\n      height: 300px;\n      box-sizing: border-box;\n      border: 1px solid red;\n    }\n```\n\n### 总结\n- 关于盒模型\n  盒模型分为两种即：W3C标准盒模型和IE标准盒子模型\n\n  - W3C标准盒模型：一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)\n\n  - IE标准盒子模型：一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）\n  \nCSS的box-sizing属性可以修改盒模型，其语法为\n>     box-sizing: content-box|border-box|inherit;\n\n  ![image](/img/artImg/2017070501.png)\n 这里要说的是 border-box，设置这个属性后 盒模型的width=元素的宽度+padding和border\n \n- 关于dispaly：inline-block\n在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素\n\n如果加两个元素的display属性都设置为inline-block 两个元素之前会出现一小块儿空白,如下所示：\n\n![image](/img/artImg/2017070502.png)\n```\n<div>\n    <div style=\"display: inline-block;border: 1px solid black\">tabOne</div>\n    <div style=\"display: inline-block;border: 1px solid black\">tabTwo</div>\n<div>\n\n```\n产生空白的原因是：写html的时候换行的时候产生了一个空格，所以浏览器留了一个字符的位置。\n解决的办法有：\n- 方法一：将html写在一行，不要换行\n```\n <div>\n    <div style=\"display: inline-block;border: 1px solid black\">tabOne</div><div style=\"display: inline-block;border: 1px solid black\">tabTwo</div>\n<div>\n```\n- 方法二：设置fontsize：0\n```\n<div style=\"font-size:0\">\n      <div style=\"display: inline-block;border: 1px solid black;font-size:12px\">tabOne</div>\n      <div style=\"display: inline-block;border: 1px solid black;font-size:12px\">tabTwo</div>\n</div>\n```","source":"_posts/20170705.md","raw":"---\ntitle: 原生js练习系列——tab切换\ndate: 2017-07-05 13:56:51\ntags:\n- JavaScript\n- 盒模型\n---\n\ntab切换也是项目中使用较多的一种效果，很多UI框架中也会有这种组件\n今天使用原生的js写了一下，发现使用原生实现起来也很简单\n\n### 原理\ntab切换可以简单的理解为切换显示/隐藏的div，点击相应的tab的时候显示其内容\n\n<!--more-->\n### HTML\n```\n<div class=\"container\">\n  <!--切换导航-->\n  <div class=\"header\">\n    <ul>\n      <li onclick=\"changeBox(0)\">tabOne</li><li onclick=\"changeBox(1)\">tabTwo</li><li onclick=\"changeBox(2)\">tabThree</li>\n    </ul>\n  </div>\n  <!--内容-->\n  <div class=\"box\">\n    内容一\n  </div>\n  <div class=\"box\">\n    内容二\n  </div>\n  <div class=\"box\">\n    内容三\n  </div>\n</div>\n```\n### JavaScript\n\n```\n//获取所有的内容\n const box=document.getElementsByClassName('box');\n\n    changeBox=(i)=>{\n    //通过循环将他们的设置为隐藏\n      for(let j=0;j<box.length;j++){\n        box[j].style.display='none'\n      }\n      box[i].style.display='block'\n    };\n    //显示当前tab,默认显示第一个\n    changeBox(0);\n```\n\n### CSS\n\n```\n .header ul {\n      margin: 0;\n      padding: 0;\n    }\n    .header ul li {\n      list-style-type: none;\n      cursor: pointer;\n      margin: 0;\n      padding: 0;\n      width: 110px;\n      background: #9E9E9E;\n      color: white;\n      display: inline-block;\n      height: 35px;\n      text-align: center;\n      line-height: 35px;\n      box-sizing: border-box;\n    }\n    li + li {\n      border-left: 1px solid white;\n    }\n    .box {\n      width: 330px;\n      height: 300px;\n      box-sizing: border-box;\n      border: 1px solid red;\n    }\n```\n\n### 总结\n- 关于盒模型\n  盒模型分为两种即：W3C标准盒模型和IE标准盒子模型\n\n  - W3C标准盒模型：一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)\n\n  - IE标准盒子模型：一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）\n  \nCSS的box-sizing属性可以修改盒模型，其语法为\n>     box-sizing: content-box|border-box|inherit;\n\n  ![image](/img/artImg/2017070501.png)\n 这里要说的是 border-box，设置这个属性后 盒模型的width=元素的宽度+padding和border\n \n- 关于dispaly：inline-block\n在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素\n\n如果加两个元素的display属性都设置为inline-block 两个元素之前会出现一小块儿空白,如下所示：\n\n![image](/img/artImg/2017070502.png)\n```\n<div>\n    <div style=\"display: inline-block;border: 1px solid black\">tabOne</div>\n    <div style=\"display: inline-block;border: 1px solid black\">tabTwo</div>\n<div>\n\n```\n产生空白的原因是：写html的时候换行的时候产生了一个空格，所以浏览器留了一个字符的位置。\n解决的办法有：\n- 方法一：将html写在一行，不要换行\n```\n <div>\n    <div style=\"display: inline-block;border: 1px solid black\">tabOne</div><div style=\"display: inline-block;border: 1px solid black\">tabTwo</div>\n<div>\n```\n- 方法二：设置fontsize：0\n```\n<div style=\"font-size:0\">\n      <div style=\"display: inline-block;border: 1px solid black;font-size:12px\">tabOne</div>\n      <div style=\"display: inline-block;border: 1px solid black;font-size:12px\">tabTwo</div>\n</div>\n```","slug":"20170705","published":1,"updated":"2018-03-29T11:35:42.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpze60002tm1fkv7sgouj","content":"<p>tab切换也是项目中使用较多的一种效果，很多UI框架中也会有这种组件<br>今天使用原生的js写了一下，发现使用原生实现起来也很简单</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>tab切换可以简单的理解为切换显示/隐藏的div，点击相应的tab的时候显示其内容</p>\n<a id=\"more\"></a>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;!--切换导航--&gt;</span><br><span class=\"line\">  &lt;div class=&quot;header&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;changeBox(0)&quot;&gt;tabOne&lt;/li&gt;&lt;li onclick=&quot;changeBox(1)&quot;&gt;tabTwo&lt;/li&gt;&lt;li onclick=&quot;changeBox(2)&quot;&gt;tabThree&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;!--内容--&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    内容一</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    内容二</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    内容三</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取所有的内容</span><br><span class=\"line\"> const box=document.getElementsByClassName(&apos;box&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    changeBox=(i)=&gt;&#123;</span><br><span class=\"line\">    //通过循环将他们的设置为隐藏</span><br><span class=\"line\">      for(let j=0;j&lt;box.length;j++)&#123;</span><br><span class=\"line\">        box[j].style.display=&apos;none&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      box[i].style.display=&apos;block&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //显示当前tab,默认显示第一个</span><br><span class=\"line\">    changeBox(0);</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header ul &#123;</span><br><span class=\"line\">     margin: 0;</span><br><span class=\"line\">     padding: 0;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .header ul li &#123;</span><br><span class=\"line\">     list-style-type: none;</span><br><span class=\"line\">     cursor: pointer;</span><br><span class=\"line\">     margin: 0;</span><br><span class=\"line\">     padding: 0;</span><br><span class=\"line\">     width: 110px;</span><br><span class=\"line\">     background: #9E9E9E;</span><br><span class=\"line\">     color: white;</span><br><span class=\"line\">     display: inline-block;</span><br><span class=\"line\">     height: 35px;</span><br><span class=\"line\">     text-align: center;</span><br><span class=\"line\">     line-height: 35px;</span><br><span class=\"line\">     box-sizing: border-box;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   li + li &#123;</span><br><span class=\"line\">     border-left: 1px solid white;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .box &#123;</span><br><span class=\"line\">     width: 330px;</span><br><span class=\"line\">     height: 300px;</span><br><span class=\"line\">     box-sizing: border-box;</span><br><span class=\"line\">     border: 1px solid red;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>关于盒模型<br>盒模型分为两种即：W3C标准盒模型和IE标准盒子模型</p>\n<ul>\n<li><p>W3C标准盒模型：一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)</p>\n</li>\n<li><p>IE标准盒子模型：一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>CSS的box-sizing属性可以修改盒模型，其语法为</p>\n<blockquote>\n<pre><code>box-sizing: content-box|border-box|inherit;\n</code></pre></blockquote>\n<p>  <img src=\"/img/artImg/2017070501.png\" alt=\"image\"><br> 这里要说的是 border-box，设置这个属性后 盒模型的width=元素的宽度+padding和border</p>\n<ul>\n<li>关于dispaly：inline-block<br>在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素</li>\n</ul>\n<p>如果加两个元素的display属性都设置为inline-block 两个元素之前会出现一小块儿空白,如下所示：</p>\n<p><img src=\"/img/artImg/2017070502.png\" alt=\"image\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabOne&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabTwo&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>产生空白的原因是：写html的时候换行的时候产生了一个空格，所以浏览器留了一个字符的位置。<br>解决的办法有：</p>\n<ul>\n<li><p>方法一：将html写在一行，不要换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabOne&lt;/div&gt;&lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabTwo&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法二：设置fontsize：0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;font-size:0&quot;&gt;</span><br><span class=\"line\">      &lt;div style=&quot;display: inline-block;border: 1px solid black;font-size:12px&quot;&gt;tabOne&lt;/div&gt;</span><br><span class=\"line\">      &lt;div style=&quot;display: inline-block;border: 1px solid black;font-size:12px&quot;&gt;tabTwo&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>tab切换也是项目中使用较多的一种效果，很多UI框架中也会有这种组件<br>今天使用原生的js写了一下，发现使用原生实现起来也很简单</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>tab切换可以简单的理解为切换显示/隐藏的div，点击相应的tab的时候显示其内容</p>","more":"<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;!--切换导航--&gt;</span><br><span class=\"line\">  &lt;div class=&quot;header&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li onclick=&quot;changeBox(0)&quot;&gt;tabOne&lt;/li&gt;&lt;li onclick=&quot;changeBox(1)&quot;&gt;tabTwo&lt;/li&gt;&lt;li onclick=&quot;changeBox(2)&quot;&gt;tabThree&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;!--内容--&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    内容一</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    内容二</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    内容三</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取所有的内容</span><br><span class=\"line\"> const box=document.getElementsByClassName(&apos;box&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    changeBox=(i)=&gt;&#123;</span><br><span class=\"line\">    //通过循环将他们的设置为隐藏</span><br><span class=\"line\">      for(let j=0;j&lt;box.length;j++)&#123;</span><br><span class=\"line\">        box[j].style.display=&apos;none&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      box[i].style.display=&apos;block&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //显示当前tab,默认显示第一个</span><br><span class=\"line\">    changeBox(0);</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header ul &#123;</span><br><span class=\"line\">     margin: 0;</span><br><span class=\"line\">     padding: 0;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .header ul li &#123;</span><br><span class=\"line\">     list-style-type: none;</span><br><span class=\"line\">     cursor: pointer;</span><br><span class=\"line\">     margin: 0;</span><br><span class=\"line\">     padding: 0;</span><br><span class=\"line\">     width: 110px;</span><br><span class=\"line\">     background: #9E9E9E;</span><br><span class=\"line\">     color: white;</span><br><span class=\"line\">     display: inline-block;</span><br><span class=\"line\">     height: 35px;</span><br><span class=\"line\">     text-align: center;</span><br><span class=\"line\">     line-height: 35px;</span><br><span class=\"line\">     box-sizing: border-box;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   li + li &#123;</span><br><span class=\"line\">     border-left: 1px solid white;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .box &#123;</span><br><span class=\"line\">     width: 330px;</span><br><span class=\"line\">     height: 300px;</span><br><span class=\"line\">     box-sizing: border-box;</span><br><span class=\"line\">     border: 1px solid red;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>关于盒模型<br>盒模型分为两种即：W3C标准盒模型和IE标准盒子模型</p>\n<ul>\n<li><p>W3C标准盒模型：一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)</p>\n</li>\n<li><p>IE标准盒子模型：一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>CSS的box-sizing属性可以修改盒模型，其语法为</p>\n<blockquote>\n<pre><code>box-sizing: content-box|border-box|inherit;\n</code></pre></blockquote>\n<p>  <img src=\"/img/artImg/2017070501.png\" alt=\"image\"><br> 这里要说的是 border-box，设置这个属性后 盒模型的width=元素的宽度+padding和border</p>\n<ul>\n<li>关于dispaly：inline-block<br>在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素</li>\n</ul>\n<p>如果加两个元素的display属性都设置为inline-block 两个元素之前会出现一小块儿空白,如下所示：</p>\n<p><img src=\"/img/artImg/2017070502.png\" alt=\"image\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabOne&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabTwo&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>产生空白的原因是：写html的时候换行的时候产生了一个空格，所以浏览器留了一个字符的位置。<br>解决的办法有：</p>\n<ul>\n<li><p>方法一：将html写在一行，不要换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabOne&lt;/div&gt;&lt;div style=&quot;display: inline-block;border: 1px solid black&quot;&gt;tabTwo&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法二：设置fontsize：0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;font-size:0&quot;&gt;</span><br><span class=\"line\">      &lt;div style=&quot;display: inline-block;border: 1px solid black;font-size:12px&quot;&gt;tabOne&lt;/div&gt;</span><br><span class=\"line\">      &lt;div style=&quot;display: inline-block;border: 1px solid black;font-size:12px&quot;&gt;tabTwo&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"使用vue+vuex+vue-router重构的vue.js社区手机端","date":"2017-08-20T09:12:21.000Z","_content":"\n之前趁着空闲的时候写的一个小项目\n主要是为了练练手，然后看到vue.js社区上有公共的api就想着拿来用\n整个项目是使用vue-cli脚手架搭建的\n使用的技术有\nvue2 + vuex + vue-router + webpack + ES6 + axios + sass <!--more-->\n\n\ngithub地址:https://github.com/kola828/vue.js-web\n\n多图预警\n------------------------------------------------------\n![image](/img/artImg/100101.png)\n![image](/img/artImg/100106.png)\n![image](/img/artImg/100102.png)\n![image](/img/artImg/100103.png)\n![image](/img/artImg/100104.png)\n![image](/img/artImg/100105.png)\n","source":"_posts/20170820.md","raw":"---\ntitle: 使用vue+vuex+vue-router重构的vue.js社区手机端\ndate: 2017-08-20 17:12:21\ntags:\n- vue.js\n- vuex\n- vue-router\n---\n\n之前趁着空闲的时候写的一个小项目\n主要是为了练练手，然后看到vue.js社区上有公共的api就想着拿来用\n整个项目是使用vue-cli脚手架搭建的\n使用的技术有\nvue2 + vuex + vue-router + webpack + ES6 + axios + sass <!--more-->\n\n\ngithub地址:https://github.com/kola828/vue.js-web\n\n多图预警\n------------------------------------------------------\n![image](/img/artImg/100101.png)\n![image](/img/artImg/100106.png)\n![image](/img/artImg/100102.png)\n![image](/img/artImg/100103.png)\n![image](/img/artImg/100104.png)\n![image](/img/artImg/100105.png)\n","slug":"20170820","published":1,"updated":"2018-03-29T11:35:42.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzea0005tm1f2m5rjffi","content":"<p>之前趁着空闲的时候写的一个小项目<br>主要是为了练练手，然后看到vue.js社区上有公共的api就想着拿来用<br>整个项目是使用vue-cli脚手架搭建的<br>使用的技术有<br>vue2 + vuex + vue-router + webpack + ES6 + axios + sass <a id=\"more\"></a></p>\n<p>github地址:<a href=\"https://github.com/kola828/vue.js-web\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/vue.js-web</a></p>\n<h2 id=\"多图预警\"><a href=\"#多图预警\" class=\"headerlink\" title=\"多图预警\"></a>多图预警</h2><p><img src=\"/img/artImg/100101.png\" alt=\"image\"><br><img src=\"/img/artImg/100106.png\" alt=\"image\"><br><img src=\"/img/artImg/100102.png\" alt=\"image\"><br><img src=\"/img/artImg/100103.png\" alt=\"image\"><br><img src=\"/img/artImg/100104.png\" alt=\"image\"><br><img src=\"/img/artImg/100105.png\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>之前趁着空闲的时候写的一个小项目<br>主要是为了练练手，然后看到vue.js社区上有公共的api就想着拿来用<br>整个项目是使用vue-cli脚手架搭建的<br>使用的技术有<br>vue2 + vuex + vue-router + webpack + ES6 + axios + sass","more":"</p>\n<p>github地址:<a href=\"https://github.com/kola828/vue.js-web\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/vue.js-web</a></p>\n<h2 id=\"多图预警\"><a href=\"#多图预警\" class=\"headerlink\" title=\"多图预警\"></a>多图预警</h2><p><img src=\"/img/artImg/100101.png\" alt=\"image\"><br><img src=\"/img/artImg/100106.png\" alt=\"image\"><br><img src=\"/img/artImg/100102.png\" alt=\"image\"><br><img src=\"/img/artImg/100103.png\" alt=\"image\"><br><img src=\"/img/artImg/100104.png\" alt=\"image\"><br><img src=\"/img/artImg/100105.png\" alt=\"image\"></p>"},{"title":"移动端常见问题解决方案","date":"2017-09-27T05:42:26.000Z","_content":"em。。。。 \n感觉移动端总有改不完的bug\n苹果，安卓有区别\n大屏，小屏幕区别<!--more-->\ngoole调试工具看着挺好的，可能到手机上又是一堆问题\n![image](/img/artImg/09271.jpg)\n\n所以这两天自己总结,搜集了一些移动端常见问题的解决方案\n\n## viewport 视口（可视区窗口）\n#### 移动端viewport设置\n- 默认不设置viewport一般可以试区宽度在移动端是980\n- width 可视区的宽度（number||device-width）注意：number在安卓手机上不兼容\n-  user-scalable 是否允许用户缩放（yes||no）ios10不兼容\n- initial-scale 初始缩放比例 ios10不兼容 \n- minimum-scale 最小缩放比例 ios10不兼容\n- maximum-scale 最大缩放比例 ios10不兼容\n- window.devicePixelRatio 像素比（像素比把一个像素放大至N个像素去显示）\n- 设计图最少750以上\n\n```\n<meta name=\"viewport\" content=\"width=device-width,user-scalable=no\">\n```\n\n## 移动端常见的一些问题\n- QQ强制横屏或者竖屏显示\n\n```\n<meta name=\"x5-orientation\" content=\"portrait /\" />　或　content=\"landscape\"　\n```\n- QQ设置全屏\n```\n<meta name=\"x5-fullscreen\" content=\"true\" />\n```\n- UC强制竖屏或横屏显示\n```\n<meta name=\"screen-orientation\" content=\"portrait | landscape\" />\n```\n- uc全屏显示\n```\n<meta name=\"full-screen\" content=\"yes\" />\n```\n- 禁止识别电话号码和邮箱号码\n```\n<meta name=\"format-detection\" content=\"telephone=no,email=no\" />\n```\n- 拨打电话和发邮箱\n```\n<a href=\"tel:电话号码\">电话号码</a> 或　<a href=\"mailto：邮箱地址\">请发送邮件</a>\n```\n- 网页中百度地图跳转\n```\n  <div class=\"address\">\n        <ul>\n            <li>收货方式:<span>活动成功后凭二维码到店自提</span></li>\n            <li>自提地点:<span>园区店</span><a class=\"map\" href=\"http://api.map.baidu.com/geocoder?address=苏州市枫津路30号&output=html&src=mc\">门店地址</a></li>\n            <li>自提时间:<span class=\"data\">2016.02.01-03.01</span></li>\n        </ul>\n    </div>\n```\n## 默认样式\n- 清除点击阴影 -webkit-tap-highlight-color\n```\na,input,button{\n    -webkit-tap-highlight-color: rgba(0,0,0,0)\n}\n```\n- 清除按钮圆角　-webkit-appearance\n```\ninput,button{\n    -webkit-appearance: none;\n    border-radius:0;\n}\n```\n- 默认字体设置　Helvetica\n```\nbody{\n    font-family:Helvetica;\n}\n```\n- 禁止文字缩放\n```\nbody　*{\n    -webkit-text-size-adjust: 100%;\n\n```\n- 选中文字设置\n```\nbody　*{\n    -webkit-user-select: none; /*部分手机支持　*/\n    \n\n```\n## 移动端的其他问题\n- Font Boosting\n> 在一段文字我们没有给他设置高度的时候，在webkit内核下，文字的大小被浏览器放大了\n\n###### ==解决办法：==\n1. 设置高度\n2. 设置最大高度　max-height\n- 固定定位fixed\n- IOS的body的overflow问题\n> body 在ios系统下横向拖动问题（可以在body上设置相对定位和overflow:hidden;在body下面包裹一层元素，在包裹元素上设置overflow:auto）\n- \n## 适配\n- 百分比适配\n- viewport适配\n\n```\n(function(){\n    var w = window.screen.width;\n    var targetW = 320;\n    var scale = w/targetW; //当前尺寸/目标尺寸\n    var mate = document.createElement(\"mate\");\n    mate.name = \"viewport\";\n    mate.content = \"user-scalable=no,initial-scale=\"+scale+\",minimum-scale=\"+scale+\",maximum-scale=\"+scale+\"\"\n    document.head.appendChild(meta);\n})()\n\n```\n- rem适配\n- 弹性盒模型（box版和flex版）\n","source":"_posts/20170927.md","raw":"---\ntitle: 移动端常见问题解决方案\ndate: 2017-09-27 13:42:26\ntags:\n- 适配\n- 移动端\n---\nem。。。。 \n感觉移动端总有改不完的bug\n苹果，安卓有区别\n大屏，小屏幕区别<!--more-->\ngoole调试工具看着挺好的，可能到手机上又是一堆问题\n![image](/img/artImg/09271.jpg)\n\n所以这两天自己总结,搜集了一些移动端常见问题的解决方案\n\n## viewport 视口（可视区窗口）\n#### 移动端viewport设置\n- 默认不设置viewport一般可以试区宽度在移动端是980\n- width 可视区的宽度（number||device-width）注意：number在安卓手机上不兼容\n-  user-scalable 是否允许用户缩放（yes||no）ios10不兼容\n- initial-scale 初始缩放比例 ios10不兼容 \n- minimum-scale 最小缩放比例 ios10不兼容\n- maximum-scale 最大缩放比例 ios10不兼容\n- window.devicePixelRatio 像素比（像素比把一个像素放大至N个像素去显示）\n- 设计图最少750以上\n\n```\n<meta name=\"viewport\" content=\"width=device-width,user-scalable=no\">\n```\n\n## 移动端常见的一些问题\n- QQ强制横屏或者竖屏显示\n\n```\n<meta name=\"x5-orientation\" content=\"portrait /\" />　或　content=\"landscape\"　\n```\n- QQ设置全屏\n```\n<meta name=\"x5-fullscreen\" content=\"true\" />\n```\n- UC强制竖屏或横屏显示\n```\n<meta name=\"screen-orientation\" content=\"portrait | landscape\" />\n```\n- uc全屏显示\n```\n<meta name=\"full-screen\" content=\"yes\" />\n```\n- 禁止识别电话号码和邮箱号码\n```\n<meta name=\"format-detection\" content=\"telephone=no,email=no\" />\n```\n- 拨打电话和发邮箱\n```\n<a href=\"tel:电话号码\">电话号码</a> 或　<a href=\"mailto：邮箱地址\">请发送邮件</a>\n```\n- 网页中百度地图跳转\n```\n  <div class=\"address\">\n        <ul>\n            <li>收货方式:<span>活动成功后凭二维码到店自提</span></li>\n            <li>自提地点:<span>园区店</span><a class=\"map\" href=\"http://api.map.baidu.com/geocoder?address=苏州市枫津路30号&output=html&src=mc\">门店地址</a></li>\n            <li>自提时间:<span class=\"data\">2016.02.01-03.01</span></li>\n        </ul>\n    </div>\n```\n## 默认样式\n- 清除点击阴影 -webkit-tap-highlight-color\n```\na,input,button{\n    -webkit-tap-highlight-color: rgba(0,0,0,0)\n}\n```\n- 清除按钮圆角　-webkit-appearance\n```\ninput,button{\n    -webkit-appearance: none;\n    border-radius:0;\n}\n```\n- 默认字体设置　Helvetica\n```\nbody{\n    font-family:Helvetica;\n}\n```\n- 禁止文字缩放\n```\nbody　*{\n    -webkit-text-size-adjust: 100%;\n\n```\n- 选中文字设置\n```\nbody　*{\n    -webkit-user-select: none; /*部分手机支持　*/\n    \n\n```\n## 移动端的其他问题\n- Font Boosting\n> 在一段文字我们没有给他设置高度的时候，在webkit内核下，文字的大小被浏览器放大了\n\n###### ==解决办法：==\n1. 设置高度\n2. 设置最大高度　max-height\n- 固定定位fixed\n- IOS的body的overflow问题\n> body 在ios系统下横向拖动问题（可以在body上设置相对定位和overflow:hidden;在body下面包裹一层元素，在包裹元素上设置overflow:auto）\n- \n## 适配\n- 百分比适配\n- viewport适配\n\n```\n(function(){\n    var w = window.screen.width;\n    var targetW = 320;\n    var scale = w/targetW; //当前尺寸/目标尺寸\n    var mate = document.createElement(\"mate\");\n    mate.name = \"viewport\";\n    mate.content = \"user-scalable=no,initial-scale=\"+scale+\",minimum-scale=\"+scale+\",maximum-scale=\"+scale+\"\"\n    document.head.appendChild(meta);\n})()\n\n```\n- rem适配\n- 弹性盒模型（box版和flex版）\n","slug":"20170927","published":1,"updated":"2018-03-29T11:35:42.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzec0006tm1f2xn7u7u8","content":"<p>em。。。。<br>感觉移动端总有改不完的bug<br>苹果，安卓有区别<br>大屏，小屏幕区别<a id=\"more\"></a><br>goole调试工具看着挺好的，可能到手机上又是一堆问题<br><img src=\"/img/artImg/09271.jpg\" alt=\"image\"></p>\n<p>所以这两天自己总结,搜集了一些移动端常见问题的解决方案</p>\n<h2 id=\"viewport-视口（可视区窗口）\"><a href=\"#viewport-视口（可视区窗口）\" class=\"headerlink\" title=\"viewport 视口（可视区窗口）\"></a>viewport 视口（可视区窗口）</h2><h4 id=\"移动端viewport设置\"><a href=\"#移动端viewport设置\" class=\"headerlink\" title=\"移动端viewport设置\"></a>移动端viewport设置</h4><ul>\n<li>默认不设置viewport一般可以试区宽度在移动端是980</li>\n<li>width 可视区的宽度（number||device-width）注意：number在安卓手机上不兼容</li>\n<li>user-scalable 是否允许用户缩放（yes||no）ios10不兼容</li>\n<li>initial-scale 初始缩放比例 ios10不兼容 </li>\n<li>minimum-scale 最小缩放比例 ios10不兼容</li>\n<li>maximum-scale 最大缩放比例 ios10不兼容</li>\n<li>window.devicePixelRatio 像素比（像素比把一个像素放大至N个像素去显示）</li>\n<li>设计图最少750以上</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端常见的一些问题\"><a href=\"#移动端常见的一些问题\" class=\"headerlink\" title=\"移动端常见的一些问题\"></a>移动端常见的一些问题</h2><ul>\n<li>QQ强制横屏或者竖屏显示</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait /&quot; /&gt;　或　content=&quot;landscape&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>QQ设置全屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UC强制竖屏或横屏显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait | landscape&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>uc全屏显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止识别电话号码和邮箱号码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拨打电话和发邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;tel:电话号码&quot;&gt;电话号码&lt;/a&gt; 或　&lt;a href=&quot;mailto：邮箱地址&quot;&gt;请发送邮件&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网页中百度地图跳转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;address&quot;&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;收货方式:&lt;span&gt;活动成功后凭二维码到店自提&lt;/span&gt;&lt;/li&gt;</span><br><span class=\"line\">          &lt;li&gt;自提地点:&lt;span&gt;园区店&lt;/span&gt;&lt;a class=&quot;map&quot; href=&quot;http://api.map.baidu.com/geocoder?address=苏州市枫津路30号&amp;output=html&amp;src=mc&quot;&gt;门店地址&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">          &lt;li&gt;自提时间:&lt;span class=&quot;data&quot;&gt;2016.02.01-03.01&lt;/span&gt;&lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"默认样式\"><a href=\"#默认样式\" class=\"headerlink\" title=\"默认样式\"></a>默认样式</h2><ul>\n<li><p>清除点击阴影 -webkit-tap-highlight-color</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a,input,button&#123;</span><br><span class=\"line\">    -webkit-tap-highlight-color: rgba(0,0,0,0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除按钮圆角　-webkit-appearance</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input,button&#123;</span><br><span class=\"line\">    -webkit-appearance: none;</span><br><span class=\"line\">    border-radius:0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认字体设置　Helvetica</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    font-family:Helvetica;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止文字缩放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body　*&#123;</span><br><span class=\"line\">    -webkit-text-size-adjust: 100%;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选中文字设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body　*&#123;</span><br><span class=\"line\">    -webkit-user-select: none; /*部分手机支持　*/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"移动端的其他问题\"><a href=\"#移动端的其他问题\" class=\"headerlink\" title=\"移动端的其他问题\"></a>移动端的其他问题</h2><ul>\n<li>Font Boosting<blockquote>\n<p>在一段文字我们没有给他设置高度的时候，在webkit内核下，文字的大小被浏览器放大了</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"==解决办法：==\"></a>==解决办法：==</h6><ol>\n<li>设置高度</li>\n<li>设置最大高度　max-height</li>\n</ol>\n<ul>\n<li>固定定位fixed</li>\n<li>IOS的body的overflow问题<blockquote>\n<p>body 在ios系统下横向拖动问题（可以在body上设置相对定位和overflow:hidden;在body下面包裹一层元素，在包裹元素上设置overflow:auto）</p>\n</blockquote>\n</li>\n<li><h2 id=\"适配\"><a href=\"#适配\" class=\"headerlink\" title=\"适配\"></a>适配</h2></li>\n<li>百分比适配</li>\n<li>viewport适配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var w = window.screen.width;</span><br><span class=\"line\">    var targetW = 320;</span><br><span class=\"line\">    var scale = w/targetW; //当前尺寸/目标尺寸</span><br><span class=\"line\">    var mate = document.createElement(&quot;mate&quot;);</span><br><span class=\"line\">    mate.name = &quot;viewport&quot;;</span><br><span class=\"line\">    mate.content = &quot;user-scalable=no,initial-scale=&quot;+scale+&quot;,minimum-scale=&quot;+scale+&quot;,maximum-scale=&quot;+scale+&quot;&quot;</span><br><span class=\"line\">    document.head.appendChild(meta);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>rem适配</li>\n<li>弹性盒模型（box版和flex版）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>em。。。。<br>感觉移动端总有改不完的bug<br>苹果，安卓有区别<br>大屏，小屏幕区别","more":"<br>goole调试工具看着挺好的，可能到手机上又是一堆问题<br><img src=\"/img/artImg/09271.jpg\" alt=\"image\"></p>\n<p>所以这两天自己总结,搜集了一些移动端常见问题的解决方案</p>\n<h2 id=\"viewport-视口（可视区窗口）\"><a href=\"#viewport-视口（可视区窗口）\" class=\"headerlink\" title=\"viewport 视口（可视区窗口）\"></a>viewport 视口（可视区窗口）</h2><h4 id=\"移动端viewport设置\"><a href=\"#移动端viewport设置\" class=\"headerlink\" title=\"移动端viewport设置\"></a>移动端viewport设置</h4><ul>\n<li>默认不设置viewport一般可以试区宽度在移动端是980</li>\n<li>width 可视区的宽度（number||device-width）注意：number在安卓手机上不兼容</li>\n<li>user-scalable 是否允许用户缩放（yes||no）ios10不兼容</li>\n<li>initial-scale 初始缩放比例 ios10不兼容 </li>\n<li>minimum-scale 最小缩放比例 ios10不兼容</li>\n<li>maximum-scale 最大缩放比例 ios10不兼容</li>\n<li>window.devicePixelRatio 像素比（像素比把一个像素放大至N个像素去显示）</li>\n<li>设计图最少750以上</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端常见的一些问题\"><a href=\"#移动端常见的一些问题\" class=\"headerlink\" title=\"移动端常见的一些问题\"></a>移动端常见的一些问题</h2><ul>\n<li>QQ强制横屏或者竖屏显示</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait /&quot; /&gt;　或　content=&quot;landscape&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>QQ设置全屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UC强制竖屏或横屏显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait | landscape&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>uc全屏显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止识别电话号码和邮箱号码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拨打电话和发邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;tel:电话号码&quot;&gt;电话号码&lt;/a&gt; 或　&lt;a href=&quot;mailto：邮箱地址&quot;&gt;请发送邮件&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网页中百度地图跳转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;address&quot;&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;收货方式:&lt;span&gt;活动成功后凭二维码到店自提&lt;/span&gt;&lt;/li&gt;</span><br><span class=\"line\">          &lt;li&gt;自提地点:&lt;span&gt;园区店&lt;/span&gt;&lt;a class=&quot;map&quot; href=&quot;http://api.map.baidu.com/geocoder?address=苏州市枫津路30号&amp;output=html&amp;src=mc&quot;&gt;门店地址&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">          &lt;li&gt;自提时间:&lt;span class=&quot;data&quot;&gt;2016.02.01-03.01&lt;/span&gt;&lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"默认样式\"><a href=\"#默认样式\" class=\"headerlink\" title=\"默认样式\"></a>默认样式</h2><ul>\n<li><p>清除点击阴影 -webkit-tap-highlight-color</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a,input,button&#123;</span><br><span class=\"line\">    -webkit-tap-highlight-color: rgba(0,0,0,0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除按钮圆角　-webkit-appearance</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input,button&#123;</span><br><span class=\"line\">    -webkit-appearance: none;</span><br><span class=\"line\">    border-radius:0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认字体设置　Helvetica</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    font-family:Helvetica;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止文字缩放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body　*&#123;</span><br><span class=\"line\">    -webkit-text-size-adjust: 100%;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选中文字设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body　*&#123;</span><br><span class=\"line\">    -webkit-user-select: none; /*部分手机支持　*/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"移动端的其他问题\"><a href=\"#移动端的其他问题\" class=\"headerlink\" title=\"移动端的其他问题\"></a>移动端的其他问题</h2><ul>\n<li>Font Boosting<blockquote>\n<p>在一段文字我们没有给他设置高度的时候，在webkit内核下，文字的大小被浏览器放大了</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"==解决办法：==\"></a>==解决办法：==</h6><ol>\n<li>设置高度</li>\n<li>设置最大高度　max-height</li>\n</ol>\n<ul>\n<li>固定定位fixed</li>\n<li>IOS的body的overflow问题<blockquote>\n<p>body 在ios系统下横向拖动问题（可以在body上设置相对定位和overflow:hidden;在body下面包裹一层元素，在包裹元素上设置overflow:auto）</p>\n</blockquote>\n</li>\n<li><h2 id=\"适配\"><a href=\"#适配\" class=\"headerlink\" title=\"适配\"></a>适配</h2></li>\n<li>百分比适配</li>\n<li>viewport适配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var w = window.screen.width;</span><br><span class=\"line\">    var targetW = 320;</span><br><span class=\"line\">    var scale = w/targetW; //当前尺寸/目标尺寸</span><br><span class=\"line\">    var mate = document.createElement(&quot;mate&quot;);</span><br><span class=\"line\">    mate.name = &quot;viewport&quot;;</span><br><span class=\"line\">    mate.content = &quot;user-scalable=no,initial-scale=&quot;+scale+&quot;,minimum-scale=&quot;+scale+&quot;,maximum-scale=&quot;+scale+&quot;&quot;</span><br><span class=\"line\">    document.head.appendChild(meta);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>rem适配</li>\n<li>弹性盒模型（box版和flex版）</li>\n</ul>"},{"title":"iframe 高度自适应","date":"2017-09-30T08:12:57.000Z","_content":"\n可能因为一工作就上手vue.js的原因，感觉自己对一些原生的东西还是太生疏了\n虽然有在看《JavaScript高级程序设计》然而对于使用较少的依然是使用较少\n默念三遍'框架可以让你走的更快，原生可以让你走的更远'\n\n今天帮别人写了一点公共的东西，使用到iframe,说实在的工作一年以来对iframe接触甚少\n借此机会总结一下\n- 如果没有设置iframe的高度的话，它有一个默认的150px的高度\n- 根据iframe里面内容的高度自适应<!--more-->\n\n下面上代码\n\n```\nfunction setIframeHeight(id){\n\t\t\t    try{\n\t\t\t        var iframe = document.getElementById(id);\n\t\t\t        if(iframe.attachEvent){ //处理ie8以下兼容\n\t\t\t            iframe.attachEvent(\"onload\", function(){\n\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; \n\t\t\t            });\n\t\t\t            return;\n\t\t\t        }else{\n\t\t\t            iframe.onload = function(){\n\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; \n\t\t\t            };\n\t\t\t            return;                 \n\t\t\t        }     \n\t\t\t    }catch(e){\n\t\t\t        throw new Error('setIframeHeight Error');\n\t\t\t    }\n\t\t\t}\n\t\t\t\n```\n\n调用 \n\n```\nsetIframeHeight(id)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/20170930.md","raw":"---\ntitle: iframe 高度自适应\ndate: 2017-09-30 16:12:57\ntags: iframe\n---\n\n可能因为一工作就上手vue.js的原因，感觉自己对一些原生的东西还是太生疏了\n虽然有在看《JavaScript高级程序设计》然而对于使用较少的依然是使用较少\n默念三遍'框架可以让你走的更快，原生可以让你走的更远'\n\n今天帮别人写了一点公共的东西，使用到iframe,说实在的工作一年以来对iframe接触甚少\n借此机会总结一下\n- 如果没有设置iframe的高度的话，它有一个默认的150px的高度\n- 根据iframe里面内容的高度自适应<!--more-->\n\n下面上代码\n\n```\nfunction setIframeHeight(id){\n\t\t\t    try{\n\t\t\t        var iframe = document.getElementById(id);\n\t\t\t        if(iframe.attachEvent){ //处理ie8以下兼容\n\t\t\t            iframe.attachEvent(\"onload\", function(){\n\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; \n\t\t\t            });\n\t\t\t            return;\n\t\t\t        }else{\n\t\t\t            iframe.onload = function(){\n\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; \n\t\t\t            };\n\t\t\t            return;                 \n\t\t\t        }     \n\t\t\t    }catch(e){\n\t\t\t        throw new Error('setIframeHeight Error');\n\t\t\t    }\n\t\t\t}\n\t\t\t\n```\n\n调用 \n\n```\nsetIframeHeight(id)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"20170930","published":1,"updated":"2018-03-29T11:35:42.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzed0007tm1f74anqol4","content":"<p>可能因为一工作就上手vue.js的原因，感觉自己对一些原生的东西还是太生疏了<br>虽然有在看《JavaScript高级程序设计》然而对于使用较少的依然是使用较少<br>默念三遍’框架可以让你走的更快，原生可以让你走的更远’</p>\n<p>今天帮别人写了一点公共的东西，使用到iframe,说实在的工作一年以来对iframe接触甚少<br>借此机会总结一下</p>\n<ul>\n<li>如果没有设置iframe的高度的话，它有一个默认的150px的高度</li>\n<li>根据iframe里面内容的高度自适应<a id=\"more\"></a></li>\n</ul>\n<p>下面上代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setIframeHeight(id)&#123;</span><br><span class=\"line\">\t\t\t    try&#123;</span><br><span class=\"line\">\t\t\t        var iframe = document.getElementById(id);</span><br><span class=\"line\">\t\t\t        if(iframe.attachEvent)&#123; //处理ie8以下兼容</span><br><span class=\"line\">\t\t\t            iframe.attachEvent(&quot;onload&quot;, function()&#123;</span><br><span class=\"line\">\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; </span><br><span class=\"line\">\t\t\t            &#125;);</span><br><span class=\"line\">\t\t\t            return;</span><br><span class=\"line\">\t\t\t        &#125;else&#123;</span><br><span class=\"line\">\t\t\t            iframe.onload = function()&#123;</span><br><span class=\"line\">\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; </span><br><span class=\"line\">\t\t\t            &#125;;</span><br><span class=\"line\">\t\t\t            return;                 </span><br><span class=\"line\">\t\t\t        &#125;     </span><br><span class=\"line\">\t\t\t    &#125;catch(e)&#123;</span><br><span class=\"line\">\t\t\t        throw new Error(&apos;setIframeHeight Error&apos;);</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setIframeHeight(id)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>可能因为一工作就上手vue.js的原因，感觉自己对一些原生的东西还是太生疏了<br>虽然有在看《JavaScript高级程序设计》然而对于使用较少的依然是使用较少<br>默念三遍’框架可以让你走的更快，原生可以让你走的更远’</p>\n<p>今天帮别人写了一点公共的东西，使用到iframe,说实在的工作一年以来对iframe接触甚少<br>借此机会总结一下</p>\n<ul>\n<li>如果没有设置iframe的高度的话，它有一个默认的150px的高度</li>\n<li>根据iframe里面内容的高度自适应","more":"</li>\n</ul>\n<p>下面上代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setIframeHeight(id)&#123;</span><br><span class=\"line\">\t\t\t    try&#123;</span><br><span class=\"line\">\t\t\t        var iframe = document.getElementById(id);</span><br><span class=\"line\">\t\t\t        if(iframe.attachEvent)&#123; //处理ie8以下兼容</span><br><span class=\"line\">\t\t\t            iframe.attachEvent(&quot;onload&quot;, function()&#123;</span><br><span class=\"line\">\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; </span><br><span class=\"line\">\t\t\t            &#125;);</span><br><span class=\"line\">\t\t\t            return;</span><br><span class=\"line\">\t\t\t        &#125;else&#123;</span><br><span class=\"line\">\t\t\t            iframe.onload = function()&#123;</span><br><span class=\"line\">\t\t\t                iframe.height=iframe.contentDocument.body.offsetHeight; </span><br><span class=\"line\">\t\t\t            &#125;;</span><br><span class=\"line\">\t\t\t            return;                 </span><br><span class=\"line\">\t\t\t        &#125;     </span><br><span class=\"line\">\t\t\t    &#125;catch(e)&#123;</span><br><span class=\"line\">\t\t\t        throw new Error(&apos;setIframeHeight Error&apos;);</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setIframeHeight(id)</span><br></pre></td></tr></table></figure>"},{"title":"es6之Class的基本语法","date":"2017-10-15T08:42:59.000Z","_content":"\n\n## 基本概念\nES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法。\n\nes5转es6示例 <!--more-->\n```\n//es5 生成实例对象的传统方法是通过构造函数.在Point的原型上挂载一个tostring方法\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')'; \n};\n\nvar p = new Point(1, 2);\n\n\n//使用esclass\n\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n \n  toString() {//方法之间不需要逗号分隔，加了会报错\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n\n```\n\n es6代码定义了一个“类”，可以看到里面有一个constructor方法,就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。 Point类除了构造方法，还定义了一个toString方法。\n    \n==ES6 的类，完全可以看作构造函数的另一种写法。==\n    \n使用时直接使用new命令\n```\nvar b = new Point(1,2);\n\n```\n\n- constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象\n- 定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。\n- 类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行\n\n## this 指向\n\n类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。\n```\nclass Logger {\n  printName(name = 'there') {\n    this.print(`Hello ${name}`);\n  }\n\n  print(text) {\n    console.log(text);\n  }\n}\n\nconst logger = new Logger();\nconst { printName } = logger;\nprintName(); // TypeError: Cannot read property 'print' of undefined\n```\n上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境，因为找不到print方法而导致报错。\n一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。\n```\nclass Logger {\n  constructor() {\n    this.printName = this.printName.bind(this);\n  }\n\n  // ...\n}\n```\n\n另一种解决方法是使用箭头函数。\n\n```\nclass Logger {\n  constructor() {\n    this.printName = (name = 'there') => {\n      this.print(`Hello ${name}`);\n    };\n  }\n\n  // ...\n}\n```\n\n## class的继承\n\nClass可以通过extends关键字实现继承\n```\nclass Point {\n}\n\nclass ColorPoint extends Point {\n}\n```\n上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。\n\n```\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n    super 关键字用于访问父对象上的函数。super可以用在类的继承中，或者对象字面量中，super指代了整个prototype或者__proto__指向的对象\n\n上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。\n\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。\n","source":"_posts/20171015.md","raw":"---\ntitle: es6之Class的基本语法\ndate: 2017-10-15 16:42:59\ntags: \n- es6笔记\n- class\n- 类\n- JavaScript\n---\n\n\n## 基本概念\nES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法。\n\nes5转es6示例 <!--more-->\n```\n//es5 生成实例对象的传统方法是通过构造函数.在Point的原型上挂载一个tostring方法\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')'; \n};\n\nvar p = new Point(1, 2);\n\n\n//使用esclass\n\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n \n  toString() {//方法之间不需要逗号分隔，加了会报错\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n\n```\n\n es6代码定义了一个“类”，可以看到里面有一个constructor方法,就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。 Point类除了构造方法，还定义了一个toString方法。\n    \n==ES6 的类，完全可以看作构造函数的另一种写法。==\n    \n使用时直接使用new命令\n```\nvar b = new Point(1,2);\n\n```\n\n- constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象\n- 定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。\n- 类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行\n\n## this 指向\n\n类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。\n```\nclass Logger {\n  printName(name = 'there') {\n    this.print(`Hello ${name}`);\n  }\n\n  print(text) {\n    console.log(text);\n  }\n}\n\nconst logger = new Logger();\nconst { printName } = logger;\nprintName(); // TypeError: Cannot read property 'print' of undefined\n```\n上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境，因为找不到print方法而导致报错。\n一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。\n```\nclass Logger {\n  constructor() {\n    this.printName = this.printName.bind(this);\n  }\n\n  // ...\n}\n```\n\n另一种解决方法是使用箭头函数。\n\n```\nclass Logger {\n  constructor() {\n    this.printName = (name = 'there') => {\n      this.print(`Hello ${name}`);\n    };\n  }\n\n  // ...\n}\n```\n\n## class的继承\n\nClass可以通过extends关键字实现继承\n```\nclass Point {\n}\n\nclass ColorPoint extends Point {\n}\n```\n上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。\n\n```\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n    super 关键字用于访问父对象上的函数。super可以用在类的继承中，或者对象字面量中，super指代了整个prototype或者__proto__指向的对象\n\n上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。\n\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。\n","slug":"20171015","published":1,"updated":"2018-03-29T11:35:42.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzeg000atm1fuurmofom","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法。</p>\n<p>es5转es6示例 <a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//es5 生成实例对象的传统方法是通过构造函数.在Point的原型上挂载一个tostring方法</span><br><span class=\"line\">function Point(x, y) &#123;</span><br><span class=\"line\">  this.x = x;</span><br><span class=\"line\">  this.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype.toString = function () &#123;</span><br><span class=\"line\">  return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = new Point(1, 2);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//使用esclass</span><br><span class=\"line\"></span><br><span class=\"line\">//定义类</span><br><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  toString() &#123;//方法之间不需要逗号分隔，加了会报错</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> es6代码定义了一个“类”，可以看到里面有一个constructor方法,就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。 Point类除了构造方法，还定义了一个toString方法。</p>\n<p>==ES6 的类，完全可以看作构造函数的另一种写法。==</p>\n<p>使用时直接使用new命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = new Point(1,2);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象</li>\n<li>定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</li>\n<li>类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行</li>\n</ul>\n<h2 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h2><p>类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  printName(name = &apos;there&apos;) &#123;</span><br><span class=\"line\">    this.print(`Hello $&#123;name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  print(text) &#123;</span><br><span class=\"line\">    console.log(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = new Logger();</span><br><span class=\"line\">const &#123; printName &#125; = logger;</span><br><span class=\"line\">printName(); // TypeError: Cannot read property &apos;print&apos; of undefined</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境，因为找不到print方法而导致报错。<br>一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.printName = this.printName.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另一种解决方法是使用箭头函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.printName = (name = &apos;there&apos;) =&gt; &#123;</span><br><span class=\"line\">      this.print(`Hello $&#123;name&#125;`);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"class的继承\"><a href=\"#class的继承\" class=\"headerlink\" title=\"class的继承\"></a>class的继承</h2><p>Class可以通过extends关键字实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">  constructor(x, y, color) &#123;</span><br><span class=\"line\">    super(x, y); // 调用父类的constructor(x, y)</span><br><span class=\"line\">    this.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>super 关键字用于访问父对象上的函数。super可以用在类的继承中，或者对象字面量中，super指代了整个prototype或者__proto__指向的对象\n</code></pre><p>上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。</p>\n<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法。</p>\n<p>es5转es6示例","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//es5 生成实例对象的传统方法是通过构造函数.在Point的原型上挂载一个tostring方法</span><br><span class=\"line\">function Point(x, y) &#123;</span><br><span class=\"line\">  this.x = x;</span><br><span class=\"line\">  this.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype.toString = function () &#123;</span><br><span class=\"line\">  return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = new Point(1, 2);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//使用esclass</span><br><span class=\"line\"></span><br><span class=\"line\">//定义类</span><br><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  toString() &#123;//方法之间不需要逗号分隔，加了会报错</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> es6代码定义了一个“类”，可以看到里面有一个constructor方法,就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。 Point类除了构造方法，还定义了一个toString方法。</p>\n<p>==ES6 的类，完全可以看作构造函数的另一种写法。==</p>\n<p>使用时直接使用new命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = new Point(1,2);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象</li>\n<li>定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</li>\n<li>类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行</li>\n</ul>\n<h2 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h2><p>类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  printName(name = &apos;there&apos;) &#123;</span><br><span class=\"line\">    this.print(`Hello $&#123;name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  print(text) &#123;</span><br><span class=\"line\">    console.log(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = new Logger();</span><br><span class=\"line\">const &#123; printName &#125; = logger;</span><br><span class=\"line\">printName(); // TypeError: Cannot read property &apos;print&apos; of undefined</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境，因为找不到print方法而导致报错。<br>一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.printName = this.printName.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另一种解决方法是使用箭头函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Logger &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.printName = (name = &apos;there&apos;) =&gt; &#123;</span><br><span class=\"line\">      this.print(`Hello $&#123;name&#125;`);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"class的继承\"><a href=\"#class的继承\" class=\"headerlink\" title=\"class的继承\"></a>class的继承</h2><p>Class可以通过extends关键字实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">  constructor(x, y, color) &#123;</span><br><span class=\"line\">    super(x, y); // 调用父类的constructor(x, y)</span><br><span class=\"line\">    this.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>super 关键字用于访问父对象上的函数。super可以用在类的继承中，或者对象字面量中，super指代了整个prototype或者__proto__指向的对象\n</code></pre><p>上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。</p>\n<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>"},{"title":"记使用vue+node+MySQL的搭建项目","date":"2017-12-28T07:36:15.000Z","_content":"\n## 前言\n这应该算是第一个前后端都是自己写的项目。\n整个项目的前期构想是希望能够实现一个个人的工作平台，可以记录一些自己的工作笔记、心得，能够建立备忘录提醒自己还有那些事情需要做。以后可以和整个公司的考勤，薪资等等结合起来。想法很美好，但是自己能力有限目前只是实现了登录和对笔记的增删改。其中新增文章支持markdown语法。\n\n前端技术栈 vue2.0全家桶+Element-UI+axios+stylus\n\n后端技术栈 node.js+express+mysql\n<!--more-->\n\n### 后端接口部分\n 在项目的目录下面新建一个server的文件夹用来放后端相关的文件\n \n 新建inde.js 作为后端入口文件\n```\n // node 后端服务器\n\nconst userApi = require('./api/userApi');\nconst artApi=require('./api/artApi');\nconst fs = require('fs');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\nconst app = express();\n\napp.use(cookieParser());\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n\n// 后端api路由\napp.use('/api/user', userApi);\napp.use('/api/atr',artApi);\n\n// 监听端口\napp.listen(3000);\nconsole.log('success listen at port:3000......');\n```\n \n 新建 db.js 配置数据库相关\n```\n module.exports = {\n  mysql: {\n    host     : 'localhost',\n    user     : 'root',\n    password : '****',\n    database : 'myblog',\n    port: '3306'\n  }\n};\n```\n新建sqlMap.js写sql语句\n```\nconst sqlMap = {\n  // 用户\n  user: {\n    add: 'insert into user(user_id, user_name, user_age) values (0, ?, ?)',\n    login: 'SELECT * FROM user WHERE user_name= ? ',\n  },\n  // 文章\n  art: {\n    addArt: 'INSERT INTO artinfo(art_title,art_author,art_contant,art_edit_time) VALUES(?,?,?,?)',\n    upDataArt: 'update artinfo set art_title=?,art_edit_time=?,art_contant=? where art_id=?',\n    artList: 'SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author= ? ORDER BY art_edit_time DESC',\n    oneArt: 'SELECT  art_id,art_title,art_author,art_contant FROM artinfo WHERE art_id=  ? ',\n    delArt: 'DELETE FROM artinfo WHERE art_id=? ',\n    pageList:'SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author=? ORDER BY art_edit_time DESC LIMIT ?,?' ,\n    allSum:'SELECT COUNT(*) FROM artinfo WHERE art_author= ? ',\n  }\n};\n\nmodule.exports = sqlMap;\n\n```\n新建一个api文件夹，然后再在下面新建一个userApi.js用于写和用户相关的接口\n```\n// api/userApi.js ---- 测试用api示例\nconst models = require('../db');\nconst express = require('express');\nconst router = express.Router();\nconst mysql = require('mysql');\nconst $sql = require('../sqlMap');\n\n// 连接数据库\nconst conn = mysql.createConnection(models.mysql);\n\nconn.connect();\n\n/**\n * @method isLogined\n * @description 判断是否登录\n * @param req {obj}\n * @returns {boolean}\n */\nfunction isLogined(req){\n  if(req.cookies[\"user\"] !== null){\n    let account = req.cookies[\"user\"];\n    let user = account.user;\n    if(user){\n      console.log(req.cookies.user.user + \" had logined.\");\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * @method backJson\n * @description 请求成功后返回json\n * @param res {obj}请求结果\n * @param result {obj} 查询结果\n * @param cb 回调函数\n */\nconst backJson = function (res, result, cb) {\n  if (typeof result === 'undefined') {\n    res.json({\n      code: '1',\n      msg: '操作失败'\n    });\n  } else {\n    cb()\n  }\n};\n\n\n/**\n * @description 登录接口\n */\nrouter.post('/login', (req, res) => {\n  let sql = $sql.user.login;\n  let params = req.body;\n  let pw = params.password;\n  conn.query(sql, [params.username], function (err, result) {\n    if (err) {\n      console.log(err);\n    }\n    if (result) {\n      backJson(res, result, function () {\n        if (result.length === 0) {\n          res.json({\n            code: '1',\n            msg: '用户名不存在',\n          });\n        } else if (pw === result[0].user_password) {\n          // req.session.user=result[0].user_name;\n          res.cookie(\"user\", {user: result[0].user_name,},{expires: new Date(Date.now() + 36000000)});\n          res.json({\n            code: '0',\n            msg: '登录成功',\n            data: {\n              id: result[0].user_id,\n              name:result[0].user_name\n              // name: params.username,\n            }\n          });\n        } else {\n          res.json({\n            code: '1',\n            msg: '用户名或密码错误'\n          })\n        }\n      })\n\n    }\n  })\n});\nmodule.exports = router;\n```\n\n完成这些操作后可以在server文件夹下的命令行运行 node indx 使用postman就可以访问http://localhost:3000/api/user/login 这个接口了\n\n### 前端部分\n使用了vue-cli脚手架，然后使用vue2.0全家桶配合element-UI完成整个前端页面的绘制。\n\n### github地址\nhttps://github.com/kola828/personal-backstage\n### 安装\nnpm i\n### 运行 \nnpm run dev\n### 访问地址\nhttp://localhost:8080\n### 打包\nnpm run build\n### 页面截图\n\n![image](/img/artImg/login.jpg)\n![image](/img/artImg/login2.png)\n![image](/img/artImg/notelist.png)\n![image](/img/artImg/editnote.png)\n![image](/img/artImg/notepad.png)\n![image](/img/artImg/chart.png)\n![image](/img/artImg/pie.png)\n![image](/img/artImg/table.png)\n![image](/img/artImg/tree.png)\n\n### 目录结构\n\n```\n\n│  .babelrc                 // ES6语法编译配置\n│  .editorconfig            // 代码编写规格\n│  .eslintignore\n│  .eslintrc.js\n│  .gitignore               // 忽略的文件     \n│  .postcssrc.js\n│  index.html               // 入口html文件\n│  package-lock.json\n│  package.json             // 项目及工具的依赖配置文件\n│  README.md                // 说明\n         \n├─build                     //webpack配置文件\n│      \n├─config\n│      dev.env.js\n│      index.js\n│      prod.env.js\n│      test.env.js     \n│                  \n├─server                     //后端服务\n│  │  db.js                  //数据库\n│  │  index.js               //入口文件\n│  │  sqlMap.js              //sql语句\n│  │  \n│  └─api                    //api\n│          artApi.js \n│          userApi.js\n│          \n├─src\n│  │  App.vue               // 页面入口文件\n│  │  main.js               // 程序入口文件，加载各种公共组件\n│  │      \n│  ├─components             //页面\n│  │  │  chart.vue          \n│  │  │  editNote.vue\n│  │  │  HelloWorld.vue\n│  │  │  index.vue\n│  │  │  login.vue\n│  │  │  noteList.vue\n│  │  │  notepad.vue\n│  │  │  pie.vue\n│  │  │  table.vue\n│  │  │  tree.vue\n│  │  │  \n│  │  └─nav                 //公共导航组件\n│  │          header-nav.vue\n│  │          left-nav.vue\n│  │          \n│  ├─image\n│  │      bg.jpg\n│  │      chart.png\n│  │      editnote.png\n│  │      head.jpg\n│  │      login.jpg\n│  │      login2.png\n│  │      notelist.png\n│  │      notepad.png\n│  │      pie.png\n│  │      table.png\n│  │      tree.png\n│  │      \n│  ├─router\n│  │      index.js\n│  │      \n│  ├─store                   // vuex的状态管理\n│  │      action.js\n│  │      common.js          //公共js\n│  │      getdata.js         //获取接口数据\n│  │      index.js\n│  │      mutations.js\n│  │      \n│  └─style                     //样式\n│      │  chart.styl\n│      │  common.styl\n│      │  editNote.styl\n│      │  index.styl\n│      │  login.styl\n│      │  noteList.styl\n│      │  notepad.styl\n│      │  pie.styl\n│      │  table.styl\n│      │  tree.styl\n│      │  \n│      └─base\n│              reset.styl\n│              \n\n```\n","source":"_posts/20171228.md","raw":"---\ntitle: 记使用vue+node+MySQL的搭建项目\ndate: 2017-12-28 15:36:15\ntags: \n- vue \n- node\n- mysql\n---\n\n## 前言\n这应该算是第一个前后端都是自己写的项目。\n整个项目的前期构想是希望能够实现一个个人的工作平台，可以记录一些自己的工作笔记、心得，能够建立备忘录提醒自己还有那些事情需要做。以后可以和整个公司的考勤，薪资等等结合起来。想法很美好，但是自己能力有限目前只是实现了登录和对笔记的增删改。其中新增文章支持markdown语法。\n\n前端技术栈 vue2.0全家桶+Element-UI+axios+stylus\n\n后端技术栈 node.js+express+mysql\n<!--more-->\n\n### 后端接口部分\n 在项目的目录下面新建一个server的文件夹用来放后端相关的文件\n \n 新建inde.js 作为后端入口文件\n```\n // node 后端服务器\n\nconst userApi = require('./api/userApi');\nconst artApi=require('./api/artApi');\nconst fs = require('fs');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\nconst app = express();\n\napp.use(cookieParser());\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n\n// 后端api路由\napp.use('/api/user', userApi);\napp.use('/api/atr',artApi);\n\n// 监听端口\napp.listen(3000);\nconsole.log('success listen at port:3000......');\n```\n \n 新建 db.js 配置数据库相关\n```\n module.exports = {\n  mysql: {\n    host     : 'localhost',\n    user     : 'root',\n    password : '****',\n    database : 'myblog',\n    port: '3306'\n  }\n};\n```\n新建sqlMap.js写sql语句\n```\nconst sqlMap = {\n  // 用户\n  user: {\n    add: 'insert into user(user_id, user_name, user_age) values (0, ?, ?)',\n    login: 'SELECT * FROM user WHERE user_name= ? ',\n  },\n  // 文章\n  art: {\n    addArt: 'INSERT INTO artinfo(art_title,art_author,art_contant,art_edit_time) VALUES(?,?,?,?)',\n    upDataArt: 'update artinfo set art_title=?,art_edit_time=?,art_contant=? where art_id=?',\n    artList: 'SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author= ? ORDER BY art_edit_time DESC',\n    oneArt: 'SELECT  art_id,art_title,art_author,art_contant FROM artinfo WHERE art_id=  ? ',\n    delArt: 'DELETE FROM artinfo WHERE art_id=? ',\n    pageList:'SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author=? ORDER BY art_edit_time DESC LIMIT ?,?' ,\n    allSum:'SELECT COUNT(*) FROM artinfo WHERE art_author= ? ',\n  }\n};\n\nmodule.exports = sqlMap;\n\n```\n新建一个api文件夹，然后再在下面新建一个userApi.js用于写和用户相关的接口\n```\n// api/userApi.js ---- 测试用api示例\nconst models = require('../db');\nconst express = require('express');\nconst router = express.Router();\nconst mysql = require('mysql');\nconst $sql = require('../sqlMap');\n\n// 连接数据库\nconst conn = mysql.createConnection(models.mysql);\n\nconn.connect();\n\n/**\n * @method isLogined\n * @description 判断是否登录\n * @param req {obj}\n * @returns {boolean}\n */\nfunction isLogined(req){\n  if(req.cookies[\"user\"] !== null){\n    let account = req.cookies[\"user\"];\n    let user = account.user;\n    if(user){\n      console.log(req.cookies.user.user + \" had logined.\");\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * @method backJson\n * @description 请求成功后返回json\n * @param res {obj}请求结果\n * @param result {obj} 查询结果\n * @param cb 回调函数\n */\nconst backJson = function (res, result, cb) {\n  if (typeof result === 'undefined') {\n    res.json({\n      code: '1',\n      msg: '操作失败'\n    });\n  } else {\n    cb()\n  }\n};\n\n\n/**\n * @description 登录接口\n */\nrouter.post('/login', (req, res) => {\n  let sql = $sql.user.login;\n  let params = req.body;\n  let pw = params.password;\n  conn.query(sql, [params.username], function (err, result) {\n    if (err) {\n      console.log(err);\n    }\n    if (result) {\n      backJson(res, result, function () {\n        if (result.length === 0) {\n          res.json({\n            code: '1',\n            msg: '用户名不存在',\n          });\n        } else if (pw === result[0].user_password) {\n          // req.session.user=result[0].user_name;\n          res.cookie(\"user\", {user: result[0].user_name,},{expires: new Date(Date.now() + 36000000)});\n          res.json({\n            code: '0',\n            msg: '登录成功',\n            data: {\n              id: result[0].user_id,\n              name:result[0].user_name\n              // name: params.username,\n            }\n          });\n        } else {\n          res.json({\n            code: '1',\n            msg: '用户名或密码错误'\n          })\n        }\n      })\n\n    }\n  })\n});\nmodule.exports = router;\n```\n\n完成这些操作后可以在server文件夹下的命令行运行 node indx 使用postman就可以访问http://localhost:3000/api/user/login 这个接口了\n\n### 前端部分\n使用了vue-cli脚手架，然后使用vue2.0全家桶配合element-UI完成整个前端页面的绘制。\n\n### github地址\nhttps://github.com/kola828/personal-backstage\n### 安装\nnpm i\n### 运行 \nnpm run dev\n### 访问地址\nhttp://localhost:8080\n### 打包\nnpm run build\n### 页面截图\n\n![image](/img/artImg/login.jpg)\n![image](/img/artImg/login2.png)\n![image](/img/artImg/notelist.png)\n![image](/img/artImg/editnote.png)\n![image](/img/artImg/notepad.png)\n![image](/img/artImg/chart.png)\n![image](/img/artImg/pie.png)\n![image](/img/artImg/table.png)\n![image](/img/artImg/tree.png)\n\n### 目录结构\n\n```\n\n│  .babelrc                 // ES6语法编译配置\n│  .editorconfig            // 代码编写规格\n│  .eslintignore\n│  .eslintrc.js\n│  .gitignore               // 忽略的文件     \n│  .postcssrc.js\n│  index.html               // 入口html文件\n│  package-lock.json\n│  package.json             // 项目及工具的依赖配置文件\n│  README.md                // 说明\n         \n├─build                     //webpack配置文件\n│      \n├─config\n│      dev.env.js\n│      index.js\n│      prod.env.js\n│      test.env.js     \n│                  \n├─server                     //后端服务\n│  │  db.js                  //数据库\n│  │  index.js               //入口文件\n│  │  sqlMap.js              //sql语句\n│  │  \n│  └─api                    //api\n│          artApi.js \n│          userApi.js\n│          \n├─src\n│  │  App.vue               // 页面入口文件\n│  │  main.js               // 程序入口文件，加载各种公共组件\n│  │      \n│  ├─components             //页面\n│  │  │  chart.vue          \n│  │  │  editNote.vue\n│  │  │  HelloWorld.vue\n│  │  │  index.vue\n│  │  │  login.vue\n│  │  │  noteList.vue\n│  │  │  notepad.vue\n│  │  │  pie.vue\n│  │  │  table.vue\n│  │  │  tree.vue\n│  │  │  \n│  │  └─nav                 //公共导航组件\n│  │          header-nav.vue\n│  │          left-nav.vue\n│  │          \n│  ├─image\n│  │      bg.jpg\n│  │      chart.png\n│  │      editnote.png\n│  │      head.jpg\n│  │      login.jpg\n│  │      login2.png\n│  │      notelist.png\n│  │      notepad.png\n│  │      pie.png\n│  │      table.png\n│  │      tree.png\n│  │      \n│  ├─router\n│  │      index.js\n│  │      \n│  ├─store                   // vuex的状态管理\n│  │      action.js\n│  │      common.js          //公共js\n│  │      getdata.js         //获取接口数据\n│  │      index.js\n│  │      mutations.js\n│  │      \n│  └─style                     //样式\n│      │  chart.styl\n│      │  common.styl\n│      │  editNote.styl\n│      │  index.styl\n│      │  login.styl\n│      │  noteList.styl\n│      │  notepad.styl\n│      │  pie.styl\n│      │  table.styl\n│      │  tree.styl\n│      │  \n│      └─base\n│              reset.styl\n│              \n\n```\n","slug":"20171228","published":1,"updated":"2018-03-29T11:35:42.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzei000btm1fxfjt92s3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这应该算是第一个前后端都是自己写的项目。<br>整个项目的前期构想是希望能够实现一个个人的工作平台，可以记录一些自己的工作笔记、心得，能够建立备忘录提醒自己还有那些事情需要做。以后可以和整个公司的考勤，薪资等等结合起来。想法很美好，但是自己能力有限目前只是实现了登录和对笔记的增删改。其中新增文章支持markdown语法。</p>\n<p>前端技术栈 vue2.0全家桶+Element-UI+axios+stylus</p>\n<p>后端技术栈 node.js+express+mysql<br><a id=\"more\"></a></p>\n<h3 id=\"后端接口部分\"><a href=\"#后端接口部分\" class=\"headerlink\" title=\"后端接口部分\"></a>后端接口部分</h3><p> 在项目的目录下面新建一个server的文件夹用来放后端相关的文件</p>\n<p> 新建inde.js 作为后端入口文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // node 后端服务器</span><br><span class=\"line\"></span><br><span class=\"line\">const userApi = require(&apos;./api/userApi&apos;);</span><br><span class=\"line\">const artApi=require(&apos;./api/artApi&apos;);</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">const session = require(&apos;express-session&apos;);</span><br><span class=\"line\">const app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended: false&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 后端api路由</span><br><span class=\"line\">app.use(&apos;/api/user&apos;, userApi);</span><br><span class=\"line\">app.use(&apos;/api/atr&apos;,artApi);</span><br><span class=\"line\"></span><br><span class=\"line\">// 监听端口</span><br><span class=\"line\">app.listen(3000);</span><br><span class=\"line\">console.log(&apos;success listen at port:3000......&apos;);</span><br></pre></td></tr></table></figure></p>\n<p> 新建 db.js 配置数据库相关<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module.exports = &#123;</span><br><span class=\"line\">  mysql: &#123;</span><br><span class=\"line\">    host     : &apos;localhost&apos;,</span><br><span class=\"line\">    user     : &apos;root&apos;,</span><br><span class=\"line\">    password : &apos;****&apos;,</span><br><span class=\"line\">    database : &apos;myblog&apos;,</span><br><span class=\"line\">    port: &apos;3306&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>新建sqlMap.js写sql语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sqlMap = &#123;</span><br><span class=\"line\">  // 用户</span><br><span class=\"line\">  user: &#123;</span><br><span class=\"line\">    add: &apos;insert into user(user_id, user_name, user_age) values (0, ?, ?)&apos;,</span><br><span class=\"line\">    login: &apos;SELECT * FROM user WHERE user_name= ? &apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 文章</span><br><span class=\"line\">  art: &#123;</span><br><span class=\"line\">    addArt: &apos;INSERT INTO artinfo(art_title,art_author,art_contant,art_edit_time) VALUES(?,?,?,?)&apos;,</span><br><span class=\"line\">    upDataArt: &apos;update artinfo set art_title=?,art_edit_time=?,art_contant=? where art_id=?&apos;,</span><br><span class=\"line\">    artList: &apos;SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author= ? ORDER BY art_edit_time DESC&apos;,</span><br><span class=\"line\">    oneArt: &apos;SELECT  art_id,art_title,art_author,art_contant FROM artinfo WHERE art_id=  ? &apos;,</span><br><span class=\"line\">    delArt: &apos;DELETE FROM artinfo WHERE art_id=? &apos;,</span><br><span class=\"line\">    pageList:&apos;SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author=? ORDER BY art_edit_time DESC LIMIT ?,?&apos; ,</span><br><span class=\"line\">    allSum:&apos;SELECT COUNT(*) FROM artinfo WHERE art_author= ? &apos;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = sqlMap;</span><br></pre></td></tr></table></figure></p>\n<p>新建一个api文件夹，然后再在下面新建一个userApi.js用于写和用户相关的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// api/userApi.js ---- 测试用api示例</span><br><span class=\"line\">const models = require(&apos;../db&apos;);</span><br><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const router = express.Router();</span><br><span class=\"line\">const mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">const $sql = require(&apos;../sqlMap&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接数据库</span><br><span class=\"line\">const conn = mysql.createConnection(models.mysql);</span><br><span class=\"line\"></span><br><span class=\"line\">conn.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @method isLogined</span><br><span class=\"line\"> * @description 判断是否登录</span><br><span class=\"line\"> * @param req &#123;obj&#125;</span><br><span class=\"line\"> * @returns &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">function isLogined(req)&#123;</span><br><span class=\"line\">  if(req.cookies[&quot;user&quot;] !== null)&#123;</span><br><span class=\"line\">    let account = req.cookies[&quot;user&quot;];</span><br><span class=\"line\">    let user = account.user;</span><br><span class=\"line\">    if(user)&#123;</span><br><span class=\"line\">      console.log(req.cookies.user.user + &quot; had logined.&quot;);</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @method backJson</span><br><span class=\"line\"> * @description 请求成功后返回json</span><br><span class=\"line\"> * @param res &#123;obj&#125;请求结果</span><br><span class=\"line\"> * @param result &#123;obj&#125; 查询结果</span><br><span class=\"line\"> * @param cb 回调函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">const backJson = function (res, result, cb) &#123;</span><br><span class=\"line\">  if (typeof result === &apos;undefined&apos;) &#123;</span><br><span class=\"line\">    res.json(&#123;</span><br><span class=\"line\">      code: &apos;1&apos;,</span><br><span class=\"line\">      msg: &apos;操作失败&apos;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    cb()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @description 登录接口</span><br><span class=\"line\"> */</span><br><span class=\"line\">router.post(&apos;/login&apos;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  let sql = $sql.user.login;</span><br><span class=\"line\">  let params = req.body;</span><br><span class=\"line\">  let pw = params.password;</span><br><span class=\"line\">  conn.query(sql, [params.username], function (err, result) &#123;</span><br><span class=\"line\">    if (err) &#123;</span><br><span class=\"line\">      console.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (result) &#123;</span><br><span class=\"line\">      backJson(res, result, function () &#123;</span><br><span class=\"line\">        if (result.length === 0) &#123;</span><br><span class=\"line\">          res.json(&#123;</span><br><span class=\"line\">            code: &apos;1&apos;,</span><br><span class=\"line\">            msg: &apos;用户名不存在&apos;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; else if (pw === result[0].user_password) &#123;</span><br><span class=\"line\">          // req.session.user=result[0].user_name;</span><br><span class=\"line\">          res.cookie(&quot;user&quot;, &#123;user: result[0].user_name,&#125;,&#123;expires: new Date(Date.now() + 36000000)&#125;);</span><br><span class=\"line\">          res.json(&#123;</span><br><span class=\"line\">            code: &apos;0&apos;,</span><br><span class=\"line\">            msg: &apos;登录成功&apos;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">              id: result[0].user_id,</span><br><span class=\"line\">              name:result[0].user_name</span><br><span class=\"line\">              // name: params.username,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          res.json(&#123;</span><br><span class=\"line\">            code: &apos;1&apos;,</span><br><span class=\"line\">            msg: &apos;用户名或密码错误&apos;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>完成这些操作后可以在server文件夹下的命令行运行 node indx 使用postman就可以访问<a href=\"http://localhost:3000/api/user/login\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/user/login</a> 这个接口了</p>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><p>使用了vue-cli脚手架，然后使用vue2.0全家桶配合element-UI完成整个前端页面的绘制。</p>\n<h3 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h3><p><a href=\"https://github.com/kola828/personal-backstage\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/personal-backstage</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>npm i</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>npm run dev</p>\n<h3 id=\"访问地址\"><a href=\"#访问地址\" class=\"headerlink\" title=\"访问地址\"></a>访问地址</h3><p><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>npm run build</p>\n<h3 id=\"页面截图\"><a href=\"#页面截图\" class=\"headerlink\" title=\"页面截图\"></a>页面截图</h3><p><img src=\"/img/artImg/login.jpg\" alt=\"image\"><br><img src=\"/img/artImg/login2.png\" alt=\"image\"><br><img src=\"/img/artImg/notelist.png\" alt=\"image\"><br><img src=\"/img/artImg/editnote.png\" alt=\"image\"><br><img src=\"/img/artImg/notepad.png\" alt=\"image\"><br><img src=\"/img/artImg/chart.png\" alt=\"image\"><br><img src=\"/img/artImg/pie.png\" alt=\"image\"><br><img src=\"/img/artImg/table.png\" alt=\"image\"><br><img src=\"/img/artImg/tree.png\" alt=\"image\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">│  .babelrc                 // ES6语法编译配置</span><br><span class=\"line\">│  .editorconfig            // 代码编写规格</span><br><span class=\"line\">│  .eslintignore</span><br><span class=\"line\">│  .eslintrc.js</span><br><span class=\"line\">│  .gitignore               // 忽略的文件     </span><br><span class=\"line\">│  .postcssrc.js</span><br><span class=\"line\">│  index.html               // 入口html文件</span><br><span class=\"line\">│  package-lock.json</span><br><span class=\"line\">│  package.json             // 项目及工具的依赖配置文件</span><br><span class=\"line\">│  README.md                // 说明</span><br><span class=\"line\">         </span><br><span class=\"line\">├─build                     //webpack配置文件</span><br><span class=\"line\">│      </span><br><span class=\"line\">├─config</span><br><span class=\"line\">│      dev.env.js</span><br><span class=\"line\">│      index.js</span><br><span class=\"line\">│      prod.env.js</span><br><span class=\"line\">│      test.env.js     </span><br><span class=\"line\">│                  </span><br><span class=\"line\">├─server                     //后端服务</span><br><span class=\"line\">│  │  db.js                  //数据库</span><br><span class=\"line\">│  │  index.js               //入口文件</span><br><span class=\"line\">│  │  sqlMap.js              //sql语句</span><br><span class=\"line\">│  │  </span><br><span class=\"line\">│  └─api                    //api</span><br><span class=\"line\">│          artApi.js </span><br><span class=\"line\">│          userApi.js</span><br><span class=\"line\">│          </span><br><span class=\"line\">├─src</span><br><span class=\"line\">│  │  App.vue               // 页面入口文件</span><br><span class=\"line\">│  │  main.js               // 程序入口文件，加载各种公共组件</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  ├─components             //页面</span><br><span class=\"line\">│  │  │  chart.vue          </span><br><span class=\"line\">│  │  │  editNote.vue</span><br><span class=\"line\">│  │  │  HelloWorld.vue</span><br><span class=\"line\">│  │  │  index.vue</span><br><span class=\"line\">│  │  │  login.vue</span><br><span class=\"line\">│  │  │  noteList.vue</span><br><span class=\"line\">│  │  │  notepad.vue</span><br><span class=\"line\">│  │  │  pie.vue</span><br><span class=\"line\">│  │  │  table.vue</span><br><span class=\"line\">│  │  │  tree.vue</span><br><span class=\"line\">│  │  │  </span><br><span class=\"line\">│  │  └─nav                 //公共导航组件</span><br><span class=\"line\">│  │          header-nav.vue</span><br><span class=\"line\">│  │          left-nav.vue</span><br><span class=\"line\">│  │          </span><br><span class=\"line\">│  ├─image</span><br><span class=\"line\">│  │      bg.jpg</span><br><span class=\"line\">│  │      chart.png</span><br><span class=\"line\">│  │      editnote.png</span><br><span class=\"line\">│  │      head.jpg</span><br><span class=\"line\">│  │      login.jpg</span><br><span class=\"line\">│  │      login2.png</span><br><span class=\"line\">│  │      notelist.png</span><br><span class=\"line\">│  │      notepad.png</span><br><span class=\"line\">│  │      pie.png</span><br><span class=\"line\">│  │      table.png</span><br><span class=\"line\">│  │      tree.png</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  ├─router</span><br><span class=\"line\">│  │      index.js</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  ├─store                   // vuex的状态管理</span><br><span class=\"line\">│  │      action.js</span><br><span class=\"line\">│  │      common.js          //公共js</span><br><span class=\"line\">│  │      getdata.js         //获取接口数据</span><br><span class=\"line\">│  │      index.js</span><br><span class=\"line\">│  │      mutations.js</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  └─style                     //样式</span><br><span class=\"line\">│      │  chart.styl</span><br><span class=\"line\">│      │  common.styl</span><br><span class=\"line\">│      │  editNote.styl</span><br><span class=\"line\">│      │  index.styl</span><br><span class=\"line\">│      │  login.styl</span><br><span class=\"line\">│      │  noteList.styl</span><br><span class=\"line\">│      │  notepad.styl</span><br><span class=\"line\">│      │  pie.styl</span><br><span class=\"line\">│      │  table.styl</span><br><span class=\"line\">│      │  tree.styl</span><br><span class=\"line\">│      │  </span><br><span class=\"line\">│      └─base</span><br><span class=\"line\">│              reset.styl</span><br><span class=\"line\">│</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这应该算是第一个前后端都是自己写的项目。<br>整个项目的前期构想是希望能够实现一个个人的工作平台，可以记录一些自己的工作笔记、心得，能够建立备忘录提醒自己还有那些事情需要做。以后可以和整个公司的考勤，薪资等等结合起来。想法很美好，但是自己能力有限目前只是实现了登录和对笔记的增删改。其中新增文章支持markdown语法。</p>\n<p>前端技术栈 vue2.0全家桶+Element-UI+axios+stylus</p>\n<p>后端技术栈 node.js+express+mysql<br>","more":"</p>\n<h3 id=\"后端接口部分\"><a href=\"#后端接口部分\" class=\"headerlink\" title=\"后端接口部分\"></a>后端接口部分</h3><p> 在项目的目录下面新建一个server的文件夹用来放后端相关的文件</p>\n<p> 新建inde.js 作为后端入口文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // node 后端服务器</span><br><span class=\"line\"></span><br><span class=\"line\">const userApi = require(&apos;./api/userApi&apos;);</span><br><span class=\"line\">const artApi=require(&apos;./api/artApi&apos;);</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">const session = require(&apos;express-session&apos;);</span><br><span class=\"line\">const app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended: false&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 后端api路由</span><br><span class=\"line\">app.use(&apos;/api/user&apos;, userApi);</span><br><span class=\"line\">app.use(&apos;/api/atr&apos;,artApi);</span><br><span class=\"line\"></span><br><span class=\"line\">// 监听端口</span><br><span class=\"line\">app.listen(3000);</span><br><span class=\"line\">console.log(&apos;success listen at port:3000......&apos;);</span><br></pre></td></tr></table></figure></p>\n<p> 新建 db.js 配置数据库相关<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module.exports = &#123;</span><br><span class=\"line\">  mysql: &#123;</span><br><span class=\"line\">    host     : &apos;localhost&apos;,</span><br><span class=\"line\">    user     : &apos;root&apos;,</span><br><span class=\"line\">    password : &apos;****&apos;,</span><br><span class=\"line\">    database : &apos;myblog&apos;,</span><br><span class=\"line\">    port: &apos;3306&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>新建sqlMap.js写sql语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sqlMap = &#123;</span><br><span class=\"line\">  // 用户</span><br><span class=\"line\">  user: &#123;</span><br><span class=\"line\">    add: &apos;insert into user(user_id, user_name, user_age) values (0, ?, ?)&apos;,</span><br><span class=\"line\">    login: &apos;SELECT * FROM user WHERE user_name= ? &apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 文章</span><br><span class=\"line\">  art: &#123;</span><br><span class=\"line\">    addArt: &apos;INSERT INTO artinfo(art_title,art_author,art_contant,art_edit_time) VALUES(?,?,?,?)&apos;,</span><br><span class=\"line\">    upDataArt: &apos;update artinfo set art_title=?,art_edit_time=?,art_contant=? where art_id=?&apos;,</span><br><span class=\"line\">    artList: &apos;SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author= ? ORDER BY art_edit_time DESC&apos;,</span><br><span class=\"line\">    oneArt: &apos;SELECT  art_id,art_title,art_author,art_contant FROM artinfo WHERE art_id=  ? &apos;,</span><br><span class=\"line\">    delArt: &apos;DELETE FROM artinfo WHERE art_id=? &apos;,</span><br><span class=\"line\">    pageList:&apos;SELECT art_id,art_title,art_author,art_edit_time FROM artinfo WHERE art_author=? ORDER BY art_edit_time DESC LIMIT ?,?&apos; ,</span><br><span class=\"line\">    allSum:&apos;SELECT COUNT(*) FROM artinfo WHERE art_author= ? &apos;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = sqlMap;</span><br></pre></td></tr></table></figure></p>\n<p>新建一个api文件夹，然后再在下面新建一个userApi.js用于写和用户相关的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// api/userApi.js ---- 测试用api示例</span><br><span class=\"line\">const models = require(&apos;../db&apos;);</span><br><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const router = express.Router();</span><br><span class=\"line\">const mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">const $sql = require(&apos;../sqlMap&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接数据库</span><br><span class=\"line\">const conn = mysql.createConnection(models.mysql);</span><br><span class=\"line\"></span><br><span class=\"line\">conn.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @method isLogined</span><br><span class=\"line\"> * @description 判断是否登录</span><br><span class=\"line\"> * @param req &#123;obj&#125;</span><br><span class=\"line\"> * @returns &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">function isLogined(req)&#123;</span><br><span class=\"line\">  if(req.cookies[&quot;user&quot;] !== null)&#123;</span><br><span class=\"line\">    let account = req.cookies[&quot;user&quot;];</span><br><span class=\"line\">    let user = account.user;</span><br><span class=\"line\">    if(user)&#123;</span><br><span class=\"line\">      console.log(req.cookies.user.user + &quot; had logined.&quot;);</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @method backJson</span><br><span class=\"line\"> * @description 请求成功后返回json</span><br><span class=\"line\"> * @param res &#123;obj&#125;请求结果</span><br><span class=\"line\"> * @param result &#123;obj&#125; 查询结果</span><br><span class=\"line\"> * @param cb 回调函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">const backJson = function (res, result, cb) &#123;</span><br><span class=\"line\">  if (typeof result === &apos;undefined&apos;) &#123;</span><br><span class=\"line\">    res.json(&#123;</span><br><span class=\"line\">      code: &apos;1&apos;,</span><br><span class=\"line\">      msg: &apos;操作失败&apos;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    cb()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @description 登录接口</span><br><span class=\"line\"> */</span><br><span class=\"line\">router.post(&apos;/login&apos;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  let sql = $sql.user.login;</span><br><span class=\"line\">  let params = req.body;</span><br><span class=\"line\">  let pw = params.password;</span><br><span class=\"line\">  conn.query(sql, [params.username], function (err, result) &#123;</span><br><span class=\"line\">    if (err) &#123;</span><br><span class=\"line\">      console.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (result) &#123;</span><br><span class=\"line\">      backJson(res, result, function () &#123;</span><br><span class=\"line\">        if (result.length === 0) &#123;</span><br><span class=\"line\">          res.json(&#123;</span><br><span class=\"line\">            code: &apos;1&apos;,</span><br><span class=\"line\">            msg: &apos;用户名不存在&apos;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; else if (pw === result[0].user_password) &#123;</span><br><span class=\"line\">          // req.session.user=result[0].user_name;</span><br><span class=\"line\">          res.cookie(&quot;user&quot;, &#123;user: result[0].user_name,&#125;,&#123;expires: new Date(Date.now() + 36000000)&#125;);</span><br><span class=\"line\">          res.json(&#123;</span><br><span class=\"line\">            code: &apos;0&apos;,</span><br><span class=\"line\">            msg: &apos;登录成功&apos;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">              id: result[0].user_id,</span><br><span class=\"line\">              name:result[0].user_name</span><br><span class=\"line\">              // name: params.username,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          res.json(&#123;</span><br><span class=\"line\">            code: &apos;1&apos;,</span><br><span class=\"line\">            msg: &apos;用户名或密码错误&apos;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>完成这些操作后可以在server文件夹下的命令行运行 node indx 使用postman就可以访问<a href=\"http://localhost:3000/api/user/login\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/user/login</a> 这个接口了</p>\n<h3 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h3><p>使用了vue-cli脚手架，然后使用vue2.0全家桶配合element-UI完成整个前端页面的绘制。</p>\n<h3 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h3><p><a href=\"https://github.com/kola828/personal-backstage\" target=\"_blank\" rel=\"noopener\">https://github.com/kola828/personal-backstage</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>npm i</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>npm run dev</p>\n<h3 id=\"访问地址\"><a href=\"#访问地址\" class=\"headerlink\" title=\"访问地址\"></a>访问地址</h3><p><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>npm run build</p>\n<h3 id=\"页面截图\"><a href=\"#页面截图\" class=\"headerlink\" title=\"页面截图\"></a>页面截图</h3><p><img src=\"/img/artImg/login.jpg\" alt=\"image\"><br><img src=\"/img/artImg/login2.png\" alt=\"image\"><br><img src=\"/img/artImg/notelist.png\" alt=\"image\"><br><img src=\"/img/artImg/editnote.png\" alt=\"image\"><br><img src=\"/img/artImg/notepad.png\" alt=\"image\"><br><img src=\"/img/artImg/chart.png\" alt=\"image\"><br><img src=\"/img/artImg/pie.png\" alt=\"image\"><br><img src=\"/img/artImg/table.png\" alt=\"image\"><br><img src=\"/img/artImg/tree.png\" alt=\"image\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">│  .babelrc                 // ES6语法编译配置</span><br><span class=\"line\">│  .editorconfig            // 代码编写规格</span><br><span class=\"line\">│  .eslintignore</span><br><span class=\"line\">│  .eslintrc.js</span><br><span class=\"line\">│  .gitignore               // 忽略的文件     </span><br><span class=\"line\">│  .postcssrc.js</span><br><span class=\"line\">│  index.html               // 入口html文件</span><br><span class=\"line\">│  package-lock.json</span><br><span class=\"line\">│  package.json             // 项目及工具的依赖配置文件</span><br><span class=\"line\">│  README.md                // 说明</span><br><span class=\"line\">         </span><br><span class=\"line\">├─build                     //webpack配置文件</span><br><span class=\"line\">│      </span><br><span class=\"line\">├─config</span><br><span class=\"line\">│      dev.env.js</span><br><span class=\"line\">│      index.js</span><br><span class=\"line\">│      prod.env.js</span><br><span class=\"line\">│      test.env.js     </span><br><span class=\"line\">│                  </span><br><span class=\"line\">├─server                     //后端服务</span><br><span class=\"line\">│  │  db.js                  //数据库</span><br><span class=\"line\">│  │  index.js               //入口文件</span><br><span class=\"line\">│  │  sqlMap.js              //sql语句</span><br><span class=\"line\">│  │  </span><br><span class=\"line\">│  └─api                    //api</span><br><span class=\"line\">│          artApi.js </span><br><span class=\"line\">│          userApi.js</span><br><span class=\"line\">│          </span><br><span class=\"line\">├─src</span><br><span class=\"line\">│  │  App.vue               // 页面入口文件</span><br><span class=\"line\">│  │  main.js               // 程序入口文件，加载各种公共组件</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  ├─components             //页面</span><br><span class=\"line\">│  │  │  chart.vue          </span><br><span class=\"line\">│  │  │  editNote.vue</span><br><span class=\"line\">│  │  │  HelloWorld.vue</span><br><span class=\"line\">│  │  │  index.vue</span><br><span class=\"line\">│  │  │  login.vue</span><br><span class=\"line\">│  │  │  noteList.vue</span><br><span class=\"line\">│  │  │  notepad.vue</span><br><span class=\"line\">│  │  │  pie.vue</span><br><span class=\"line\">│  │  │  table.vue</span><br><span class=\"line\">│  │  │  tree.vue</span><br><span class=\"line\">│  │  │  </span><br><span class=\"line\">│  │  └─nav                 //公共导航组件</span><br><span class=\"line\">│  │          header-nav.vue</span><br><span class=\"line\">│  │          left-nav.vue</span><br><span class=\"line\">│  │          </span><br><span class=\"line\">│  ├─image</span><br><span class=\"line\">│  │      bg.jpg</span><br><span class=\"line\">│  │      chart.png</span><br><span class=\"line\">│  │      editnote.png</span><br><span class=\"line\">│  │      head.jpg</span><br><span class=\"line\">│  │      login.jpg</span><br><span class=\"line\">│  │      login2.png</span><br><span class=\"line\">│  │      notelist.png</span><br><span class=\"line\">│  │      notepad.png</span><br><span class=\"line\">│  │      pie.png</span><br><span class=\"line\">│  │      table.png</span><br><span class=\"line\">│  │      tree.png</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  ├─router</span><br><span class=\"line\">│  │      index.js</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  ├─store                   // vuex的状态管理</span><br><span class=\"line\">│  │      action.js</span><br><span class=\"line\">│  │      common.js          //公共js</span><br><span class=\"line\">│  │      getdata.js         //获取接口数据</span><br><span class=\"line\">│  │      index.js</span><br><span class=\"line\">│  │      mutations.js</span><br><span class=\"line\">│  │      </span><br><span class=\"line\">│  └─style                     //样式</span><br><span class=\"line\">│      │  chart.styl</span><br><span class=\"line\">│      │  common.styl</span><br><span class=\"line\">│      │  editNote.styl</span><br><span class=\"line\">│      │  index.styl</span><br><span class=\"line\">│      │  login.styl</span><br><span class=\"line\">│      │  noteList.styl</span><br><span class=\"line\">│      │  notepad.styl</span><br><span class=\"line\">│      │  pie.styl</span><br><span class=\"line\">│      │  table.styl</span><br><span class=\"line\">│      │  tree.styl</span><br><span class=\"line\">│      │  </span><br><span class=\"line\">│      └─base</span><br><span class=\"line\">│              reset.styl</span><br><span class=\"line\">│</span><br></pre></td></tr></table></figure>"},{"title":"基于react的分页组件","date":"2018-03-30T02:33:15.000Z","_content":"\n好久没有更新了，前段日子忙着找工作\n现在确定了\n从苏州到杭州 换了一个城市 换了一家公司 换了一个环境\n新的公司用的很多东西之前都没有接触过\n还需要很努力很努力 继续加油吧\n<!--more-->\n之前没有使用说react进行开发过 但是新的公司使用react 所以必须会了\n这是为了熟悉react 所写的一个分页组件\n\n```\nimport React from 'react'\n\nclass Pager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      goPage: null,\n      pageTotal: parseInt(this.props.total / this.props.size)\n\n    }\n  }\n\n  render() {\n\n    var cur = this.props.cur,\n      total = this.props.total,\n      size = this.props.size,\n      pageTotal = parseInt(total / size),\n      level = 2;\n    var layout = this.props.layout.split(',');\n    var isTotal = layout.indexOf('total') === -1 ? false : true;\n    var isPrev = layout.indexOf('prev') === -1 ? false : true;\n    var isNext = layout.indexOf('next') === -1 ? false : true;\n    var isPage = layout.indexOf('page') === -1 ? false : true;\n\n\n    // 当没有total时，返回 空\n    if (!pageTotal) return <div className=\"Pager\">&nbsp;</div>;\n\n    var list = [];\n    // 上一页按钮\n    isPrev ? list.push(<a onClick={this.prevClick.bind(this)} key={0}> &lt; </a>) : '';\n    if (pageTotal < 7) {\n      // 当总条数小于层级时 全部列出来\n      for (let i = 1; i <= pageTotal; i++) {\n        list.push(<a key={i} onClick={this.click.bind(this, i)} className={i === cur ? 'active' : ''}>{i}</a>)\n      }\n    } else {\n      // 显示...\n      if (cur - level >= level) {\n        list.push(<a key={1} onClick={this.click.bind(this, 1)} className={1 === cur ? 'active' : ''}>{1}</a>);\n        if (cur - level > level) { // 处理当前页为4时出现\"...\"的问题\n          list.push(<a key={-1}>...</a>);\n        }\n      }\n      // 显示页码\n      for (let i = cur - level; i <= cur + level; i++) {\n        if (i < pageTotal && i > 0) {\n          list.push(<a key={i} onClick={this.click.bind(this, i)} className={i === cur ? 'active' : ''}>{i}</a>)\n        }\n      }\n      // 显示...\n      if (pageTotal >= cur + level * 2) {\n        list.push(<a key={-2}>...</a>);\n      }\n      //最后一页\n      list.push(<a key={pageTotal} onClick={this.click.bind(this, pageTotal)}\n                   className={pageTotal === cur ? 'active' : ''}>{pageTotal}</a>)\n    }\n    // 下一页按钮\n    isNext ? list.push(<a onClick={this.nextClick.bind(this)} key={pageTotal + 1}> &gt; </a>) : '';\n    return (\n      <div className=\"Pager\">\n        {isTotal ? <span className='total'>共{total}条</span> : ''}\n        {list}\n        {\n          isPage ? <div className=\"pageGo\"><span>前往</span><input type='text' onChange={this._inputChange.bind(this)}/><span>页</span>\n            <button onClick={this.goPage.bind(this)}>go</button>\n          </div> : ''\n        }\n      </div>\n    )\n  }\n\n  /**\n   * 点击切换当前页\n   * @param page\n   */\n  click(page) {\n    if (page > 0)\n      this.props.changePage(page);\n  }\n\n  /**\n   *  跳转页面input输入框onchang事件\n   * @param e\n   * @private\n   */\n  _inputChange(e) {\n    console.log(e.target.value);\n    var val = e.target.value;\n    e.target.value = val.replace(/[^\\d]/g, '');\n    this.setState({\n      goPage: e.target.value\n    })\n  }\n\n  /**\n   * 跳转到input输入页\n   */\n  goPage() {\n    // console.log(this.state.goPage);\n    if (this.state.goPage > 0 && this.state.goPage <= this.state.pageTotal) {\n      this.props.changePage(parseInt(this.state.goPage));\n    }\n  }\n\n  /**\n   * 向前一页\n   */\n  prevClick() {\n    if (this.props.cur > 1) {\n      this.props.changePage(this.props.cur - 1);\n    }\n  }\n\n  /**\n   * 向后一页\n   */\n  nextClick() {\n    if (this.props.cur < this.state.pageTotal) {\n      console.log(\"next\");\n      this.props.changePage(this.props.cur + 1);\n    }\n  }\n}\n\nexport default Pager;\n\n```\n\n调用\n```\nimport React, { Component } from 'react'\nimport CommentInput from './CommentInput'\nimport CommentList from './CommentList'\nimport Pager from './Pager'\n\nclass CommentApp extends Component {\n  constructor(){\n    super();\n    this.state = {\n      cur: 1,   // 当前页\n      total: 70,    // 一共有多少条\n      pageSize:10,  // 每页多少条\n\n    }\n  }\n  render() {\n    return (\n      <div className='content'>\n        <Pager cur={this.state.cur}\n               total={this.state.total}\n               size={this.state.pageSize}\n               layout=\"total,prev,next,page\"\n               changePage={this.changePage.bind(this)} />\n      </div>\n    )\n  }\n\n  changePage (page){\n    this.setState({\n      cur:page\n    });\n    console.log(this.state)\n  }\n}\n\nexport default CommentApp\n\n```\n\n新的开始还需加油哇~","source":"_posts/20180330.md","raw":"---\ntitle: 基于react的分页组件\ndate: 2018-03-30 10:33:15\ntags:\n- react\n- 组件\n---\n\n好久没有更新了，前段日子忙着找工作\n现在确定了\n从苏州到杭州 换了一个城市 换了一家公司 换了一个环境\n新的公司用的很多东西之前都没有接触过\n还需要很努力很努力 继续加油吧\n<!--more-->\n之前没有使用说react进行开发过 但是新的公司使用react 所以必须会了\n这是为了熟悉react 所写的一个分页组件\n\n```\nimport React from 'react'\n\nclass Pager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      goPage: null,\n      pageTotal: parseInt(this.props.total / this.props.size)\n\n    }\n  }\n\n  render() {\n\n    var cur = this.props.cur,\n      total = this.props.total,\n      size = this.props.size,\n      pageTotal = parseInt(total / size),\n      level = 2;\n    var layout = this.props.layout.split(',');\n    var isTotal = layout.indexOf('total') === -1 ? false : true;\n    var isPrev = layout.indexOf('prev') === -1 ? false : true;\n    var isNext = layout.indexOf('next') === -1 ? false : true;\n    var isPage = layout.indexOf('page') === -1 ? false : true;\n\n\n    // 当没有total时，返回 空\n    if (!pageTotal) return <div className=\"Pager\">&nbsp;</div>;\n\n    var list = [];\n    // 上一页按钮\n    isPrev ? list.push(<a onClick={this.prevClick.bind(this)} key={0}> &lt; </a>) : '';\n    if (pageTotal < 7) {\n      // 当总条数小于层级时 全部列出来\n      for (let i = 1; i <= pageTotal; i++) {\n        list.push(<a key={i} onClick={this.click.bind(this, i)} className={i === cur ? 'active' : ''}>{i}</a>)\n      }\n    } else {\n      // 显示...\n      if (cur - level >= level) {\n        list.push(<a key={1} onClick={this.click.bind(this, 1)} className={1 === cur ? 'active' : ''}>{1}</a>);\n        if (cur - level > level) { // 处理当前页为4时出现\"...\"的问题\n          list.push(<a key={-1}>...</a>);\n        }\n      }\n      // 显示页码\n      for (let i = cur - level; i <= cur + level; i++) {\n        if (i < pageTotal && i > 0) {\n          list.push(<a key={i} onClick={this.click.bind(this, i)} className={i === cur ? 'active' : ''}>{i}</a>)\n        }\n      }\n      // 显示...\n      if (pageTotal >= cur + level * 2) {\n        list.push(<a key={-2}>...</a>);\n      }\n      //最后一页\n      list.push(<a key={pageTotal} onClick={this.click.bind(this, pageTotal)}\n                   className={pageTotal === cur ? 'active' : ''}>{pageTotal}</a>)\n    }\n    // 下一页按钮\n    isNext ? list.push(<a onClick={this.nextClick.bind(this)} key={pageTotal + 1}> &gt; </a>) : '';\n    return (\n      <div className=\"Pager\">\n        {isTotal ? <span className='total'>共{total}条</span> : ''}\n        {list}\n        {\n          isPage ? <div className=\"pageGo\"><span>前往</span><input type='text' onChange={this._inputChange.bind(this)}/><span>页</span>\n            <button onClick={this.goPage.bind(this)}>go</button>\n          </div> : ''\n        }\n      </div>\n    )\n  }\n\n  /**\n   * 点击切换当前页\n   * @param page\n   */\n  click(page) {\n    if (page > 0)\n      this.props.changePage(page);\n  }\n\n  /**\n   *  跳转页面input输入框onchang事件\n   * @param e\n   * @private\n   */\n  _inputChange(e) {\n    console.log(e.target.value);\n    var val = e.target.value;\n    e.target.value = val.replace(/[^\\d]/g, '');\n    this.setState({\n      goPage: e.target.value\n    })\n  }\n\n  /**\n   * 跳转到input输入页\n   */\n  goPage() {\n    // console.log(this.state.goPage);\n    if (this.state.goPage > 0 && this.state.goPage <= this.state.pageTotal) {\n      this.props.changePage(parseInt(this.state.goPage));\n    }\n  }\n\n  /**\n   * 向前一页\n   */\n  prevClick() {\n    if (this.props.cur > 1) {\n      this.props.changePage(this.props.cur - 1);\n    }\n  }\n\n  /**\n   * 向后一页\n   */\n  nextClick() {\n    if (this.props.cur < this.state.pageTotal) {\n      console.log(\"next\");\n      this.props.changePage(this.props.cur + 1);\n    }\n  }\n}\n\nexport default Pager;\n\n```\n\n调用\n```\nimport React, { Component } from 'react'\nimport CommentInput from './CommentInput'\nimport CommentList from './CommentList'\nimport Pager from './Pager'\n\nclass CommentApp extends Component {\n  constructor(){\n    super();\n    this.state = {\n      cur: 1,   // 当前页\n      total: 70,    // 一共有多少条\n      pageSize:10,  // 每页多少条\n\n    }\n  }\n  render() {\n    return (\n      <div className='content'>\n        <Pager cur={this.state.cur}\n               total={this.state.total}\n               size={this.state.pageSize}\n               layout=\"total,prev,next,page\"\n               changePage={this.changePage.bind(this)} />\n      </div>\n    )\n  }\n\n  changePage (page){\n    this.setState({\n      cur:page\n    });\n    console.log(this.state)\n  }\n}\n\nexport default CommentApp\n\n```\n\n新的开始还需加油哇~","slug":"20180330","published":1,"updated":"2018-03-30T03:23:04.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzel000dtm1f7bzbe5qd","content":"<p>好久没有更新了，前段日子忙着找工作<br>现在确定了<br>从苏州到杭州 换了一个城市 换了一家公司 换了一个环境<br>新的公司用的很多东西之前都没有接触过<br>还需要很努力很努力 继续加油吧<br><a id=\"more\"></a><br>之前没有使用说react进行开发过 但是新的公司使用react 所以必须会了<br>这是为了熟悉react 所写的一个分页组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class Pager extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      goPage: null,</span><br><span class=\"line\">      pageTotal: parseInt(this.props.total / this.props.size)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var cur = this.props.cur,</span><br><span class=\"line\">      total = this.props.total,</span><br><span class=\"line\">      size = this.props.size,</span><br><span class=\"line\">      pageTotal = parseInt(total / size),</span><br><span class=\"line\">      level = 2;</span><br><span class=\"line\">    var layout = this.props.layout.split(&apos;,&apos;);</span><br><span class=\"line\">    var isTotal = layout.indexOf(&apos;total&apos;) === -1 ? false : true;</span><br><span class=\"line\">    var isPrev = layout.indexOf(&apos;prev&apos;) === -1 ? false : true;</span><br><span class=\"line\">    var isNext = layout.indexOf(&apos;next&apos;) === -1 ? false : true;</span><br><span class=\"line\">    var isPage = layout.indexOf(&apos;page&apos;) === -1 ? false : true;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 当没有total时，返回 空</span><br><span class=\"line\">    if (!pageTotal) return &lt;div className=&quot;Pager&quot;&gt;&amp;nbsp;&lt;/div&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var list = [];</span><br><span class=\"line\">    // 上一页按钮</span><br><span class=\"line\">    isPrev ? list.push(&lt;a onClick=&#123;this.prevClick.bind(this)&#125; key=&#123;0&#125;&gt; &amp;lt; &lt;/a&gt;) : &apos;&apos;;</span><br><span class=\"line\">    if (pageTotal &lt; 7) &#123;</span><br><span class=\"line\">      // 当总条数小于层级时 全部列出来</span><br><span class=\"line\">      for (let i = 1; i &lt;= pageTotal; i++) &#123;</span><br><span class=\"line\">        list.push(&lt;a key=&#123;i&#125; onClick=&#123;this.click.bind(this, i)&#125; className=&#123;i === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;i&#125;&lt;/a&gt;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 显示...</span><br><span class=\"line\">      if (cur - level &gt;= level) &#123;</span><br><span class=\"line\">        list.push(&lt;a key=&#123;1&#125; onClick=&#123;this.click.bind(this, 1)&#125; className=&#123;1 === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;1&#125;&lt;/a&gt;);</span><br><span class=\"line\">        if (cur - level &gt; level) &#123; // 处理当前页为4时出现&quot;...&quot;的问题</span><br><span class=\"line\">          list.push(&lt;a key=&#123;-1&#125;&gt;...&lt;/a&gt;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 显示页码</span><br><span class=\"line\">      for (let i = cur - level; i &lt;= cur + level; i++) &#123;</span><br><span class=\"line\">        if (i &lt; pageTotal &amp;&amp; i &gt; 0) &#123;</span><br><span class=\"line\">          list.push(&lt;a key=&#123;i&#125; onClick=&#123;this.click.bind(this, i)&#125; className=&#123;i === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;i&#125;&lt;/a&gt;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 显示...</span><br><span class=\"line\">      if (pageTotal &gt;= cur + level * 2) &#123;</span><br><span class=\"line\">        list.push(&lt;a key=&#123;-2&#125;&gt;...&lt;/a&gt;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //最后一页</span><br><span class=\"line\">      list.push(&lt;a key=&#123;pageTotal&#125; onClick=&#123;this.click.bind(this, pageTotal)&#125;</span><br><span class=\"line\">                   className=&#123;pageTotal === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;pageTotal&#125;&lt;/a&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 下一页按钮</span><br><span class=\"line\">    isNext ? list.push(&lt;a onClick=&#123;this.nextClick.bind(this)&#125; key=&#123;pageTotal + 1&#125;&gt; &amp;gt; &lt;/a&gt;) : &apos;&apos;;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;Pager&quot;&gt;</span><br><span class=\"line\">        &#123;isTotal ? &lt;span className=&apos;total&apos;&gt;共&#123;total&#125;条&lt;/span&gt; : &apos;&apos;&#125;</span><br><span class=\"line\">        &#123;list&#125;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          isPage ? &lt;div className=&quot;pageGo&quot;&gt;&lt;span&gt;前往&lt;/span&gt;&lt;input type=&apos;text&apos; onChange=&#123;this._inputChange.bind(this)&#125;/&gt;&lt;span&gt;页&lt;/span&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.goPage.bind(this)&#125;&gt;go&lt;/button&gt;</span><br><span class=\"line\">          &lt;/div&gt; : &apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 点击切换当前页</span><br><span class=\"line\">   * @param page</span><br><span class=\"line\">   */</span><br><span class=\"line\">  click(page) &#123;</span><br><span class=\"line\">    if (page &gt; 0)</span><br><span class=\"line\">      this.props.changePage(page);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   *  跳转页面input输入框onchang事件</span><br><span class=\"line\">   * @param e</span><br><span class=\"line\">   * @private</span><br><span class=\"line\">   */</span><br><span class=\"line\">  _inputChange(e) &#123;</span><br><span class=\"line\">    console.log(e.target.value);</span><br><span class=\"line\">    var val = e.target.value;</span><br><span class=\"line\">    e.target.value = val.replace(/[^\\d]/g, &apos;&apos;);</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      goPage: e.target.value</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 跳转到input输入页</span><br><span class=\"line\">   */</span><br><span class=\"line\">  goPage() &#123;</span><br><span class=\"line\">    // console.log(this.state.goPage);</span><br><span class=\"line\">    if (this.state.goPage &gt; 0 &amp;&amp; this.state.goPage &lt;= this.state.pageTotal) &#123;</span><br><span class=\"line\">      this.props.changePage(parseInt(this.state.goPage));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 向前一页</span><br><span class=\"line\">   */</span><br><span class=\"line\">  prevClick() &#123;</span><br><span class=\"line\">    if (this.props.cur &gt; 1) &#123;</span><br><span class=\"line\">      this.props.changePage(this.props.cur - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 向后一页</span><br><span class=\"line\">   */</span><br><span class=\"line\">  nextClick() &#123;</span><br><span class=\"line\">    if (this.props.cur &lt; this.state.pageTotal) &#123;</span><br><span class=\"line\">      console.log(&quot;next&quot;);</span><br><span class=\"line\">      this.props.changePage(this.props.cur + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Pager;</span><br></pre></td></tr></table></figure>\n<p>调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class=\"line\">import CommentInput from &apos;./CommentInput&apos;</span><br><span class=\"line\">import CommentList from &apos;./CommentList&apos;</span><br><span class=\"line\">import Pager from &apos;./Pager&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class CommentApp extends Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      cur: 1,   // 当前页</span><br><span class=\"line\">      total: 70,    // 一共有多少条</span><br><span class=\"line\">      pageSize:10,  // 每页多少条</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&apos;content&apos;&gt;</span><br><span class=\"line\">        &lt;Pager cur=&#123;this.state.cur&#125;</span><br><span class=\"line\">               total=&#123;this.state.total&#125;</span><br><span class=\"line\">               size=&#123;this.state.pageSize&#125;</span><br><span class=\"line\">               layout=&quot;total,prev,next,page&quot;</span><br><span class=\"line\">               changePage=&#123;this.changePage.bind(this)&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  changePage (page)&#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      cur:page</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(this.state)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default CommentApp</span><br></pre></td></tr></table></figure></p>\n<p>新的开始还需加油哇~</p>\n","site":{"data":{}},"excerpt":"<p>好久没有更新了，前段日子忙着找工作<br>现在确定了<br>从苏州到杭州 换了一个城市 换了一家公司 换了一个环境<br>新的公司用的很多东西之前都没有接触过<br>还需要很努力很努力 继续加油吧<br>","more":"<br>之前没有使用说react进行开发过 但是新的公司使用react 所以必须会了<br>这是为了熟悉react 所写的一个分页组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class Pager extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      goPage: null,</span><br><span class=\"line\">      pageTotal: parseInt(this.props.total / this.props.size)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var cur = this.props.cur,</span><br><span class=\"line\">      total = this.props.total,</span><br><span class=\"line\">      size = this.props.size,</span><br><span class=\"line\">      pageTotal = parseInt(total / size),</span><br><span class=\"line\">      level = 2;</span><br><span class=\"line\">    var layout = this.props.layout.split(&apos;,&apos;);</span><br><span class=\"line\">    var isTotal = layout.indexOf(&apos;total&apos;) === -1 ? false : true;</span><br><span class=\"line\">    var isPrev = layout.indexOf(&apos;prev&apos;) === -1 ? false : true;</span><br><span class=\"line\">    var isNext = layout.indexOf(&apos;next&apos;) === -1 ? false : true;</span><br><span class=\"line\">    var isPage = layout.indexOf(&apos;page&apos;) === -1 ? false : true;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 当没有total时，返回 空</span><br><span class=\"line\">    if (!pageTotal) return &lt;div className=&quot;Pager&quot;&gt;&amp;nbsp;&lt;/div&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var list = [];</span><br><span class=\"line\">    // 上一页按钮</span><br><span class=\"line\">    isPrev ? list.push(&lt;a onClick=&#123;this.prevClick.bind(this)&#125; key=&#123;0&#125;&gt; &amp;lt; &lt;/a&gt;) : &apos;&apos;;</span><br><span class=\"line\">    if (pageTotal &lt; 7) &#123;</span><br><span class=\"line\">      // 当总条数小于层级时 全部列出来</span><br><span class=\"line\">      for (let i = 1; i &lt;= pageTotal; i++) &#123;</span><br><span class=\"line\">        list.push(&lt;a key=&#123;i&#125; onClick=&#123;this.click.bind(this, i)&#125; className=&#123;i === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;i&#125;&lt;/a&gt;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 显示...</span><br><span class=\"line\">      if (cur - level &gt;= level) &#123;</span><br><span class=\"line\">        list.push(&lt;a key=&#123;1&#125; onClick=&#123;this.click.bind(this, 1)&#125; className=&#123;1 === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;1&#125;&lt;/a&gt;);</span><br><span class=\"line\">        if (cur - level &gt; level) &#123; // 处理当前页为4时出现&quot;...&quot;的问题</span><br><span class=\"line\">          list.push(&lt;a key=&#123;-1&#125;&gt;...&lt;/a&gt;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 显示页码</span><br><span class=\"line\">      for (let i = cur - level; i &lt;= cur + level; i++) &#123;</span><br><span class=\"line\">        if (i &lt; pageTotal &amp;&amp; i &gt; 0) &#123;</span><br><span class=\"line\">          list.push(&lt;a key=&#123;i&#125; onClick=&#123;this.click.bind(this, i)&#125; className=&#123;i === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;i&#125;&lt;/a&gt;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 显示...</span><br><span class=\"line\">      if (pageTotal &gt;= cur + level * 2) &#123;</span><br><span class=\"line\">        list.push(&lt;a key=&#123;-2&#125;&gt;...&lt;/a&gt;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //最后一页</span><br><span class=\"line\">      list.push(&lt;a key=&#123;pageTotal&#125; onClick=&#123;this.click.bind(this, pageTotal)&#125;</span><br><span class=\"line\">                   className=&#123;pageTotal === cur ? &apos;active&apos; : &apos;&apos;&#125;&gt;&#123;pageTotal&#125;&lt;/a&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 下一页按钮</span><br><span class=\"line\">    isNext ? list.push(&lt;a onClick=&#123;this.nextClick.bind(this)&#125; key=&#123;pageTotal + 1&#125;&gt; &amp;gt; &lt;/a&gt;) : &apos;&apos;;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;Pager&quot;&gt;</span><br><span class=\"line\">        &#123;isTotal ? &lt;span className=&apos;total&apos;&gt;共&#123;total&#125;条&lt;/span&gt; : &apos;&apos;&#125;</span><br><span class=\"line\">        &#123;list&#125;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          isPage ? &lt;div className=&quot;pageGo&quot;&gt;&lt;span&gt;前往&lt;/span&gt;&lt;input type=&apos;text&apos; onChange=&#123;this._inputChange.bind(this)&#125;/&gt;&lt;span&gt;页&lt;/span&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.goPage.bind(this)&#125;&gt;go&lt;/button&gt;</span><br><span class=\"line\">          &lt;/div&gt; : &apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 点击切换当前页</span><br><span class=\"line\">   * @param page</span><br><span class=\"line\">   */</span><br><span class=\"line\">  click(page) &#123;</span><br><span class=\"line\">    if (page &gt; 0)</span><br><span class=\"line\">      this.props.changePage(page);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   *  跳转页面input输入框onchang事件</span><br><span class=\"line\">   * @param e</span><br><span class=\"line\">   * @private</span><br><span class=\"line\">   */</span><br><span class=\"line\">  _inputChange(e) &#123;</span><br><span class=\"line\">    console.log(e.target.value);</span><br><span class=\"line\">    var val = e.target.value;</span><br><span class=\"line\">    e.target.value = val.replace(/[^\\d]/g, &apos;&apos;);</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      goPage: e.target.value</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 跳转到input输入页</span><br><span class=\"line\">   */</span><br><span class=\"line\">  goPage() &#123;</span><br><span class=\"line\">    // console.log(this.state.goPage);</span><br><span class=\"line\">    if (this.state.goPage &gt; 0 &amp;&amp; this.state.goPage &lt;= this.state.pageTotal) &#123;</span><br><span class=\"line\">      this.props.changePage(parseInt(this.state.goPage));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 向前一页</span><br><span class=\"line\">   */</span><br><span class=\"line\">  prevClick() &#123;</span><br><span class=\"line\">    if (this.props.cur &gt; 1) &#123;</span><br><span class=\"line\">      this.props.changePage(this.props.cur - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * 向后一页</span><br><span class=\"line\">   */</span><br><span class=\"line\">  nextClick() &#123;</span><br><span class=\"line\">    if (this.props.cur &lt; this.state.pageTotal) &#123;</span><br><span class=\"line\">      console.log(&quot;next&quot;);</span><br><span class=\"line\">      this.props.changePage(this.props.cur + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Pager;</span><br></pre></td></tr></table></figure>\n<p>调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class=\"line\">import CommentInput from &apos;./CommentInput&apos;</span><br><span class=\"line\">import CommentList from &apos;./CommentList&apos;</span><br><span class=\"line\">import Pager from &apos;./Pager&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class CommentApp extends Component &#123;</span><br><span class=\"line\">  constructor()&#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      cur: 1,   // 当前页</span><br><span class=\"line\">      total: 70,    // 一共有多少条</span><br><span class=\"line\">      pageSize:10,  // 每页多少条</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&apos;content&apos;&gt;</span><br><span class=\"line\">        &lt;Pager cur=&#123;this.state.cur&#125;</span><br><span class=\"line\">               total=&#123;this.state.total&#125;</span><br><span class=\"line\">               size=&#123;this.state.pageSize&#125;</span><br><span class=\"line\">               layout=&quot;total,prev,next,page&quot;</span><br><span class=\"line\">               changePage=&#123;this.changePage.bind(this)&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  changePage (page)&#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      cur:page</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(this.state)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default CommentApp</span><br></pre></td></tr></table></figure></p>\n<p>新的开始还需加油哇~</p>"},{"title":"杂记","date":"2018-03-30T02:53:45.000Z","toc":true,"_content":"\n  最近可以说是非常丧了。\n  每到新的环境自己都需要适应很久很久 可以说是非常的不行了\n  希望可以变得很厉害\n  要加倍努力哇","source":"_posts/20180330_p.md","raw":"---\ntitle: 杂记\ndate: 2018-03-30 10:53:45\ntoc: true\ntags:\n- 随笔\n- 杂记\n---\n\n  最近可以说是非常丧了。\n  每到新的环境自己都需要适应很久很久 可以说是非常的不行了\n  希望可以变得很厉害\n  要加倍努力哇","slug":"20180330_p","published":1,"updated":"2018-03-30T03:41:05.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfxpzen000etm1fwt0i3e4o","content":"<p>  最近可以说是非常丧了。<br>  每到新的环境自己都需要适应很久很久 可以说是非常的不行了<br>  希望可以变得很厉害<br>  要加倍努力哇</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  最近可以说是非常丧了。<br>  每到新的环境自己都需要适应很久很久 可以说是非常的不行了<br>  希望可以变得很厉害<br>  要加倍努力哇</p>\n"},{"title":"git常用命令总结","date":"2018-04-15T02:48:31.000Z","_content":"\n讲实话之前都很少直接敲git的命令，都直接使用工具\nem....(说点啥。。。)\n下面是自己来到新公司使用比较多的git命令的总结\n\n<!--more-->\n\n### 基本操作\n\n- `git init` 初始化git仓库\n- `git add` 添加\n  - `git add . ` 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n  - `git add -A `提交所有变化\n- `git st (status)` 查看状态\n- `git commit -m '提交说明'` 提交\n- `git clone <url> `拷贝一个 Git 仓库到本地\n- `git diff` 比较暂存区和工作区的差异\n  - `git diff --cached` 比较暂存区和历史区的差异\n- `git sl -<num>` 查看log（可指定条数）\n    - `git sl -<num> --graph <branch> <branch>` 查看提交记录，显示分支图形\n- `git sp -<num>` 查看提交（可查看提交时间）\n- `git remote -v` 查看远程库信息\n- `git remote add origin git@server-name:path/repo-name.git` 关联远程库\n\n### 下拉与提交\n\n- `git push` 提交\n  - `git push origin <branch>` 提交代码到远程分支\n  - `git push --force` 强制提交覆盖到远程\n- `git pull` 下拉\n- `git fetch`\n- `git reset --hard origin/master` 用远程强制覆盖本地（强制下拉）\n\n### 分支管理\n\n- `git checkout <branch>` 切换分支\n- `git checkout -b <branch>` 创建并切换到新的分支.\n- `git branch -d <branch> `删除分支\n    - `git push --delete origin <branch>` 删除远程分支\n- `git branch -a `列出所有分支\n- `git merge <branch>` 合并分支\n- `git remote prune origin` 与远程同步，清除没有追踪的分支\n- `git branch -m <oldname> <newname>` 修改分支名称\n\n### 版本管理\n\n- `git checkout <filename> `HEAD中的最新内容替换掉你的工作目录中的文件\n- `git reset --hard HEAD/commit_id`  回滚到历史版本\n  - `git reset --hard HEAD^` 回滚到上一版本（上上个版本为`HEAD^^` ）\n- `git reflog` 可以查看每一次操作\n- `git reset HEAD <path>` 回到add操作前\n\n### 关于rebase\n\n- `git rebase -i <branch>` 压榨提交(pick修改成squash)\n  - rebase完后要强制提交\n  - rebase时有冲突建议 `git rebase --abort`\n- `git rebase --onto (种植的目标分支) 不包含的起点 包含的终点`\n\n### 其他\n\n- `git commit --amend --reset-author`  修改提交and作者（同时会修改时间）\n- `git commit --amend --date <tgitime> ` 修改时间\n- `git commit --amend` 改写上一次提交（需强制提交到远程）\n- `git stash` 将工作区修改放入藏匿区\n- `git stash list` 查看藏匿区列表\n- `git stash pop` 将藏匿区的内容拿出来\n- `git mv <oldfilename> <newfilename>` 重命名文件名\n\n\n  ### 胡言乱语\n\n  真是是非常喜欢`git reflog`这个命令了  对于我这种经常rebase错的人来说 简直是一颗救命的后悔药。。。\n\n\n\n\n\n\n","source":"_posts/20180415.md","raw":"---\ntitle: git常用命令总结\ndate: 2018-04-15 10:48:31\ntags:\n- git\n---\n\n讲实话之前都很少直接敲git的命令，都直接使用工具\nem....(说点啥。。。)\n下面是自己来到新公司使用比较多的git命令的总结\n\n<!--more-->\n\n### 基本操作\n\n- `git init` 初始化git仓库\n- `git add` 添加\n  - `git add . ` 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n  - `git add -A `提交所有变化\n- `git st (status)` 查看状态\n- `git commit -m '提交说明'` 提交\n- `git clone <url> `拷贝一个 Git 仓库到本地\n- `git diff` 比较暂存区和工作区的差异\n  - `git diff --cached` 比较暂存区和历史区的差异\n- `git sl -<num>` 查看log（可指定条数）\n    - `git sl -<num> --graph <branch> <branch>` 查看提交记录，显示分支图形\n- `git sp -<num>` 查看提交（可查看提交时间）\n- `git remote -v` 查看远程库信息\n- `git remote add origin git@server-name:path/repo-name.git` 关联远程库\n\n### 下拉与提交\n\n- `git push` 提交\n  - `git push origin <branch>` 提交代码到远程分支\n  - `git push --force` 强制提交覆盖到远程\n- `git pull` 下拉\n- `git fetch`\n- `git reset --hard origin/master` 用远程强制覆盖本地（强制下拉）\n\n### 分支管理\n\n- `git checkout <branch>` 切换分支\n- `git checkout -b <branch>` 创建并切换到新的分支.\n- `git branch -d <branch> `删除分支\n    - `git push --delete origin <branch>` 删除远程分支\n- `git branch -a `列出所有分支\n- `git merge <branch>` 合并分支\n- `git remote prune origin` 与远程同步，清除没有追踪的分支\n- `git branch -m <oldname> <newname>` 修改分支名称\n\n### 版本管理\n\n- `git checkout <filename> `HEAD中的最新内容替换掉你的工作目录中的文件\n- `git reset --hard HEAD/commit_id`  回滚到历史版本\n  - `git reset --hard HEAD^` 回滚到上一版本（上上个版本为`HEAD^^` ）\n- `git reflog` 可以查看每一次操作\n- `git reset HEAD <path>` 回到add操作前\n\n### 关于rebase\n\n- `git rebase -i <branch>` 压榨提交(pick修改成squash)\n  - rebase完后要强制提交\n  - rebase时有冲突建议 `git rebase --abort`\n- `git rebase --onto (种植的目标分支) 不包含的起点 包含的终点`\n\n### 其他\n\n- `git commit --amend --reset-author`  修改提交and作者（同时会修改时间）\n- `git commit --amend --date <tgitime> ` 修改时间\n- `git commit --amend` 改写上一次提交（需强制提交到远程）\n- `git stash` 将工作区修改放入藏匿区\n- `git stash list` 查看藏匿区列表\n- `git stash pop` 将藏匿区的内容拿出来\n- `git mv <oldfilename> <newfilename>` 重命名文件名\n\n\n  ### 胡言乱语\n\n  真是是非常喜欢`git reflog`这个命令了  对于我这种经常rebase错的人来说 简直是一颗救命的后悔药。。。\n\n\n\n\n\n\n","slug":"20180415","published":1,"updated":"2018-04-26T02:55:14.995Z","_id":"cjgfxpzep000gtm1fexvtjmy2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>讲实话之前都很少直接敲git的命令，都直接使用工具<br>em….(说点啥。。。)<br>下面是自己来到新公司使用比较多的git命令的总结</p>\n<a id=\"more\"></a>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li><code>git init</code> 初始化git仓库</li>\n<li><code>git add</code> 添加<ul>\n<li><code>git add .</code> 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n<li><code>git add -A</code>提交所有变化</li>\n</ul>\n</li>\n<li><code>git st (status)</code> 查看状态</li>\n<li><code>git commit -m &#39;提交说明&#39;</code> 提交</li>\n<li><code>git clone &lt;url&gt;</code>拷贝一个 Git 仓库到本地</li>\n<li><code>git diff</code> 比较暂存区和工作区的差异<ul>\n<li><code>git diff --cached</code> 比较暂存区和历史区的差异</li>\n</ul>\n</li>\n<li><code>git sl -&lt;num&gt;</code> 查看log（可指定条数）<ul>\n<li><code>git sl -&lt;num&gt; --graph &lt;branch&gt; &lt;branch&gt;</code> 查看提交记录，显示分支图形</li>\n</ul>\n</li>\n<li><code>git sp -&lt;num&gt;</code> 查看提交（可查看提交时间）</li>\n<li><code>git remote -v</code> 查看远程库信息</li>\n<li><code>git remote add origin git@server-name:path/repo-name.git</code> 关联远程库</li>\n</ul>\n<h3 id=\"下拉与提交\"><a href=\"#下拉与提交\" class=\"headerlink\" title=\"下拉与提交\"></a>下拉与提交</h3><ul>\n<li><code>git push</code> 提交<ul>\n<li><code>git push origin &lt;branch&gt;</code> 提交代码到远程分支</li>\n<li><code>git push --force</code> 强制提交覆盖到远程</li>\n</ul>\n</li>\n<li><code>git pull</code> 下拉</li>\n<li><code>git fetch</code></li>\n<li><code>git reset --hard origin/master</code> 用远程强制覆盖本地（强制下拉）</li>\n</ul>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><ul>\n<li><code>git checkout &lt;branch&gt;</code> 切换分支</li>\n<li><code>git checkout -b &lt;branch&gt;</code> 创建并切换到新的分支.</li>\n<li><code>git branch -d &lt;branch&gt;</code>删除分支<ul>\n<li><code>git push --delete origin &lt;branch&gt;</code> 删除远程分支</li>\n</ul>\n</li>\n<li><code>git branch -a</code>列出所有分支</li>\n<li><code>git merge &lt;branch&gt;</code> 合并分支</li>\n<li><code>git remote prune origin</code> 与远程同步，清除没有追踪的分支</li>\n<li><code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code> 修改分支名称</li>\n</ul>\n<h3 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h3><ul>\n<li><code>git checkout &lt;filename&gt;</code>HEAD中的最新内容替换掉你的工作目录中的文件</li>\n<li><code>git reset --hard HEAD/commit_id</code>  回滚到历史版本<ul>\n<li><code>git reset --hard HEAD^</code> 回滚到上一版本（上上个版本为<code>HEAD^^</code> ）</li>\n</ul>\n</li>\n<li><code>git reflog</code> 可以查看每一次操作</li>\n<li><code>git reset HEAD &lt;path&gt;</code> 回到add操作前</li>\n</ul>\n<h3 id=\"关于rebase\"><a href=\"#关于rebase\" class=\"headerlink\" title=\"关于rebase\"></a>关于rebase</h3><ul>\n<li><code>git rebase -i &lt;branch&gt;</code> 压榨提交(pick修改成squash)<ul>\n<li>rebase完后要强制提交</li>\n<li>rebase时有冲突建议 <code>git rebase --abort</code></li>\n</ul>\n</li>\n<li><code>git rebase --onto (种植的目标分支) 不包含的起点 包含的终点</code></li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><code>git commit --amend --reset-author</code>  修改提交and作者（同时会修改时间）</li>\n<li><code>git commit --amend --date &lt;tgitime&gt;</code> 修改时间</li>\n<li><code>git commit --amend</code> 改写上一次提交（需强制提交到远程）</li>\n<li><code>git stash</code> 将工作区修改放入藏匿区</li>\n<li><code>git stash list</code> 查看藏匿区列表</li>\n<li><code>git stash pop</code> 将藏匿区的内容拿出来</li>\n<li><code>git mv &lt;oldfilename&gt; &lt;newfilename&gt;</code> 重命名文件名</li>\n</ul>\n<h3 id=\"胡言乱语\"><a href=\"#胡言乱语\" class=\"headerlink\" title=\"胡言乱语\"></a>胡言乱语</h3><p>  真是是非常喜欢<code>git reflog</code>这个命令了  对于我这种经常rebase错的人来说 简直是一颗救命的后悔药。。。</p>\n","site":{"data":{}},"excerpt":"<p>讲实话之前都很少直接敲git的命令，都直接使用工具<br>em….(说点啥。。。)<br>下面是自己来到新公司使用比较多的git命令的总结</p>","more":"<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li><code>git init</code> 初始化git仓库</li>\n<li><code>git add</code> 添加<ul>\n<li><code>git add .</code> 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n<li><code>git add -A</code>提交所有变化</li>\n</ul>\n</li>\n<li><code>git st (status)</code> 查看状态</li>\n<li><code>git commit -m &#39;提交说明&#39;</code> 提交</li>\n<li><code>git clone &lt;url&gt;</code>拷贝一个 Git 仓库到本地</li>\n<li><code>git diff</code> 比较暂存区和工作区的差异<ul>\n<li><code>git diff --cached</code> 比较暂存区和历史区的差异</li>\n</ul>\n</li>\n<li><code>git sl -&lt;num&gt;</code> 查看log（可指定条数）<ul>\n<li><code>git sl -&lt;num&gt; --graph &lt;branch&gt; &lt;branch&gt;</code> 查看提交记录，显示分支图形</li>\n</ul>\n</li>\n<li><code>git sp -&lt;num&gt;</code> 查看提交（可查看提交时间）</li>\n<li><code>git remote -v</code> 查看远程库信息</li>\n<li><code>git remote add origin git@server-name:path/repo-name.git</code> 关联远程库</li>\n</ul>\n<h3 id=\"下拉与提交\"><a href=\"#下拉与提交\" class=\"headerlink\" title=\"下拉与提交\"></a>下拉与提交</h3><ul>\n<li><code>git push</code> 提交<ul>\n<li><code>git push origin &lt;branch&gt;</code> 提交代码到远程分支</li>\n<li><code>git push --force</code> 强制提交覆盖到远程</li>\n</ul>\n</li>\n<li><code>git pull</code> 下拉</li>\n<li><code>git fetch</code></li>\n<li><code>git reset --hard origin/master</code> 用远程强制覆盖本地（强制下拉）</li>\n</ul>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><ul>\n<li><code>git checkout &lt;branch&gt;</code> 切换分支</li>\n<li><code>git checkout -b &lt;branch&gt;</code> 创建并切换到新的分支.</li>\n<li><code>git branch -d &lt;branch&gt;</code>删除分支<ul>\n<li><code>git push --delete origin &lt;branch&gt;</code> 删除远程分支</li>\n</ul>\n</li>\n<li><code>git branch -a</code>列出所有分支</li>\n<li><code>git merge &lt;branch&gt;</code> 合并分支</li>\n<li><code>git remote prune origin</code> 与远程同步，清除没有追踪的分支</li>\n<li><code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code> 修改分支名称</li>\n</ul>\n<h3 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h3><ul>\n<li><code>git checkout &lt;filename&gt;</code>HEAD中的最新内容替换掉你的工作目录中的文件</li>\n<li><code>git reset --hard HEAD/commit_id</code>  回滚到历史版本<ul>\n<li><code>git reset --hard HEAD^</code> 回滚到上一版本（上上个版本为<code>HEAD^^</code> ）</li>\n</ul>\n</li>\n<li><code>git reflog</code> 可以查看每一次操作</li>\n<li><code>git reset HEAD &lt;path&gt;</code> 回到add操作前</li>\n</ul>\n<h3 id=\"关于rebase\"><a href=\"#关于rebase\" class=\"headerlink\" title=\"关于rebase\"></a>关于rebase</h3><ul>\n<li><code>git rebase -i &lt;branch&gt;</code> 压榨提交(pick修改成squash)<ul>\n<li>rebase完后要强制提交</li>\n<li>rebase时有冲突建议 <code>git rebase --abort</code></li>\n</ul>\n</li>\n<li><code>git rebase --onto (种植的目标分支) 不包含的起点 包含的终点</code></li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><code>git commit --amend --reset-author</code>  修改提交and作者（同时会修改时间）</li>\n<li><code>git commit --amend --date &lt;tgitime&gt;</code> 修改时间</li>\n<li><code>git commit --amend</code> 改写上一次提交（需强制提交到远程）</li>\n<li><code>git stash</code> 将工作区修改放入藏匿区</li>\n<li><code>git stash list</code> 查看藏匿区列表</li>\n<li><code>git stash pop</code> 将藏匿区的内容拿出来</li>\n<li><code>git mv &lt;oldfilename&gt; &lt;newfilename&gt;</code> 重命名文件名</li>\n</ul>\n<h3 id=\"胡言乱语\"><a href=\"#胡言乱语\" class=\"headerlink\" title=\"胡言乱语\"></a>胡言乱语</h3><p>  真是是非常喜欢<code>git reflog</code>这个命令了  对于我这种经常rebase错的人来说 简直是一颗救命的后悔药。。。</p>"},{"layout":"post","title":"项目总结的（一）","date":"2017-09-25T07:02:17.000Z","reward":false,"_content":"工作一年了，其实在工作中经常会遇见相同的问题\n但是之前都没有总结，经常是这一次解决了，下一次又忘记了\n所以决定以后将项目中遇到的问题，以及一些坑，都记录下来。<!--more-->\n\n这次是一个重写的公众号项目，修改的主要是UI,所以关于css的内容比较多\n\n##  表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\n\n\n```\n//判断手机版本\nvar browser = {\n  versions: function () {\n    var u = navigator.userAgent, app = navigator.appVersion;\n    return {         //移动终端浏览器版本信息\n      trident: u.indexOf('Trident') > -1, //IE内核\n      presto: u.indexOf('Presto') > -1, //opera内核\n      webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核\n      gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核\n      mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端\n      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n      android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或uc浏览器\n      iPhone: u.indexOf('iPhone') > -1, //是否为iPhone或者QQHD浏览器\n      iPad: u.indexOf('iPad') > -1, //是否iPad\n      webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部\n    };\n  }(),\n  language: (navigator.browserLanguage || navigator.language).toLowerCase()\n};\n\n// 是安卓收的话 重新resize页面\n if(browser.versions.android){\n    window.addEventListener(\"resize\", function() {\n      if(document.activeElement.tagName==\"INPUT\" || document.activeElement.tagName==\"TEXTAREA\") {\n        window.setTimeout(function() {\n          document.activeElement.scrollIntoViewIfNeeded();\n        },0);\n      }\n    })\n  }\n```\n\n## label与radio绑定的方法\n1.方法一\n\n```\n<input type=\"radio\" name=\"marry\" id=\"women\" >\n<label for=\"women\">女</label>\n```\n\n2.方法二\n\n```\n// 可定义label宽度，增加点击响应区域\n<label for=\"women\"><input type=\"radio\" name=\"marry\" id=\"women\">女</label>\n\n```\n##  css 技巧总结\n\n### 1.滚动不流畅(主要是ios)\n```\noverflow-y : auto;\noverflow-scrolling  touch\n-webkit-overflow-scrolling: touch; /* ios5+ */\n```\n### 2.pointer-events: none的用处\n   鼠标点击事件禁用\n   \n  - 1.可防止表单重复提交，在点击按钮是加上这个属性，接口返回成功是去掉\n       \n  - 2.可在select框后自定义图标，在点击自定义图案时，依然响应select的事件\n\n\n### 3.radio与checkbox的美化\n```\n```\n<input type=\"radio\" >\n<label class=\"f-grey\">公司</label>\n```\n\n\n```\n.radio-group\n  display inline-block\n  input\n    position relative\n    margin-right 5px\n  input[type=radio]:before\n    display inline-block\n    content '';\n    width 16px;\n    height 16px;\n    background-size 100%\n    top -2px\n    left -2px\n    z-index: 2;\n    border: 2px solid #2696f3;\n    border-radius: 50%;\n    position absolute\n    background #ffffff\n  input[type=radio]:checked:after\n    display inline-block\n    content '';\n    width 12px;\n    height 12px;\n    background-size 100%\n    top 2px\n    left 2px\n    z-index: 2;\n    border-radius: 50%;\n    position absolute\n    background #2696f3\n\n```\n### 4.尽量少使用 filter 属性\n\n filter 也会增大内存消耗。最不能忍受的是 filte样式在每个页面元素（使用到该 filter 样式）渲染时都会被浏览器分析一次，而不是像一般的背景图片渲染模式：使用过该背景图片的所有元素都是被浏览器一次性渲染的。\n    \n\n### 5.动画卡顿的解决办法\n\n为动画DOM元素添加CSS3样式\n\n```\n-webkit-transform:transition3d(0,0,0)\n或-webkit-transform:translateZ(0);，\n```\n这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画时从CPU转向GPU\n\n### 6.改变input里placeholder默认显示字的样式\n例：改变颜色\n\n```\ninput::-webkit-input-placeholder{\n    color:red;\n}\n```\n\n### 7.ios上input有时有默认的内部阴影\n\n```\n-webkit-appearance: none; /*去除系统默认的样式*/\n```\n\n### 6.label两端对齐的方法（存在兼容性问题）\n\n```\ntext-align:justify;\ntext-justify:distribute-all-lines;/*ie6-8*/\ntext-align-last:justify;/* ie9*/\n-moz-text-align-last:justify;/*ff*/\n-webkit-text-align-last:justify;/*chrome 20+*/\n```\n\n\n## flex 布局\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n## 控制微信自带的返回按钮\n\n```\nfunction closePage() {\n  window.history.pushState({}, 'title', null);\n  window.addEventListener('popstate', function() { // 若使用 on 绑定事件在某些机型不触发事件函数\n    if (sessionStorage.getItem('back')) {\n        WeixinJSBridge.call('closeWindow')  //这里可以关闭页面或者跳转到指定页面\n    } else {\n      sessionStorage.setItem('back', true)\n    }\n  });\n  window.onpageshow = function () {\n    setTimeout(function () { // 修复 ios 平台跳转后再返回触发 popstate 事件时已经设置 sessionStorage 存储,导致直接关闭页面\n      sessionStorage.setItem('back', true)\n    })\n  };\n\n  window.onpagehide = function () {\n    sessionStorage.removeItem('back')\n  }\n\n```\n\n## js实现复制内容到剪切板\n\n```\n/**\n * @description 复制内容到剪切板中\n * @param input\n */\nfunction copy(input) {\n\n  var isiOSDevice = navigator.userAgent.match(/ipad|iphone/i);\n  if (isiOSDevice) {\n    var editable = input.contentEditable;\n    var readonly = input.readOnly;\n    input.contentEditable = true;\n    input.readonly = false;\n    var range = document.createRange();\n    range.selectNodeContents(input);\n    var selection = window.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(range);\n\n    input.setSelectionRange(0, 999999);\n\n    input.contentEditable = editable;\n    input.readOnly = readonly;\n  } else {\n    input.select();\n  }\n  document.execCommand('copy');\n}\n```\n\n## 关于css设计模式\n1. 重置默认样式（reset）\n2. 减少对 HTML 结构的依赖。要避免使用元素选择器\n3. 增加 CSS class 重复性的使用。可以提取使用较频繁的样式，尽量抽离重复的程式码。\n\n相关文章：https://segmentfault.com/a/1190000000388784\n          http://www.cnblogs.com/westsoft/p/5925221.html\n## 关于手机端自适应\n### 1.rem\nrem是相当于根元素的\n\n方法一\n\n```\nhtml {font-size: 62.5%;/*10 ÷ 16 × 100% = 62.5%*/}\nbody {font-size: 1.4rem;/*1.4 × 10px = 14px */}\nh1 { font-size: 2.4rem;/*2.4 × 10px = 24px*/}\n\n```\n\n方法二\n\n```\n(function(doc, win) {\n    var docEl = doc.documentElement,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n        recalc = function() {\n            var clientWidth = docEl.clientWidth;\n            if (!clientWidth) return;\n            docEl.style.fontSize = 14 * (clientWidth / 320) + 'px';\n        };\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n})(document, window);\n\n```\n### 2.viewport缩放\n\n```\n<meta name=\"viewport\" content=\"width=320,maximum-scale=1.3,user-scalable=no\">\n```\n\n### 3.媒体查询\n\n```\n@media screen and (min-width: 320px) {\n    html {font-size: 14px;}\n}\n \n@media screen and (min-width: 360px) {\n    html {font-size: 16px;}\n}\n \n@media screen and (min-width: 400px) {\n    html {font-size: 18px;}\n}\n \n@media screen and (min-width: 440px) {\n    html {font-size: 20px;}\n}\n \n@media screen and (min-width: 480px) {\n    html {font-size: 22px;}\n}\n \n@media screen and (min-width: 640px) {\n    html {font-size: 28px;}\n}\n```\n### 4.vw\n\n不知道大家是不是把 rem 设置成了某个比较好算的宽度，所以切图更得心应手，但 vw 其实是 1% 个屏幕宽度,的确这样算起来不方便，这我觉得算是一个vw不好的地方。但是，作为一名与时俱进的前端工程师，你知道 CSS3 有个函数叫 calc 吗？有人可能会说 calc 目前支持度还有点问题。你知道 SASS 或者 LESS 吧？你知道它们是可以做算术题的吧？你知道它们可以写 function 吧？\n\n\n```\n<!--Sass-->\n@function pxToVw($px, $screen-width: 750) { \n  @return ($px / $screen-width) * 100vw;\n}\n\n```\n\n\n\n\n\n","source":"_posts/925.md","raw":"---\nlayout: post\ntitle: 项目总结的（一）\ndate: 2017-09-25 15:02:17\ntags: \n- 项目总结\n- css\n- 适配\nreward: false\n---\n工作一年了，其实在工作中经常会遇见相同的问题\n但是之前都没有总结，经常是这一次解决了，下一次又忘记了\n所以决定以后将项目中遇到的问题，以及一些坑，都记录下来。<!--more-->\n\n这次是一个重写的公众号项目，修改的主要是UI,所以关于css的内容比较多\n\n##  表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\n\n\n```\n//判断手机版本\nvar browser = {\n  versions: function () {\n    var u = navigator.userAgent, app = navigator.appVersion;\n    return {         //移动终端浏览器版本信息\n      trident: u.indexOf('Trident') > -1, //IE内核\n      presto: u.indexOf('Presto') > -1, //opera内核\n      webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核\n      gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核\n      mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端\n      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n      android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或uc浏览器\n      iPhone: u.indexOf('iPhone') > -1, //是否为iPhone或者QQHD浏览器\n      iPad: u.indexOf('iPad') > -1, //是否iPad\n      webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部\n    };\n  }(),\n  language: (navigator.browserLanguage || navigator.language).toLowerCase()\n};\n\n// 是安卓收的话 重新resize页面\n if(browser.versions.android){\n    window.addEventListener(\"resize\", function() {\n      if(document.activeElement.tagName==\"INPUT\" || document.activeElement.tagName==\"TEXTAREA\") {\n        window.setTimeout(function() {\n          document.activeElement.scrollIntoViewIfNeeded();\n        },0);\n      }\n    })\n  }\n```\n\n## label与radio绑定的方法\n1.方法一\n\n```\n<input type=\"radio\" name=\"marry\" id=\"women\" >\n<label for=\"women\">女</label>\n```\n\n2.方法二\n\n```\n// 可定义label宽度，增加点击响应区域\n<label for=\"women\"><input type=\"radio\" name=\"marry\" id=\"women\">女</label>\n\n```\n##  css 技巧总结\n\n### 1.滚动不流畅(主要是ios)\n```\noverflow-y : auto;\noverflow-scrolling  touch\n-webkit-overflow-scrolling: touch; /* ios5+ */\n```\n### 2.pointer-events: none的用处\n   鼠标点击事件禁用\n   \n  - 1.可防止表单重复提交，在点击按钮是加上这个属性，接口返回成功是去掉\n       \n  - 2.可在select框后自定义图标，在点击自定义图案时，依然响应select的事件\n\n\n### 3.radio与checkbox的美化\n```\n```\n<input type=\"radio\" >\n<label class=\"f-grey\">公司</label>\n```\n\n\n```\n.radio-group\n  display inline-block\n  input\n    position relative\n    margin-right 5px\n  input[type=radio]:before\n    display inline-block\n    content '';\n    width 16px;\n    height 16px;\n    background-size 100%\n    top -2px\n    left -2px\n    z-index: 2;\n    border: 2px solid #2696f3;\n    border-radius: 50%;\n    position absolute\n    background #ffffff\n  input[type=radio]:checked:after\n    display inline-block\n    content '';\n    width 12px;\n    height 12px;\n    background-size 100%\n    top 2px\n    left 2px\n    z-index: 2;\n    border-radius: 50%;\n    position absolute\n    background #2696f3\n\n```\n### 4.尽量少使用 filter 属性\n\n filter 也会增大内存消耗。最不能忍受的是 filte样式在每个页面元素（使用到该 filter 样式）渲染时都会被浏览器分析一次，而不是像一般的背景图片渲染模式：使用过该背景图片的所有元素都是被浏览器一次性渲染的。\n    \n\n### 5.动画卡顿的解决办法\n\n为动画DOM元素添加CSS3样式\n\n```\n-webkit-transform:transition3d(0,0,0)\n或-webkit-transform:translateZ(0);，\n```\n这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画时从CPU转向GPU\n\n### 6.改变input里placeholder默认显示字的样式\n例：改变颜色\n\n```\ninput::-webkit-input-placeholder{\n    color:red;\n}\n```\n\n### 7.ios上input有时有默认的内部阴影\n\n```\n-webkit-appearance: none; /*去除系统默认的样式*/\n```\n\n### 6.label两端对齐的方法（存在兼容性问题）\n\n```\ntext-align:justify;\ntext-justify:distribute-all-lines;/*ie6-8*/\ntext-align-last:justify;/* ie9*/\n-moz-text-align-last:justify;/*ff*/\n-webkit-text-align-last:justify;/*chrome 20+*/\n```\n\n\n## flex 布局\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n## 控制微信自带的返回按钮\n\n```\nfunction closePage() {\n  window.history.pushState({}, 'title', null);\n  window.addEventListener('popstate', function() { // 若使用 on 绑定事件在某些机型不触发事件函数\n    if (sessionStorage.getItem('back')) {\n        WeixinJSBridge.call('closeWindow')  //这里可以关闭页面或者跳转到指定页面\n    } else {\n      sessionStorage.setItem('back', true)\n    }\n  });\n  window.onpageshow = function () {\n    setTimeout(function () { // 修复 ios 平台跳转后再返回触发 popstate 事件时已经设置 sessionStorage 存储,导致直接关闭页面\n      sessionStorage.setItem('back', true)\n    })\n  };\n\n  window.onpagehide = function () {\n    sessionStorage.removeItem('back')\n  }\n\n```\n\n## js实现复制内容到剪切板\n\n```\n/**\n * @description 复制内容到剪切板中\n * @param input\n */\nfunction copy(input) {\n\n  var isiOSDevice = navigator.userAgent.match(/ipad|iphone/i);\n  if (isiOSDevice) {\n    var editable = input.contentEditable;\n    var readonly = input.readOnly;\n    input.contentEditable = true;\n    input.readonly = false;\n    var range = document.createRange();\n    range.selectNodeContents(input);\n    var selection = window.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(range);\n\n    input.setSelectionRange(0, 999999);\n\n    input.contentEditable = editable;\n    input.readOnly = readonly;\n  } else {\n    input.select();\n  }\n  document.execCommand('copy');\n}\n```\n\n## 关于css设计模式\n1. 重置默认样式（reset）\n2. 减少对 HTML 结构的依赖。要避免使用元素选择器\n3. 增加 CSS class 重复性的使用。可以提取使用较频繁的样式，尽量抽离重复的程式码。\n\n相关文章：https://segmentfault.com/a/1190000000388784\n          http://www.cnblogs.com/westsoft/p/5925221.html\n## 关于手机端自适应\n### 1.rem\nrem是相当于根元素的\n\n方法一\n\n```\nhtml {font-size: 62.5%;/*10 ÷ 16 × 100% = 62.5%*/}\nbody {font-size: 1.4rem;/*1.4 × 10px = 14px */}\nh1 { font-size: 2.4rem;/*2.4 × 10px = 24px*/}\n\n```\n\n方法二\n\n```\n(function(doc, win) {\n    var docEl = doc.documentElement,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n        recalc = function() {\n            var clientWidth = docEl.clientWidth;\n            if (!clientWidth) return;\n            docEl.style.fontSize = 14 * (clientWidth / 320) + 'px';\n        };\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n})(document, window);\n\n```\n### 2.viewport缩放\n\n```\n<meta name=\"viewport\" content=\"width=320,maximum-scale=1.3,user-scalable=no\">\n```\n\n### 3.媒体查询\n\n```\n@media screen and (min-width: 320px) {\n    html {font-size: 14px;}\n}\n \n@media screen and (min-width: 360px) {\n    html {font-size: 16px;}\n}\n \n@media screen and (min-width: 400px) {\n    html {font-size: 18px;}\n}\n \n@media screen and (min-width: 440px) {\n    html {font-size: 20px;}\n}\n \n@media screen and (min-width: 480px) {\n    html {font-size: 22px;}\n}\n \n@media screen and (min-width: 640px) {\n    html {font-size: 28px;}\n}\n```\n### 4.vw\n\n不知道大家是不是把 rem 设置成了某个比较好算的宽度，所以切图更得心应手，但 vw 其实是 1% 个屏幕宽度,的确这样算起来不方便，这我觉得算是一个vw不好的地方。但是，作为一名与时俱进的前端工程师，你知道 CSS3 有个函数叫 calc 吗？有人可能会说 calc 目前支持度还有点问题。你知道 SASS 或者 LESS 吧？你知道它们是可以做算术题的吧？你知道它们可以写 function 吧？\n\n\n```\n<!--Sass-->\n@function pxToVw($px, $screen-width: 750) { \n  @return ($px / $screen-width) * 100vw;\n}\n\n```\n\n\n\n\n\n","slug":"925","published":1,"updated":"2018-03-29T11:35:42.438Z","comments":1,"photos":[],"link":"","_id":"cjgfxpzeq000itm1fkkbzgex8","content":"<p>工作一年了，其实在工作中经常会遇见相同的问题<br>但是之前都没有总结，经常是这一次解决了，下一次又忘记了<br>所以决定以后将项目中遇到的问题，以及一些坑，都记录下来。<a id=\"more\"></a></p>\n<p>这次是一个重写的公众号项目，修改的主要是UI,所以关于css的内容比较多</p>\n<h2 id=\"表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\"><a href=\"#表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\" class=\"headerlink\" title=\"表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\"></a>表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断手机版本</span><br><span class=\"line\">var browser = &#123;</span><br><span class=\"line\">  versions: function () &#123;</span><br><span class=\"line\">    var u = navigator.userAgent, app = navigator.appVersion;</span><br><span class=\"line\">    return &#123;         //移动终端浏览器版本信息</span><br><span class=\"line\">      trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核</span><br><span class=\"line\">      presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核</span><br><span class=\"line\">      webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核</span><br><span class=\"line\">      gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核</span><br><span class=\"line\">      mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端</span><br><span class=\"line\">      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</span><br><span class=\"line\">      android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或uc浏览器</span><br><span class=\"line\">      iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器</span><br><span class=\"line\">      iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad</span><br><span class=\"line\">      webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;(),</span><br><span class=\"line\">  language: (navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 是安卓收的话 重新resize页面</span><br><span class=\"line\"> if(browser.versions.android)&#123;</span><br><span class=\"line\">    window.addEventListener(&quot;resize&quot;, function() &#123;</span><br><span class=\"line\">      if(document.activeElement.tagName==&quot;INPUT&quot; || document.activeElement.tagName==&quot;TEXTAREA&quot;) &#123;</span><br><span class=\"line\">        window.setTimeout(function() &#123;</span><br><span class=\"line\">          document.activeElement.scrollIntoViewIfNeeded();</span><br><span class=\"line\">        &#125;,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"label与radio绑定的方法\"><a href=\"#label与radio绑定的方法\" class=\"headerlink\" title=\"label与radio绑定的方法\"></a>label与radio绑定的方法</h2><p>1.方法一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;radio&quot; name=&quot;marry&quot; id=&quot;women&quot; &gt;</span><br><span class=\"line\">&lt;label for=&quot;women&quot;&gt;女&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<p>2.方法二</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 可定义label宽度，增加点击响应区域</span><br><span class=\"line\">&lt;label for=&quot;women&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;marry&quot; id=&quot;women&quot;&gt;女&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"css-技巧总结\"><a href=\"#css-技巧总结\" class=\"headerlink\" title=\"css 技巧总结\"></a>css 技巧总结</h2><h3 id=\"1-滚动不流畅-主要是ios\"><a href=\"#1-滚动不流畅-主要是ios\" class=\"headerlink\" title=\"1.滚动不流畅(主要是ios)\"></a>1.滚动不流畅(主要是ios)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow-y : auto;</span><br><span class=\"line\">overflow-scrolling  touch</span><br><span class=\"line\">-webkit-overflow-scrolling: touch; /* ios5+ */</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-pointer-events-none的用处\"><a href=\"#2-pointer-events-none的用处\" class=\"headerlink\" title=\"2.pointer-events: none的用处\"></a>2.pointer-events: none的用处</h3><p>   鼠标点击事件禁用</p>\n<ul>\n<li><p>1.可防止表单重复提交，在点击按钮是加上这个属性，接口返回成功是去掉</p>\n</li>\n<li><p>2.可在select框后自定义图标，在点击自定义图案时，依然响应select的事件</p>\n</li>\n</ul>\n<h3 id=\"3-radio与checkbox的美化\"><a href=\"#3-radio与checkbox的美化\" class=\"headerlink\" title=\"3.radio与checkbox的美化\"></a>3.radio与checkbox的美化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">&lt;input type=&quot;radio&quot; &gt;</span><br><span class=\"line\">&lt;label class=&quot;f-grey&quot;&gt;公司&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.radio-group</span><br><span class=\"line\">  display inline-block</span><br><span class=\"line\">  input</span><br><span class=\"line\">    position relative</span><br><span class=\"line\">    margin-right 5px</span><br><span class=\"line\">  input[type=radio]:before</span><br><span class=\"line\">    display inline-block</span><br><span class=\"line\">    content &apos;&apos;;</span><br><span class=\"line\">    width 16px;</span><br><span class=\"line\">    height 16px;</span><br><span class=\"line\">    background-size 100%</span><br><span class=\"line\">    top -2px</span><br><span class=\"line\">    left -2px</span><br><span class=\"line\">    z-index: 2;</span><br><span class=\"line\">    border: 2px solid #2696f3;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\">    position absolute</span><br><span class=\"line\">    background #ffffff</span><br><span class=\"line\">  input[type=radio]:checked:after</span><br><span class=\"line\">    display inline-block</span><br><span class=\"line\">    content &apos;&apos;;</span><br><span class=\"line\">    width 12px;</span><br><span class=\"line\">    height 12px;</span><br><span class=\"line\">    background-size 100%</span><br><span class=\"line\">    top 2px</span><br><span class=\"line\">    left 2px</span><br><span class=\"line\">    z-index: 2;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\">    position absolute</span><br><span class=\"line\">    background #2696f3</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-尽量少使用-filter-属性\"><a href=\"#4-尽量少使用-filter-属性\" class=\"headerlink\" title=\"4.尽量少使用 filter 属性\"></a>4.尽量少使用 filter 属性</h3><p> filter 也会增大内存消耗。最不能忍受的是 filte样式在每个页面元素（使用到该 filter 样式）渲染时都会被浏览器分析一次，而不是像一般的背景图片渲染模式：使用过该背景图片的所有元素都是被浏览器一次性渲染的。</p>\n<h3 id=\"5-动画卡顿的解决办法\"><a href=\"#5-动画卡顿的解决办法\" class=\"headerlink\" title=\"5.动画卡顿的解决办法\"></a>5.动画卡顿的解决办法</h3><p>为动画DOM元素添加CSS3样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-transform:transition3d(0,0,0)</span><br><span class=\"line\">或-webkit-transform:translateZ(0);，</span><br></pre></td></tr></table></figure>\n<p>这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画时从CPU转向GPU</p>\n<h3 id=\"6-改变input里placeholder默认显示字的样式\"><a href=\"#6-改变input里placeholder默认显示字的样式\" class=\"headerlink\" title=\"6.改变input里placeholder默认显示字的样式\"></a>6.改变input里placeholder默认显示字的样式</h3><p>例：改变颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input::-webkit-input-placeholder&#123;</span><br><span class=\"line\">    color:red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-ios上input有时有默认的内部阴影\"><a href=\"#7-ios上input有时有默认的内部阴影\" class=\"headerlink\" title=\"7.ios上input有时有默认的内部阴影\"></a>7.ios上input有时有默认的内部阴影</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-appearance: none; /*去除系统默认的样式*/</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-label两端对齐的方法（存在兼容性问题）\"><a href=\"#6-label两端对齐的方法（存在兼容性问题）\" class=\"headerlink\" title=\"6.label两端对齐的方法（存在兼容性问题）\"></a>6.label两端对齐的方法（存在兼容性问题）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text-align:justify;</span><br><span class=\"line\">text-justify:distribute-all-lines;/*ie6-8*/</span><br><span class=\"line\">text-align-last:justify;/* ie9*/</span><br><span class=\"line\">-moz-text-align-last:justify;/*ff*/</span><br><span class=\"line\">-webkit-text-align-last:justify;/*chrome 20+*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"flex-布局\"><a href=\"#flex-布局\" class=\"headerlink\" title=\"flex 布局\"></a>flex 布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n<h2 id=\"控制微信自带的返回按钮\"><a href=\"#控制微信自带的返回按钮\" class=\"headerlink\" title=\"控制微信自带的返回按钮\"></a>控制微信自带的返回按钮</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function closePage() &#123;</span><br><span class=\"line\">  window.history.pushState(&#123;&#125;, &apos;title&apos;, null);</span><br><span class=\"line\">  window.addEventListener(&apos;popstate&apos;, function() &#123; // 若使用 on 绑定事件在某些机型不触发事件函数</span><br><span class=\"line\">    if (sessionStorage.getItem(&apos;back&apos;)) &#123;</span><br><span class=\"line\">        WeixinJSBridge.call(&apos;closeWindow&apos;)  //这里可以关闭页面或者跳转到指定页面</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      sessionStorage.setItem(&apos;back&apos;, true)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  window.onpageshow = function () &#123;</span><br><span class=\"line\">    setTimeout(function () &#123; // 修复 ios 平台跳转后再返回触发 popstate 事件时已经设置 sessionStorage 存储,导致直接关闭页面</span><br><span class=\"line\">      sessionStorage.setItem(&apos;back&apos;, true)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  window.onpagehide = function () &#123;</span><br><span class=\"line\">    sessionStorage.removeItem(&apos;back&apos;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"js实现复制内容到剪切板\"><a href=\"#js实现复制内容到剪切板\" class=\"headerlink\" title=\"js实现复制内容到剪切板\"></a>js实现复制内容到剪切板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @description 复制内容到剪切板中</span><br><span class=\"line\"> * @param input</span><br><span class=\"line\"> */</span><br><span class=\"line\">function copy(input) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var isiOSDevice = navigator.userAgent.match(/ipad|iphone/i);</span><br><span class=\"line\">  if (isiOSDevice) &#123;</span><br><span class=\"line\">    var editable = input.contentEditable;</span><br><span class=\"line\">    var readonly = input.readOnly;</span><br><span class=\"line\">    input.contentEditable = true;</span><br><span class=\"line\">    input.readonly = false;</span><br><span class=\"line\">    var range = document.createRange();</span><br><span class=\"line\">    range.selectNodeContents(input);</span><br><span class=\"line\">    var selection = window.getSelection();</span><br><span class=\"line\">    selection.removeAllRanges();</span><br><span class=\"line\">    selection.addRange(range);</span><br><span class=\"line\"></span><br><span class=\"line\">    input.setSelectionRange(0, 999999);</span><br><span class=\"line\"></span><br><span class=\"line\">    input.contentEditable = editable;</span><br><span class=\"line\">    input.readOnly = readonly;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    input.select();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  document.execCommand(&apos;copy&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于css设计模式\"><a href=\"#关于css设计模式\" class=\"headerlink\" title=\"关于css设计模式\"></a>关于css设计模式</h2><ol>\n<li>重置默认样式（reset）</li>\n<li>减少对 HTML 结构的依赖。要避免使用元素选择器</li>\n<li>增加 CSS class 重复性的使用。可以提取使用较频繁的样式，尽量抽离重复的程式码。</li>\n</ol>\n<p>相关文章：<a href=\"https://segmentfault.com/a/1190000000388784\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000000388784</a><br>          <a href=\"http://www.cnblogs.com/westsoft/p/5925221.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/westsoft/p/5925221.html</a></p>\n<h2 id=\"关于手机端自适应\"><a href=\"#关于手机端自适应\" class=\"headerlink\" title=\"关于手机端自适应\"></a>关于手机端自适应</h2><h3 id=\"1-rem\"><a href=\"#1-rem\" class=\"headerlink\" title=\"1.rem\"></a>1.rem</h3><p>rem是相当于根元素的</p>\n<p>方法一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;font-size: 62.5%;/*10 ÷ 16 × 100% = 62.5%*/&#125;</span><br><span class=\"line\">body &#123;font-size: 1.4rem;/*1.4 × 10px = 14px */&#125;</span><br><span class=\"line\">h1 &#123; font-size: 2.4rem;/*2.4 × 10px = 24px*/&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(doc, win) &#123;</span><br><span class=\"line\">    var docEl = doc.documentElement,</span><br><span class=\"line\">        resizeEvt = &apos;orientationchange&apos; in window ? &apos;orientationchange&apos; : &apos;resize&apos;,</span><br><span class=\"line\">        recalc = function() &#123;</span><br><span class=\"line\">            var clientWidth = docEl.clientWidth;</span><br><span class=\"line\">            if (!clientWidth) return;</span><br><span class=\"line\">            docEl.style.fontSize = 14 * (clientWidth / 320) + &apos;px&apos;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    if (!doc.addEventListener) return;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, false);</span><br><span class=\"line\">    doc.addEventListener(&apos;DOMContentLoaded&apos;, recalc, false);</span><br><span class=\"line\">&#125;)(document, window);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-viewport缩放\"><a href=\"#2-viewport缩放\" class=\"headerlink\" title=\"2.viewport缩放\"></a>2.viewport缩放</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=320,maximum-scale=1.3,user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-媒体查询\"><a href=\"#3-媒体查询\" class=\"headerlink\" title=\"3.媒体查询\"></a>3.媒体查询</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (min-width: 320px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 14px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 360px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 16px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 400px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 18px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 440px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 20px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 480px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 22px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 640px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 28px;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-vw\"><a href=\"#4-vw\" class=\"headerlink\" title=\"4.vw\"></a>4.vw</h3><p>不知道大家是不是把 rem 设置成了某个比较好算的宽度，所以切图更得心应手，但 vw 其实是 1% 个屏幕宽度,的确这样算起来不方便，这我觉得算是一个vw不好的地方。但是，作为一名与时俱进的前端工程师，你知道 CSS3 有个函数叫 calc 吗？有人可能会说 calc 目前支持度还有点问题。你知道 SASS 或者 LESS 吧？你知道它们是可以做算术题的吧？你知道它们可以写 function 吧？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--Sass--&gt;</span><br><span class=\"line\">@function pxToVw($px, $screen-width: 750) &#123; </span><br><span class=\"line\">  @return ($px / $screen-width) * 100vw;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>工作一年了，其实在工作中经常会遇见相同的问题<br>但是之前都没有总结，经常是这一次解决了，下一次又忘记了<br>所以决定以后将项目中遇到的问题，以及一些坑，都记录下来。","more":"</p>\n<p>这次是一个重写的公众号项目，修改的主要是UI,所以关于css的内容比较多</p>\n<h2 id=\"表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\"><a href=\"#表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\" class=\"headerlink\" title=\"表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案\"></a>表单提交时input获取焦点安卓手机软键盘弹出有时会遮挡内容解决方案</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断手机版本</span><br><span class=\"line\">var browser = &#123;</span><br><span class=\"line\">  versions: function () &#123;</span><br><span class=\"line\">    var u = navigator.userAgent, app = navigator.appVersion;</span><br><span class=\"line\">    return &#123;         //移动终端浏览器版本信息</span><br><span class=\"line\">      trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核</span><br><span class=\"line\">      presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核</span><br><span class=\"line\">      webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核</span><br><span class=\"line\">      gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核</span><br><span class=\"line\">      mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端</span><br><span class=\"line\">      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</span><br><span class=\"line\">      android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或uc浏览器</span><br><span class=\"line\">      iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器</span><br><span class=\"line\">      iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad</span><br><span class=\"line\">      webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;(),</span><br><span class=\"line\">  language: (navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 是安卓收的话 重新resize页面</span><br><span class=\"line\"> if(browser.versions.android)&#123;</span><br><span class=\"line\">    window.addEventListener(&quot;resize&quot;, function() &#123;</span><br><span class=\"line\">      if(document.activeElement.tagName==&quot;INPUT&quot; || document.activeElement.tagName==&quot;TEXTAREA&quot;) &#123;</span><br><span class=\"line\">        window.setTimeout(function() &#123;</span><br><span class=\"line\">          document.activeElement.scrollIntoViewIfNeeded();</span><br><span class=\"line\">        &#125;,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"label与radio绑定的方法\"><a href=\"#label与radio绑定的方法\" class=\"headerlink\" title=\"label与radio绑定的方法\"></a>label与radio绑定的方法</h2><p>1.方法一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;radio&quot; name=&quot;marry&quot; id=&quot;women&quot; &gt;</span><br><span class=\"line\">&lt;label for=&quot;women&quot;&gt;女&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<p>2.方法二</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 可定义label宽度，增加点击响应区域</span><br><span class=\"line\">&lt;label for=&quot;women&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;marry&quot; id=&quot;women&quot;&gt;女&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"css-技巧总结\"><a href=\"#css-技巧总结\" class=\"headerlink\" title=\"css 技巧总结\"></a>css 技巧总结</h2><h3 id=\"1-滚动不流畅-主要是ios\"><a href=\"#1-滚动不流畅-主要是ios\" class=\"headerlink\" title=\"1.滚动不流畅(主要是ios)\"></a>1.滚动不流畅(主要是ios)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow-y : auto;</span><br><span class=\"line\">overflow-scrolling  touch</span><br><span class=\"line\">-webkit-overflow-scrolling: touch; /* ios5+ */</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-pointer-events-none的用处\"><a href=\"#2-pointer-events-none的用处\" class=\"headerlink\" title=\"2.pointer-events: none的用处\"></a>2.pointer-events: none的用处</h3><p>   鼠标点击事件禁用</p>\n<ul>\n<li><p>1.可防止表单重复提交，在点击按钮是加上这个属性，接口返回成功是去掉</p>\n</li>\n<li><p>2.可在select框后自定义图标，在点击自定义图案时，依然响应select的事件</p>\n</li>\n</ul>\n<h3 id=\"3-radio与checkbox的美化\"><a href=\"#3-radio与checkbox的美化\" class=\"headerlink\" title=\"3.radio与checkbox的美化\"></a>3.radio与checkbox的美化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">&lt;input type=&quot;radio&quot; &gt;</span><br><span class=\"line\">&lt;label class=&quot;f-grey&quot;&gt;公司&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.radio-group</span><br><span class=\"line\">  display inline-block</span><br><span class=\"line\">  input</span><br><span class=\"line\">    position relative</span><br><span class=\"line\">    margin-right 5px</span><br><span class=\"line\">  input[type=radio]:before</span><br><span class=\"line\">    display inline-block</span><br><span class=\"line\">    content &apos;&apos;;</span><br><span class=\"line\">    width 16px;</span><br><span class=\"line\">    height 16px;</span><br><span class=\"line\">    background-size 100%</span><br><span class=\"line\">    top -2px</span><br><span class=\"line\">    left -2px</span><br><span class=\"line\">    z-index: 2;</span><br><span class=\"line\">    border: 2px solid #2696f3;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\">    position absolute</span><br><span class=\"line\">    background #ffffff</span><br><span class=\"line\">  input[type=radio]:checked:after</span><br><span class=\"line\">    display inline-block</span><br><span class=\"line\">    content &apos;&apos;;</span><br><span class=\"line\">    width 12px;</span><br><span class=\"line\">    height 12px;</span><br><span class=\"line\">    background-size 100%</span><br><span class=\"line\">    top 2px</span><br><span class=\"line\">    left 2px</span><br><span class=\"line\">    z-index: 2;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\">    position absolute</span><br><span class=\"line\">    background #2696f3</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-尽量少使用-filter-属性\"><a href=\"#4-尽量少使用-filter-属性\" class=\"headerlink\" title=\"4.尽量少使用 filter 属性\"></a>4.尽量少使用 filter 属性</h3><p> filter 也会增大内存消耗。最不能忍受的是 filte样式在每个页面元素（使用到该 filter 样式）渲染时都会被浏览器分析一次，而不是像一般的背景图片渲染模式：使用过该背景图片的所有元素都是被浏览器一次性渲染的。</p>\n<h3 id=\"5-动画卡顿的解决办法\"><a href=\"#5-动画卡顿的解决办法\" class=\"headerlink\" title=\"5.动画卡顿的解决办法\"></a>5.动画卡顿的解决办法</h3><p>为动画DOM元素添加CSS3样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-transform:transition3d(0,0,0)</span><br><span class=\"line\">或-webkit-transform:translateZ(0);，</span><br></pre></td></tr></table></figure>\n<p>这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画时从CPU转向GPU</p>\n<h3 id=\"6-改变input里placeholder默认显示字的样式\"><a href=\"#6-改变input里placeholder默认显示字的样式\" class=\"headerlink\" title=\"6.改变input里placeholder默认显示字的样式\"></a>6.改变input里placeholder默认显示字的样式</h3><p>例：改变颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input::-webkit-input-placeholder&#123;</span><br><span class=\"line\">    color:red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-ios上input有时有默认的内部阴影\"><a href=\"#7-ios上input有时有默认的内部阴影\" class=\"headerlink\" title=\"7.ios上input有时有默认的内部阴影\"></a>7.ios上input有时有默认的内部阴影</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-appearance: none; /*去除系统默认的样式*/</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-label两端对齐的方法（存在兼容性问题）\"><a href=\"#6-label两端对齐的方法（存在兼容性问题）\" class=\"headerlink\" title=\"6.label两端对齐的方法（存在兼容性问题）\"></a>6.label两端对齐的方法（存在兼容性问题）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text-align:justify;</span><br><span class=\"line\">text-justify:distribute-all-lines;/*ie6-8*/</span><br><span class=\"line\">text-align-last:justify;/* ie9*/</span><br><span class=\"line\">-moz-text-align-last:justify;/*ff*/</span><br><span class=\"line\">-webkit-text-align-last:justify;/*chrome 20+*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"flex-布局\"><a href=\"#flex-布局\" class=\"headerlink\" title=\"flex 布局\"></a>flex 布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n<h2 id=\"控制微信自带的返回按钮\"><a href=\"#控制微信自带的返回按钮\" class=\"headerlink\" title=\"控制微信自带的返回按钮\"></a>控制微信自带的返回按钮</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function closePage() &#123;</span><br><span class=\"line\">  window.history.pushState(&#123;&#125;, &apos;title&apos;, null);</span><br><span class=\"line\">  window.addEventListener(&apos;popstate&apos;, function() &#123; // 若使用 on 绑定事件在某些机型不触发事件函数</span><br><span class=\"line\">    if (sessionStorage.getItem(&apos;back&apos;)) &#123;</span><br><span class=\"line\">        WeixinJSBridge.call(&apos;closeWindow&apos;)  //这里可以关闭页面或者跳转到指定页面</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      sessionStorage.setItem(&apos;back&apos;, true)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  window.onpageshow = function () &#123;</span><br><span class=\"line\">    setTimeout(function () &#123; // 修复 ios 平台跳转后再返回触发 popstate 事件时已经设置 sessionStorage 存储,导致直接关闭页面</span><br><span class=\"line\">      sessionStorage.setItem(&apos;back&apos;, true)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  window.onpagehide = function () &#123;</span><br><span class=\"line\">    sessionStorage.removeItem(&apos;back&apos;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"js实现复制内容到剪切板\"><a href=\"#js实现复制内容到剪切板\" class=\"headerlink\" title=\"js实现复制内容到剪切板\"></a>js实现复制内容到剪切板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @description 复制内容到剪切板中</span><br><span class=\"line\"> * @param input</span><br><span class=\"line\"> */</span><br><span class=\"line\">function copy(input) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var isiOSDevice = navigator.userAgent.match(/ipad|iphone/i);</span><br><span class=\"line\">  if (isiOSDevice) &#123;</span><br><span class=\"line\">    var editable = input.contentEditable;</span><br><span class=\"line\">    var readonly = input.readOnly;</span><br><span class=\"line\">    input.contentEditable = true;</span><br><span class=\"line\">    input.readonly = false;</span><br><span class=\"line\">    var range = document.createRange();</span><br><span class=\"line\">    range.selectNodeContents(input);</span><br><span class=\"line\">    var selection = window.getSelection();</span><br><span class=\"line\">    selection.removeAllRanges();</span><br><span class=\"line\">    selection.addRange(range);</span><br><span class=\"line\"></span><br><span class=\"line\">    input.setSelectionRange(0, 999999);</span><br><span class=\"line\"></span><br><span class=\"line\">    input.contentEditable = editable;</span><br><span class=\"line\">    input.readOnly = readonly;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    input.select();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  document.execCommand(&apos;copy&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于css设计模式\"><a href=\"#关于css设计模式\" class=\"headerlink\" title=\"关于css设计模式\"></a>关于css设计模式</h2><ol>\n<li>重置默认样式（reset）</li>\n<li>减少对 HTML 结构的依赖。要避免使用元素选择器</li>\n<li>增加 CSS class 重复性的使用。可以提取使用较频繁的样式，尽量抽离重复的程式码。</li>\n</ol>\n<p>相关文章：<a href=\"https://segmentfault.com/a/1190000000388784\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000000388784</a><br>          <a href=\"http://www.cnblogs.com/westsoft/p/5925221.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/westsoft/p/5925221.html</a></p>\n<h2 id=\"关于手机端自适应\"><a href=\"#关于手机端自适应\" class=\"headerlink\" title=\"关于手机端自适应\"></a>关于手机端自适应</h2><h3 id=\"1-rem\"><a href=\"#1-rem\" class=\"headerlink\" title=\"1.rem\"></a>1.rem</h3><p>rem是相当于根元素的</p>\n<p>方法一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;font-size: 62.5%;/*10 ÷ 16 × 100% = 62.5%*/&#125;</span><br><span class=\"line\">body &#123;font-size: 1.4rem;/*1.4 × 10px = 14px */&#125;</span><br><span class=\"line\">h1 &#123; font-size: 2.4rem;/*2.4 × 10px = 24px*/&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(doc, win) &#123;</span><br><span class=\"line\">    var docEl = doc.documentElement,</span><br><span class=\"line\">        resizeEvt = &apos;orientationchange&apos; in window ? &apos;orientationchange&apos; : &apos;resize&apos;,</span><br><span class=\"line\">        recalc = function() &#123;</span><br><span class=\"line\">            var clientWidth = docEl.clientWidth;</span><br><span class=\"line\">            if (!clientWidth) return;</span><br><span class=\"line\">            docEl.style.fontSize = 14 * (clientWidth / 320) + &apos;px&apos;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    if (!doc.addEventListener) return;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, false);</span><br><span class=\"line\">    doc.addEventListener(&apos;DOMContentLoaded&apos;, recalc, false);</span><br><span class=\"line\">&#125;)(document, window);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-viewport缩放\"><a href=\"#2-viewport缩放\" class=\"headerlink\" title=\"2.viewport缩放\"></a>2.viewport缩放</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=320,maximum-scale=1.3,user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-媒体查询\"><a href=\"#3-媒体查询\" class=\"headerlink\" title=\"3.媒体查询\"></a>3.媒体查询</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (min-width: 320px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 14px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 360px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 16px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 400px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 18px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 440px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 20px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 480px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 22px;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media screen and (min-width: 640px) &#123;</span><br><span class=\"line\">    html &#123;font-size: 28px;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-vw\"><a href=\"#4-vw\" class=\"headerlink\" title=\"4.vw\"></a>4.vw</h3><p>不知道大家是不是把 rem 设置成了某个比较好算的宽度，所以切图更得心应手，但 vw 其实是 1% 个屏幕宽度,的确这样算起来不方便，这我觉得算是一个vw不好的地方。但是，作为一名与时俱进的前端工程师，你知道 CSS3 有个函数叫 calc 吗？有人可能会说 calc 目前支持度还有点问题。你知道 SASS 或者 LESS 吧？你知道它们是可以做算术题的吧？你知道它们可以写 function 吧？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--Sass--&gt;</span><br><span class=\"line\">@function pxToVw($px, $screen-width: 750) &#123; </span><br><span class=\"line\">  @return ($px / $screen-width) * 100vw;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"posts","title":"第一次使用Hexo + Github Page 搭建个人博客","date":"2017-06-20T06:28:19.000Z","reward":false,"_content":"\n最近工作比较闲，没有什么事情做。于是想搭建一个自己的博客\n开始是想用node.js+mysql弄一个尝试一下但是考虑到需要购买服务器和域名\n最终决定使用Hexo + Github Page搭建一个先看看<!--more-->\n\n\n下面先分享一下，使用Hexo + Github Page搭建博客的步骤吧\n\n### 安装node\n\n去官网下载即可\n\n### 安装git\n\n- 使用git可以将本地的文件推送到github仓库\n- Hexo的主题是通过git管理的，而不是npm包，所以使用git可以使用各种主题包\n\n### 申请github帐号（如果已经有了，可以省略）\n\n- 新建gitHub仓库\n\n此处请注意 !!!\n- 输入Reposiry name　的格式为　yourname.github.io　(yourname与你的注册用户名一致，此处为固定格式。) \n- 点击  Create repository 仓库创建成功\n![image](/img/artImg/09-20_one.png)\n- 先不用初始化git,直接点击，然后拉到下方 GitHub Pages 那个地方,先随意选择一个主题然后清空仓库\n![image](/img/artImg/09202.png)\n![image](/img/artImg/09203.png)\n![image](/img/artImg/09024.png)\n\n\n至此gitHub的准备工作完成\n\n### 关于Hexo\n\n 首先中文文档奉上 https://hexo.io/zh-cn/docs/\n (注意 请尽量使用git操作，不要使用cmd命令窗口)\n -  安装hexo\n ``` \n  $ npm install -g hexo-cli\n  ```\n -  安装完成后,请执行下列命令。\n ```\n $ hexo init <folder>\n $ cd <folder>\n $ npm install\n ```\nHexo 将会在指定文件夹中新建所需要的文件。目录结构如下:\n```\n.\n├── _config.yml   //网站的配置信息\n├── package.json  //应用程序的信息\n├── scaffolds     //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件\n├── source        //资源文件夹是存放用户资源的地方\n|   ├── _drafts\n|   └── _posts\n└── themes        //主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n\n- 新建文章\n\n\n````\n$ hexo new \"文章标题\"\n\n```\n\n这样你可以在你本地的博客文件中source->_post文件夹下看到我们新建的markdown文件。\n你可以是用markdown编辑器对其进行编辑\n\n保存成功后 可以下面的命令进行本地发布,在浏览器打开 http://localhost:4000/ 就可以看到博客和刚刚发布的文章了\n```\n$ hexo s\n```\n\n至此博客已经搭建完成了，剩下的就是将其发布到github page上了\n\n\n### 发布到github page\n\n- 修改配置文件\n\n打开 _config.yml 文件\n\n修改deploy\n```\ndeploy:\n  type: git\n  repo: https://github.com/kola828/kola828.github.io.git  //刚刚新建的github地址\n  branch: master\n```\n\n- 发布\n 运行下面的命令\n ```\n $ hexo g\n $ hexo d\n ```\n访问 https://（你的github名称）.github.io/  就可以看到你的博客了\n\n ### 结束\n \n 这篇教程只是搭建一个简单的博客，你也可以根据你的需求，进行修改.\n 当然你也可以选择不同的主题对你的博客进行美化\n 这篇文章里有一些好看的hexo主题推荐,希望可以给你带来帮助\n https://www.zhihu.com/question/24422335\n ","source":"_posts/sss.md","raw":"---\nlayout: posts\ntitle: 第一次使用Hexo + Github Page 搭建个人博客\ndate: 2017-06-20 14:28:19\ntags: Hexo\nreward: false\n---\n\n最近工作比较闲，没有什么事情做。于是想搭建一个自己的博客\n开始是想用node.js+mysql弄一个尝试一下但是考虑到需要购买服务器和域名\n最终决定使用Hexo + Github Page搭建一个先看看<!--more-->\n\n\n下面先分享一下，使用Hexo + Github Page搭建博客的步骤吧\n\n### 安装node\n\n去官网下载即可\n\n### 安装git\n\n- 使用git可以将本地的文件推送到github仓库\n- Hexo的主题是通过git管理的，而不是npm包，所以使用git可以使用各种主题包\n\n### 申请github帐号（如果已经有了，可以省略）\n\n- 新建gitHub仓库\n\n此处请注意 !!!\n- 输入Reposiry name　的格式为　yourname.github.io　(yourname与你的注册用户名一致，此处为固定格式。) \n- 点击  Create repository 仓库创建成功\n![image](/img/artImg/09-20_one.png)\n- 先不用初始化git,直接点击，然后拉到下方 GitHub Pages 那个地方,先随意选择一个主题然后清空仓库\n![image](/img/artImg/09202.png)\n![image](/img/artImg/09203.png)\n![image](/img/artImg/09024.png)\n\n\n至此gitHub的准备工作完成\n\n### 关于Hexo\n\n 首先中文文档奉上 https://hexo.io/zh-cn/docs/\n (注意 请尽量使用git操作，不要使用cmd命令窗口)\n -  安装hexo\n ``` \n  $ npm install -g hexo-cli\n  ```\n -  安装完成后,请执行下列命令。\n ```\n $ hexo init <folder>\n $ cd <folder>\n $ npm install\n ```\nHexo 将会在指定文件夹中新建所需要的文件。目录结构如下:\n```\n.\n├── _config.yml   //网站的配置信息\n├── package.json  //应用程序的信息\n├── scaffolds     //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件\n├── source        //资源文件夹是存放用户资源的地方\n|   ├── _drafts\n|   └── _posts\n└── themes        //主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n\n- 新建文章\n\n\n````\n$ hexo new \"文章标题\"\n\n```\n\n这样你可以在你本地的博客文件中source->_post文件夹下看到我们新建的markdown文件。\n你可以是用markdown编辑器对其进行编辑\n\n保存成功后 可以下面的命令进行本地发布,在浏览器打开 http://localhost:4000/ 就可以看到博客和刚刚发布的文章了\n```\n$ hexo s\n```\n\n至此博客已经搭建完成了，剩下的就是将其发布到github page上了\n\n\n### 发布到github page\n\n- 修改配置文件\n\n打开 _config.yml 文件\n\n修改deploy\n```\ndeploy:\n  type: git\n  repo: https://github.com/kola828/kola828.github.io.git  //刚刚新建的github地址\n  branch: master\n```\n\n- 发布\n 运行下面的命令\n ```\n $ hexo g\n $ hexo d\n ```\n访问 https://（你的github名称）.github.io/  就可以看到你的博客了\n\n ### 结束\n \n 这篇教程只是搭建一个简单的博客，你也可以根据你的需求，进行修改.\n 当然你也可以选择不同的主题对你的博客进行美化\n 这篇文章里有一些好看的hexo主题推荐,希望可以给你带来帮助\n https://www.zhihu.com/question/24422335\n ","slug":"sss","published":1,"updated":"2018-03-29T11:35:42.438Z","comments":1,"photos":[],"link":"","_id":"cjgfxpzes000ltm1fjh7q862p","content":"<p>最近工作比较闲，没有什么事情做。于是想搭建一个自己的博客<br>开始是想用node.js+mysql弄一个尝试一下但是考虑到需要购买服务器和域名<br>最终决定使用Hexo + Github Page搭建一个先看看<a id=\"more\"></a></p>\n<p>下面先分享一下，使用Hexo + Github Page搭建博客的步骤吧</p>\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><p>去官网下载即可</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><ul>\n<li>使用git可以将本地的文件推送到github仓库</li>\n<li>Hexo的主题是通过git管理的，而不是npm包，所以使用git可以使用各种主题包</li>\n</ul>\n<h3 id=\"申请github帐号（如果已经有了，可以省略）\"><a href=\"#申请github帐号（如果已经有了，可以省略）\" class=\"headerlink\" title=\"申请github帐号（如果已经有了，可以省略）\"></a>申请github帐号（如果已经有了，可以省略）</h3><ul>\n<li>新建gitHub仓库</li>\n</ul>\n<p>此处请注意 !!!</p>\n<ul>\n<li>输入Reposiry name　的格式为　yourname.github.io　(yourname与你的注册用户名一致，此处为固定格式。) </li>\n<li>点击  Create repository 仓库创建成功<br><img src=\"/img/artImg/09-20_one.png\" alt=\"image\"></li>\n<li>先不用初始化git,直接点击，然后拉到下方 GitHub Pages 那个地方,先随意选择一个主题然后清空仓库<br><img src=\"/img/artImg/09202.png\" alt=\"image\"><br><img src=\"/img/artImg/09203.png\" alt=\"image\"><br><img src=\"/img/artImg/09024.png\" alt=\"image\"></li>\n</ul>\n<p>至此gitHub的准备工作完成</p>\n<h3 id=\"关于Hexo\"><a href=\"#关于Hexo\" class=\"headerlink\" title=\"关于Hexo\"></a>关于Hexo</h3><p> 首先中文文档奉上 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a><br> (注意 请尽量使用git操作，不要使用cmd命令窗口)</p>\n<ul>\n<li><p>安装hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成后,请执行下列命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Hexo 将会在指定文件夹中新建所需要的文件。目录结构如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml   //网站的配置信息</span><br><span class=\"line\">├── package.json  //应用程序的信息</span><br><span class=\"line\">├── scaffolds     //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件</span><br><span class=\"line\">├── source        //资源文件夹是存放用户资源的地方</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes        //主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>新建文章</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure>\n<p>这样你可以在你本地的博客文件中source-&gt;_post文件夹下看到我们新建的markdown文件。<br>你可以是用markdown编辑器对其进行编辑</p>\n<p>保存成功后 可以下面的命令进行本地发布,在浏览器打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 就可以看到博客和刚刚发布的文章了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure></p>\n<p>至此博客已经搭建完成了，剩下的就是将其发布到github page上了</p>\n<h3 id=\"发布到github-page\"><a href=\"#发布到github-page\" class=\"headerlink\" title=\"发布到github page\"></a>发布到github page</h3><ul>\n<li>修改配置文件</li>\n</ul>\n<p>打开 _config.yml 文件</p>\n<p>修改deploy<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/kola828/kola828.github.io.git  //刚刚新建的github地址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>发布<br>运行下面的命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问 https://（你的github名称）.github.io/  就可以看到你的博客了</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p> 这篇教程只是搭建一个简单的博客，你也可以根据你的需求，进行修改.<br> 当然你也可以选择不同的主题对你的博客进行美化<br> 这篇文章里有一些好看的hexo主题推荐,希望可以给你带来帮助<br> <a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>\n","site":{"data":{}},"excerpt":"<p>最近工作比较闲，没有什么事情做。于是想搭建一个自己的博客<br>开始是想用node.js+mysql弄一个尝试一下但是考虑到需要购买服务器和域名<br>最终决定使用Hexo + Github Page搭建一个先看看","more":"</p>\n<p>下面先分享一下，使用Hexo + Github Page搭建博客的步骤吧</p>\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><p>去官网下载即可</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><ul>\n<li>使用git可以将本地的文件推送到github仓库</li>\n<li>Hexo的主题是通过git管理的，而不是npm包，所以使用git可以使用各种主题包</li>\n</ul>\n<h3 id=\"申请github帐号（如果已经有了，可以省略）\"><a href=\"#申请github帐号（如果已经有了，可以省略）\" class=\"headerlink\" title=\"申请github帐号（如果已经有了，可以省略）\"></a>申请github帐号（如果已经有了，可以省略）</h3><ul>\n<li>新建gitHub仓库</li>\n</ul>\n<p>此处请注意 !!!</p>\n<ul>\n<li>输入Reposiry name　的格式为　yourname.github.io　(yourname与你的注册用户名一致，此处为固定格式。) </li>\n<li>点击  Create repository 仓库创建成功<br><img src=\"/img/artImg/09-20_one.png\" alt=\"image\"></li>\n<li>先不用初始化git,直接点击，然后拉到下方 GitHub Pages 那个地方,先随意选择一个主题然后清空仓库<br><img src=\"/img/artImg/09202.png\" alt=\"image\"><br><img src=\"/img/artImg/09203.png\" alt=\"image\"><br><img src=\"/img/artImg/09024.png\" alt=\"image\"></li>\n</ul>\n<p>至此gitHub的准备工作完成</p>\n<h3 id=\"关于Hexo\"><a href=\"#关于Hexo\" class=\"headerlink\" title=\"关于Hexo\"></a>关于Hexo</h3><p> 首先中文文档奉上 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a><br> (注意 请尽量使用git操作，不要使用cmd命令窗口)</p>\n<ul>\n<li><p>安装hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成后,请执行下列命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Hexo 将会在指定文件夹中新建所需要的文件。目录结构如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml   //网站的配置信息</span><br><span class=\"line\">├── package.json  //应用程序的信息</span><br><span class=\"line\">├── scaffolds     //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件</span><br><span class=\"line\">├── source        //资源文件夹是存放用户资源的地方</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes        //主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>新建文章</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure>\n<p>这样你可以在你本地的博客文件中source-&gt;_post文件夹下看到我们新建的markdown文件。<br>你可以是用markdown编辑器对其进行编辑</p>\n<p>保存成功后 可以下面的命令进行本地发布,在浏览器打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 就可以看到博客和刚刚发布的文章了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure></p>\n<p>至此博客已经搭建完成了，剩下的就是将其发布到github page上了</p>\n<h3 id=\"发布到github-page\"><a href=\"#发布到github-page\" class=\"headerlink\" title=\"发布到github page\"></a>发布到github page</h3><ul>\n<li>修改配置文件</li>\n</ul>\n<p>打开 _config.yml 文件</p>\n<p>修改deploy<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/kola828/kola828.github.io.git  //刚刚新建的github地址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>发布<br>运行下面的命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问 https://（你的github名称）.github.io/  就可以看到你的博客了</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p> 这篇教程只是搭建一个简单的博客，你也可以根据你的需求，进行修改.<br> 当然你也可以选择不同的主题对你的博客进行美化<br> 这篇文章里有一些好看的hexo主题推荐,希望可以给你带来帮助<br> <a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgfxpzdz0000tm1fppuddqfq","tag_id":"cjgfxpze90004tm1fsekt8qg1","_id":"cjgfxpzeg0009tm1fw2nh5t0j"},{"post_id":"cjgfxpze60002tm1fkv7sgouj","tag_id":"cjgfxpze90004tm1fsekt8qg1","_id":"cjgfxpzeq000htm1fc2nup6dk"},{"post_id":"cjgfxpze60002tm1fkv7sgouj","tag_id":"cjgfxpzek000ctm1fexwk3oq9","_id":"cjgfxpzer000jtm1ffutkm8uz"},{"post_id":"cjgfxpzea0005tm1f2m5rjffi","tag_id":"cjgfxpzeo000ftm1fh02o3ihb","_id":"cjgfxpzeu000otm1fqx5uf4tn"},{"post_id":"cjgfxpzea0005tm1f2m5rjffi","tag_id":"cjgfxpzer000ktm1ftici8dra","_id":"cjgfxpzeu000ptm1fqituhtzq"},{"post_id":"cjgfxpzea0005tm1f2m5rjffi","tag_id":"cjgfxpzet000mtm1f1wrh5mwd","_id":"cjgfxpzev000rtm1fjv3dbym2"},{"post_id":"cjgfxpzec0006tm1f2xn7u7u8","tag_id":"cjgfxpzeu000ntm1f08pn136q","_id":"cjgfxpzew000ttm1f03kogfsy"},{"post_id":"cjgfxpzec0006tm1f2xn7u7u8","tag_id":"cjgfxpzev000qtm1ffbntzs7q","_id":"cjgfxpzew000utm1f4w1qc0az"},{"post_id":"cjgfxpzed0007tm1f74anqol4","tag_id":"cjgfxpzew000stm1fkf8xfz0r","_id":"cjgfxpzex000wtm1fr4qamhtj"},{"post_id":"cjgfxpzeg000atm1fuurmofom","tag_id":"cjgfxpzex000vtm1fp1e5gn9d","_id":"cjgfxpzf00010tm1fxtj3m9xt"},{"post_id":"cjgfxpzeg000atm1fuurmofom","tag_id":"cjgfxpzey000xtm1f9bjvlzr7","_id":"cjgfxpzf00011tm1f1cwf67x7"},{"post_id":"cjgfxpzeg000atm1fuurmofom","tag_id":"cjgfxpzez000ytm1fdwi1hv6h","_id":"cjgfxpzf00013tm1f07ly0n5o"},{"post_id":"cjgfxpzeg000atm1fuurmofom","tag_id":"cjgfxpze90004tm1fsekt8qg1","_id":"cjgfxpzf00014tm1fr5ak4ei7"},{"post_id":"cjgfxpzei000btm1fxfjt92s3","tag_id":"cjgfxpzez000ztm1f4pmad33o","_id":"cjgfxpzf10017tm1fhen90x0f"},{"post_id":"cjgfxpzei000btm1fxfjt92s3","tag_id":"cjgfxpzf00012tm1f7yzugkkf","_id":"cjgfxpzf10018tm1fm6uestdb"},{"post_id":"cjgfxpzei000btm1fxfjt92s3","tag_id":"cjgfxpzf00015tm1f1ycsgmn7","_id":"cjgfxpzf2001atm1fmkvk6sn3"},{"post_id":"cjgfxpzel000dtm1f7bzbe5qd","tag_id":"cjgfxpzf10016tm1f98ohrtrn","_id":"cjgfxpzf2001ctm1fe1iexv5c"},{"post_id":"cjgfxpzel000dtm1f7bzbe5qd","tag_id":"cjgfxpzf10019tm1fexwmt7mo","_id":"cjgfxpzf2001dtm1fw6ctmxmi"},{"post_id":"cjgfxpzen000etm1fwt0i3e4o","tag_id":"cjgfxpzf2001btm1fm364ie8z","_id":"cjgfxpzf3001gtm1fgcq4z89d"},{"post_id":"cjgfxpzen000etm1fwt0i3e4o","tag_id":"cjgfxpzf2001etm1fxfzioa02","_id":"cjgfxpzf3001htm1f1y7wp6iz"},{"post_id":"cjgfxpzep000gtm1fexvtjmy2","tag_id":"cjgfxpzf3001ftm1fj8ibckaf","_id":"cjgfxpzf3001jtm1fu3fod1ba"},{"post_id":"cjgfxpzeq000itm1fkkbzgex8","tag_id":"cjgfxpzf3001itm1f0gqj38en","_id":"cjgfxpzf5001ntm1fk2ec45c2"},{"post_id":"cjgfxpzeq000itm1fkkbzgex8","tag_id":"cjgfxpzf4001ktm1fyvdv2pem","_id":"cjgfxpzf5001otm1fnilzfg4f"},{"post_id":"cjgfxpzeq000itm1fkkbzgex8","tag_id":"cjgfxpzeu000ntm1f08pn136q","_id":"cjgfxpzf5001ptm1fcui17dag"},{"post_id":"cjgfxpzes000ltm1fjh7q862p","tag_id":"cjgfxpzf4001mtm1fpstcdaef","_id":"cjgfxpzf5001qtm1fosksmxxn"}],"Tag":[{"name":"JavaScript","_id":"cjgfxpze90004tm1fsekt8qg1"},{"name":"盒模型","_id":"cjgfxpzek000ctm1fexwk3oq9"},{"name":"vue.js","_id":"cjgfxpzeo000ftm1fh02o3ihb"},{"name":"vuex","_id":"cjgfxpzer000ktm1ftici8dra"},{"name":"vue-router","_id":"cjgfxpzet000mtm1f1wrh5mwd"},{"name":"适配","_id":"cjgfxpzeu000ntm1f08pn136q"},{"name":"移动端","_id":"cjgfxpzev000qtm1ffbntzs7q"},{"name":"iframe","_id":"cjgfxpzew000stm1fkf8xfz0r"},{"name":"es6笔记","_id":"cjgfxpzex000vtm1fp1e5gn9d"},{"name":"class","_id":"cjgfxpzey000xtm1f9bjvlzr7"},{"name":"类","_id":"cjgfxpzez000ytm1fdwi1hv6h"},{"name":"vue","_id":"cjgfxpzez000ztm1f4pmad33o"},{"name":"node","_id":"cjgfxpzf00012tm1f7yzugkkf"},{"name":"mysql","_id":"cjgfxpzf00015tm1f1ycsgmn7"},{"name":"react","_id":"cjgfxpzf10016tm1f98ohrtrn"},{"name":"组件","_id":"cjgfxpzf10019tm1fexwmt7mo"},{"name":"随笔","_id":"cjgfxpzf2001btm1fm364ie8z"},{"name":"杂记","_id":"cjgfxpzf2001etm1fxfzioa02"},{"name":"git","_id":"cjgfxpzf3001ftm1fj8ibckaf"},{"name":"项目总结","_id":"cjgfxpzf3001itm1f0gqj38en"},{"name":"css","_id":"cjgfxpzf4001ktm1fyvdv2pem"},{"name":"Hexo","_id":"cjgfxpzf4001mtm1fpstcdaef"}]}}